CDECK  ID>, YPATCH.
      PROGRAM YPATCH
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /NAMES/ NAMEP(4),NAMEH(4),NAMED(4),NAMEOR(4),NAMACT(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON /SQK/   KQMAIN,KQT,KQR,KQJ,KQF,KQZ,KQH(4),KQS(8)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQT,LQR,LQJ,LQF,LQZ
     +,              LQH(4),LQS(6),   LQWM,LQWF,LQWZ,LQWSYS(6),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
     +,            ISPACE(160000),LAST
C--------------    END CDE                             --------------
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES=13)
      CHARACTER    NAME(NFILES)*(NCNAME)
 
 
      DATA NAME/ 'PAM     .pam        11    1024       0      !FF!'
     +,          'ASM     .f          21      68       0      !FF!'
     +,          'READ    .cra         1       4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!'
     +,          'ASMA    .s          22      68       0      !FF!'
     +,          'ASMD    .dat        23      68       0      !FF!'
     +,          'ASM2    .f          31      68       0      !FF!'
     +,          'ASMA2   .s          32      68       0      !FF!'
     +,          'ASMD2   .dat        33      68       0      !FF!'
     +,          'ASMX    .c          24      68       0      !FF!'
     +,          'ASMX2   .c          34      68       0      !FF!'
     +,          'ASMY    .y          25      68       0      !FF!'
     +,          'ASMY2   .y          35      68       0      !FF!' /
C-                _:.=+=.:_1_:.=+=.:_2_:.=+=.:_3_:.=+=.:_4_:.=+=.:
 
 
      CALL FLPARA (NFILES,NAME,
     +   'YPATCHY .')
 
      CALL PINIT
      NQUSED= 20
 
   21 CALL DOSPEC
      IF (JANSW.GE.5)        GO TO 31
      CALL DORUN
      GO TO 21
 
   31 CONTINUE
      CALL PEND
      END
C====================================================================
CDECK  ID>, YTOBCD.
      PROGRAM YTOBCD
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 6)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'PAM     .pam        11       0       1      !FF!'
     +,          'CARD    .car        21      68       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'CCH      -           4       0       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!'
     +,          'PDH     .car        22      68       5      !FF!' /
C-                _:.=+=.:_1_:.=+=.:_2_:.=+=.:_3_:.=+=.:_4_:.=+=.:
 
      CALL FLPARA (NFILES,NAME,
     +   'YTOBCD  No title deck, Separate decks, Title cards, Xpdh.')
 
      NSTRM  = 2
      CALL AUXINI
      CALL INCHCH
      CALL YBCDEX
      END
C====================================================================
CDECK  ID>, YTOBIN.
      PROGRAM YTOBIN
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 5)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'CARD    .car        11       4       1      !FF!'
     +,          'PAM     .pam        21      64       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'CCH      -           4       0       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
C-                _:.=+=.:_1_:.=+=.:_2_:.=+=.:_3_:.=+=.:_4_:.=+=.:
 
      CALL FLPARA (NFILES,NAME,
     +   'YTOBIN  Ponly,Quick, Truncate 72.')
 
      NSTRM  = 1
      NBUFCI = 1
      CALL AUXINI
      CALL INCHCH
      CALL YBINEX
      END
C====================================================================
CDECK  ID>, YTOCET.
      PROGRAM YTOCET
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 5)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'PAM     .pam        11       0       1      !FF!'
     +,          'CETA    .cet        21     192       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'READ    .cra         1      -4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YTOCETA Quick, Access_direct, Sequential, Magtape.')
 
      CALL AUXINI
      CALL YTOCEX
      END
C====================================================================
CDECK  ID>, YFRCET.
      PROGRAM YFRCET
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 5)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'CETA    .cet        11     128       1      !FF!'
     +,          'PAM     .pam        21      64       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'READ    .cra         1      -4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     + 'YFRCETA Ponly,Quick, Access_direct, Sequential, Magtape, True.')
 
      NSTRM  = 1
      NBUFCI = 1
      CALL AUXINI
      CALL YFRCEX
      END
C====================================================================
CDECK  ID>, YCOMPA.
      PROGRAM YCOMPA
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 4)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'NEW     .pam        12       0       4      !FF!'
     +,          'OLD     .pam        11       0       1      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YCOMPAR Ponly,Quick, Try continue.')
 
      NSTRM  = 1
      NBUFCI = 30
      CALL AUXINI
      CALL YCOMEX
      END
C====================================================================
CDECK  ID>, YEDIT.
      PROGRAM YEDIT
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES=10)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'OLD1    .pam        11       0       1      !FF!'
     +,          'NEW1    .pam        21      64       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'CCH      -           4       0       0      !FF!'
     +,          'READ    .cra         1      -4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!'
     +,          'OLD2    .pam        12       0       2      !FF!'
     +,          'NEW2    .pam        22      64       5      !FF!'
     +,          'OLD3    .pam        13       0       3      !FF!'
     +,          'NEW3    .pam        23      64       6      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YEDIT   Autoupd, Kill, Next, Ponly,Quick, Truncate 72.')
 
      NSTRM  = 3
      NBUFCI = 1
      CALL AUXINI
      CALL INCHCH
      CALL YEDTEX
      END
C====================================================================
CDECK  ID>, YINDEX.
      PROGRAM YINDEX
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 3)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'PAM     .pam        11       0       1      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YINDEX  Action,C/c,If,Keep,Seq, Ponly,Quick, Xp,Yd,Zz.')
 
      NBUFCI = -1
      NSTRM  = 1
      CALL AUXINI
      CALL YIXEX
      END
C====================================================================
CDECK  ID>, YLIST.
      PROGRAM YLIST
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 3)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'PAM     .pam        11       0       1      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YLIST   Eject hon, Start page, Wylbur lines, 0,1,2,3.')
 
      NBUFCI = -1
      NSTRM  = 1
      CALL AUXINI
      CALL YLISEX
      END
C====================================================================
CDECK  ID>, YSEARC.
      PROGRAM YSEARC
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 6)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'PAM     .pam        11       0       1      !FF!'
     +,          'CARD    .car        21      68       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'READ    .cra         1       4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!'
     +,          'TEMP    .scr        24      64       6      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YSEARCH Copy all, Quick, Title ignored.')
 
      CALL AUXINI
      CALL YSEREX
      END
C====================================================================
CDECK  ID>, YSHIFT.
      PROGRAM YSHIFT
 
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
 
      PARAMETER   (NCNAME=48)
      PARAMETER   (NFILES= 5)
      CHARACTER    NAME(NFILES)*(NCNAME)
      DATA NAME/ 'OLD     .pam        11       0       1      !FF!'
     +,          'NEW     .pam        21      64       4      !FF!'
     +,          'OPT      -           3       0       0      !FF!'
     +,          'READ    .cra         1       4       0      !FF!'
     +,          'PRINT   .lis         2      68       0      !FF!' /
 
      CALL FLPARA (NFILES,NAME,
     +   'YSHIFT  All,Unknown tags, Bypass, Ponly,Quick, Xcout, Ycin.')
      CALL SBIT1 (NOPTVL(4),21)
 
      NSTRM  = 1
      CALL AUXINI
      CALL YSHFEX
      END
C====================================================================
CDECK  ID>, FLPARA.
      SUBROUTINE FLPARA (NFILEP,NAMEIP,CHTXOP)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT,MMSLAT(36)
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
 
      PARAMETER   (NCNAME=48)
          CHARACTER    NAMEIN(13)*(NCNAME), EXTSTO(20)*4
          CHARACTER    COMD*256, CHSTRM*6,  CHWK2*2
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +,    LUNORG,LUNMOD, LSTRM,  NOPTPR(8)
     +,    LUNUSE,LUNDES,LUNBAK,LUNFLG,  MUSE(200)
     +,    NAMEIN, EXTSTO, COMD, CHSTRM, CHWK2, MSPACE(2000)
                   PARAMETER (NTEXT=128, NLINE=256)
                   CHARACTER  IDPROG*8,  HOMED*48
                   CHARACTER  LINECC*(NLINE), LINEUP*(NLINE)
                   CHARACTER  CHDEF*8,   CHTERM*4,   CHEXT*8
                   CHARACTER  TEXT*(NTEXT), FILEST(13)*(NTEXT)
      COMMON /FLKRAC/IFLDIA, INTACT, KINDPA, IFLBAK, JFAULT, NLCUM
     +,              JLINC,JLINT, NTXT, LUNOP, NHOMED, HOMED, IDPROG
     +,              LINECC,LINEUP, CHDEF,CHTERM, CHEXT,TEXT, FILEST
C--------------    END CDE                             --------------
      CHARACTER    CHTXOP*(*), NAMEIP(NFILEP)*(NCNAME)
      PARAMETER   (NWSTOR=4)
 
      LOGICAL      INTRAC
 
 
      CALL MQINIT (MSPACE(2000))
      IFLDIA = 7
 
      NFILE = NFILEP
      DO 12  J=1,NFILE
      NAMEIN(J) = NAMEIP(J)
   12 FILEST(J) = ' '
 
      LTXOP  = LEN (CHTXOP) - 1
      IDPROG = CHTXOP(1:8)
 
      COMD = IDPROG // CHAR(39)
      NCMD = 9
      CALL CUTOL (COMD(1:9))
 
      CALL VZERO  (NSTRM,24)
      CALL VBLANK (KARDCC,84)
      CALL VBLANK (NOPTPR,8)
      NOPTVL(4) = 131072
      IPROMI = 0
      IFLGOS = 0
      INIPRO = 0
 
C--                Get the home directory
 
      NHOMED = 0
      HOMED  = ' '
      CALL GETENVF ('HOME ', HOMED)
      N = LNBLNK (HOMED)
      IF (N.GT.0)  THEN
          IF (HOMED(N:N).NE.'/') THEN
              N = N + 1
              HOMED(N:N) = '/'
            ENDIF
          NHOMED = N
        ENDIF
 
C--                Is the user on-line ?
 
      INTACT = 0
      IF (INTRAC())  INTACT=7
      INTPRI = INTACT
 
C--                No dialogue printing if .GO on program statement
 
      NARGS = IARGC()
      IF (NARGS.EQ.0)              GO TO 17
      IF (NARGS.GT.NFILE)          GO TO 16
 
      LINECC = ' '
      JARG = NARGS
      CALL GETARG (JARG,LINECC)
      JLINT = LNBLNK (LINECC)
      IF (JLINT.LT.3)              GO TO 17
      CHEXT = LINECC(JLINT-2:JLINT)
      IF (CHEXT(1:1).EQ.':')  CHEXT(1:1)='.'
      CALL CLTOU (CHEXT(1:4))
      IF (CHEXT(1:4).NE.'.GO ')    GO TO 17
 
   16 INTPRI = 0
      IFLGOS = 7
   17 IF (INTPRI.NE.0)  THEN
          WRITE (IQTYPE,9001) IDPROG
          IF (LTXOP.GE.9)  WRITE (IQTYPE,9002) CHTXOP(9:LTXOP)
          IF (NFILE.LT.11)  THEN
              WRITE (IQTYPE,9006) (NAMEIN(J)(9:14),J=1,NFILE)
            ELSE
              WRITE (IQTYPE,9007) (NAMEIN(J)(9:14),J=1,NFILE)
            ENDIF
 
          IF (NARGS.GT.0)  THEN
              IF (NFILE.LT.11)  THEN
                  WRITE (IQTYPE,9008) (NAMEIN(J)(1:6),J=1,NFILE)
                ELSE
                  WRITE (IQTYPE,9009) (NAMEIN(J)(1:6),J=1,9)
                ENDIF
            ENDIF
        ENDIF
 
C--------          Aquire the program parameters
 
      CHTERM = ' '
      CHDEF  = '-    ...'
      NLCUM  = 0
      JUPRNT = 0
      NFILEX = 0
      JFILE  = 1
      JUSE   = 1
 
C----              Take parameters from the command line
 
      JARG  = 1
   31 IF (NLCUM.GT.0)  THEN
          COMD(NCMD+1:NCMD+NLCUM) = LINECC(1:NLCUM)
          CALL CSQMBL (COMD,1,NCMD+NLCUM)
          NCMD  = NDSLAT + 1
          NLCUM = 0
        ENDIF
 
      LINECC = ' '
      IF (JARG.GT.NARGS)           GO TO 34
      CALL GETARG (JARG,LINECC)
      JLINT = LNBLNK (LINECC)
      JARG  = JARG + 1
      GO TO 38
 
C----              Take parameters from next input line
 
   34 IF (INTPRI.NE.0)  THEN
          IF (NFILE-JFILE.LT.10)  THEN
              WRITE (IQTYPE,9008) (NAMEIN(J)(1:6),J=JFILE,NFILE)
            ELSE
              N = JFILE + 8
              WRITE (IQTYPE,9009) (NAMEIN(J)(1:6),J=JFILE,N)
            ENDIF
          IF (INIPRO.EQ.0)  CALL TMINIT (INIPRO)
          CALL TMPRO (' y> ')
        ENDIF
 
      CALL TMREAD (NLINE, LINECC, JLINT, ISTAT)
      IF (ISTAT.NE.0)              STOP 7
 
   38 IF (JLINT.EQ.0)              GO TO 31
 
      LINEUP = LINECC
      CALL CLTOU (LINEUP(1:JLINT))
      JLINC = 0
      IF (JFILE.GT.NFILE)          GO TO 72
 
C----              Next parameter
 
C--             LUNMOD is the IOMODE for this logical unit
C--             negative to flag accept 'EOF' on reader input
 
   41 CHSTRM =         NAMEIN(JFILE)(1:5)
      CHEXT  =         NAMEIN(JFILE)(9:14)
      LUNORG = ICDECI (NAMEIN(JFILE),17,24)
      LUNMOD = ICDECI (NAMEIN(JFILE),25,32)
      LSTRM  = ICDECI (NAMEIN(JFILE),33,40)
      KINDPA = LUNORG
      LUNUSE = LUNORG
      LUNDES = IABS(LUNMOD)
      LUNBAK = 0
      LUNFLG = 0
      IFLSCR = 0
      IF (CHEXT.EQ.'.scr    ')  IFLSCR = 7
 
C- 1 ATT  2 RES  3 CAR  4 DET  5 EOF  6 HOLD  7 OUT  8 CE  9 INI  10 FIN
 
      CALL UPKBYT (LUNDES,1,IOMODE,12,0)
 
      CALL FLKRAK (0)
      IF (JFAULT.NE.0)  THEN
          WRITE (IQTYPE,9042) JFILE
          GO TO 49
        ENDIF
 
      IF (TEXT(1:4).EQ.'    ')     GO TO 31
      IF (TEXT(1:8).EQ.'HELP    ')  THEN
          CALL HELPPR
          GO TO 31
        ENDIF
 
      IF (LUNORG.GE.5)             GO TO 61
      GO TO (43,51,55,57), LUNORG
 
C--                Reader input
 
   43 IF (TEXT(1:4).EQ.'&   ')  THEN
                             TEXT = 'TTY '
          IF (INTACT.NE.0)   TEXT = 'TTP '
        ENDIF
 
      IF     (TEXT(1:4).NE.'TTY ')  THEN
          IF (TEXT(1:4).NE.'TTP ')     GO TO 45
          IPROMI = 7
          IF (INIPRO.EQ.0)  CALL TMINIT (INIPRO)
        ENDIF
      IQREAD = IQTTIN
      LUNUSE = IQTTIN
      GO TO 64
 
   45 LUNUSE = IQREAD
      IF (TEXT(1:4).EQ.'-   ')  THEN
          TEXT = IDPROG // CHEXT
          CALL CLEFT (TEXT,1,20)
          CALL CUTOL (TEXT(1:20))
          GO TO 64
        ENDIF
 
      IF (TEXT(1:4).NE.'EOF ')     GO TO 64
      IF (LUNMOD.GE.0)             GO TO 48
      IQREAD = 0
      LUNUSE = 0
      GO TO 64
 
   48 WRITE (IQTYPE,9048) IDPROG
   49 IF (INTACT.EQ.0)       CALL PABEND
      INTPRI = INTACT
      JARG   = NARGS + 1
      GO TO 31
 
C--                Printer output
 
   51 IF (TEXT(1:4).EQ.'&   ')  TEXT = 'TTY '
      IF (TEXT(1:4).EQ.'TTY ')  THEN
          IQPRNT = IQTYPE
          LUNUSE = IQTYPE
          GO TO 64
        ENDIF
 
      JUPRNT = JUSE
      JUPRFI = JFILE
      LUNUSE = IQPRNT
      IF (TEXT(1:4).NE.'-   ')     GO TO 64
      TEXT = '+y.lis'
      GO TO 64
 
C--                Option string
 
   55 LUNUSE = 0
      IF (TEXT(1:4).EQ.'&   ')     GO TO 59
      IF (TEXT(1:4).EQ.'-   ')     GO TO 59
      CALL UCTOH1 (TEXT,NOPTPR,8)
      DO  56  JL=1,8
      J = IUCOMP (NOPTPR(JL),IQLETT,30)
      IF (J.NE.0)  CALL SBIT1 (NOPTVL(4),J)
   56 CONTINUE
      GO TO 64
 
C--                CCH - string
 
   57 LUNUSE = 0
      IF (TEXT(1:4).EQ.'&   ')     GO TO 59
      IF (TEXT(1:4).EQ.'-   ')     GO TO 59
      CALL UCTOH (TEXT,NCHCH,99,8)
      GO TO 64
 
   59 TEXT = '-'
      GO TO 64
 
C--                Normal files
 
   61 IF (LSTRM.NE.0)            LUNVL(LSTRM)=LUNUSE
      IF (TEXT(1:4).EQ.'&   ')   TEXT(1:4)='-   '
 
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
C--   set default for CETA file
      IF (IOMODE(8).NE.0)  THEN
          IF (TEXT(1:4).EQ.'-   ')  THEN
              TEXT = ' cetatape'
            ENDIF
        ENDIF
 
C--   set scratch file
      IF (IFLSCR.NE.0)  TEXT = '-temp.scr'
 
C--                Store usage for final processing
 
   64 NLCUM = JLINC
      FILEST(JFILE) = TEXT
      EXTSTO(JFILE) = CHEXT(2:5)
      CALL UCOPY (LUNUSE,MUSE(JUSE),NWSTOR)
      JUSE = JUSE + NWSTOR
      IF (INTPRI.EQ.0)             GO TO 68
 
      NTXT = LNBLNK (TEXT)
      IF (LUNUSE.EQ.0)  THEN
          WRITE (IQTYPE,9085) CHSTRM,TEXT(1:NTXT)
        ELSE
          WRITE (IQTYPE,9087) JFILE,CHSTRM,LUNUSE,TEXT(1:NTXT)
        ENDIF
 
   68 JFILE = JFILE + 1
      IF (TEXT(5:8).NE.' ...')  NFILEX = JFILE
      IF (JFILE.LE.NFILE)          GO TO 41
 
      IF (NLCUM.GT.0)  THEN
          COMD(NCMD+1:NCMD+NLCUM) = LINECC(1:NLCUM)
          CALL CSQMBL (COMD,1,NCMD+NLCUM)
          NCMD  = NDSLAT + 1
          NLCUM = 0
        ENDIF
 
C----              Start execution ?
 
      IF (IFLGOS.NE.0)             GO TO 83
      IF (CHTERM.NE.'    ')        GO TO 73
      IF (JARG.LE.NARGS)  THEN
          IF (JLINC.GE.JLINT)      GO TO 31
        ENDIF
   72 CALL FLKRAK (-1)
 
   73 IF (CHTERM(1:1).NE.':')  CHTERM(1:1) = '.'
      COMD(NCMD+1:NCMD+4) = CHTERM(1:1) // 'go' // CHAR(39)
      NCMD = NCMD + 4
      IF (INTACT.NE.0)  WRITE (IQTYPE,9073) COMD(1:NCMD)
 
      IF (CHTERM(2:3).EQ.'GO')     GO TO 83
      CHTERM = ' '
      IF (INIPRO.EQ.0)  CALL TMINIT (INIPRO)
      CALL TMPRO (' Type  GO  or stop  y> ')
      CALL TMREAD (4, CHTERM, NCH, ISTAT)
      IF (ISTAT.NE.0)              STOP 7
      CALL CLTOU (CHTERM)
      IF (CHTERM.EQ.'.GO ')        GO TO 83
      IF (CHTERM.EQ.':GO ')        GO TO 83
      IF (CHTERM.NE.'GO  ')            STOP
 
C--------          Final processing, OPEN the files
 
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
   83 IF (JUPRNT.NE.0)  THEN
          CALL UCOPY  (MUSE(JUPRNT),LUNUSE,NWSTOR)
          TEXT = FILEST(JUPRFI)
          NTXT = LNBLNK (TEXT)
          CALL UPKBYT (LUNDES,1,IOMODE,12,0)
          IOMODE(7) = -1
          CALL FLINK  (LUNUSE)
          LUNBAK = IFLBAK
          CALL UCOPY (LUNUSE,MUSE(JUPRNT),NWSTOR)
        ENDIF
 
      NOTPRS = INTPRI
      N = IUCOMP (IQPLUS,NOPTPR,8)
      IF (IQTYPE.EQ.IQPRNT)  THEN
          NOTPRS = 7
          N = 7
        ENDIF
 
      IF (N.EQ.0)  THEN
          WRITE (IQPRNT,9083) IDPROG
        ELSE
          WRITE (IQPRNT,9084) IDPROG
        ENDIF
 
      IF (NOTPRS.EQ.0)  WRITE (IQTYPE,9084) IDPROG
      IF (NFILEX.EQ.NFILE)  NFILEX = NFILE + 1
 
      JUSE  = 1
      JFILE = 1
   84 CALL UCOPY (MUSE(JUSE),LUNUSE,NWSTOR)
      TEXT   = FILEST(JFILE)
      NTXT   = LNBLNK (TEXT)
      CHSTRM = NAMEIN(JFILE)(1:5)
 
      IF (JFILE.NE.NFILEX)  THEN
          IF (TEXT(5:9).EQ.' ...')  TEXT(5:9) = '    '
        ENDIF
 
      IF (LUNUSE.EQ.0)  THEN
          WRITE (IQPRNT,9085) CHSTRM,TEXT(1:NTXT)
          IF (NOTPRS.NE.0)         GO TO 89
          WRITE (IQTYPE,9085) CHSTRM,TEXT(1:NTXT)
          GO TO 89
        ENDIF
 
      WRITE (IQPRNT,9087) JFILE,CHSTRM,LUNUSE,TEXT(1:NTXT)
 
      IF (NOTPRS.EQ.0)  THEN
      WRITE (IQTYPE,9087) JFILE,CHSTRM,LUNUSE,TEXT(1:NTXT)
      ENDIF
 
      IF   (JUSE.EQ.JUPRNT)        GO TO 88
      IF (LUNUSE.EQ.IQTTIN)        GO TO 89
      IF (LUNUSE.EQ.IQTYPE)        GO TO 89
 
      CALL UPKBYT (LUNDES,1,IOMODE,12,0)
 
C--   check explicite extension .CAR for PAM stream
      IF (IOMODE(11).NE.0)  THEN
          IOMODE(11) = 0
          IF (EXTSTO(JFILE).EQ.'car ')  IOMODE(3)=1
          GO TO 87
        ENDIF
 
C--   check 'Direct Access' format for CETA
      IF (IOMODE(8).EQ.0)          GO TO 87
      IF (JBIT(NOPTVL(4),13).NE.0)  THEN
          CALL SBIT0 (NOPTVL(4),1)
          IOMODE(8) = 2
          GO TO 87
        ENDIF
      IF (JBIT(NOPTVL(4),19).NE.0)  THEN
          CALL SBIT0 (NOPTVL(4),1)
          GO TO 87
        ENDIF
      IF (JBIT(NOPTVL(4),1) .NE.0)  IOMODE(8) = -1
 
   87 CALL FLINK (LUNUSE)
      LUNBAK = IFLBAK
   88 IF (LUNBAK.NE.0)  THEN
          WRITE (IQPRNT,9088)
          IF (NOTPRS.EQ.0)  WRITE (IQTYPE,9088)
        ENDIF
 
   89 IF (JFILE.EQ.NFILEX)  JFILE=NFILE
      JUSE  = JUSE  + NWSTOR
      JFILE = JFILE + 1
      IF (JFILE.LE.NFILE)          GO TO 84
      IF (NOTPRS.EQ.0)  WRITE (IQTYPE,9089)
      INTACT = 0
      IFLDIA = 0
      CHTERM = ' '
      RETURN
 
 9001 FORMAT (1X,A,' executing')
 9002 FORMAT (' Options  :     ',A)
 9006 FORMAT (' Default ext. : ',10A)
 9007 FORMAT (' Default ext. : ', 9A/(46X,4A,:))
 9008 FORMAT (' Stream names : ',10A)
 9009 FORMAT (' Stream names : ', 9A,'...')
 9042 FORMAT (' Faulty parameter',I3)
 9048 FORMAT (' EOF not allowed with ',A)
 9073 FORMAT (1X/'. ',A/1X)
 9083 FORMAT (1H1,A,' executing with Files / Options'/1X)
 9084 FORMAT (1X/1X,A,' executing with Files / Options'/1X)
 9085 FORMAT (6X,A,6X,A)
 9087 FORMAT (I4,2X,A,I3,3X,A)
 9088 FORMAT (21X,'existing file renamed to .bak')
 9089 FORMAT (1X)
      END
C====================================================================
CDECK  ID>, FLKRAK.
      SUBROUTINE FLKRAK (IPARA)
 
C-    Krack next parameter
 
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
                   PARAMETER (NTEXT=128, NLINE=256)
                   CHARACTER  IDPROG*8,  HOMED*48
                   CHARACTER  LINECC*(NLINE), LINEUP*(NLINE)
                   CHARACTER  CHDEF*8,   CHTERM*4,   CHEXT*8
                   CHARACTER  TEXT*(NTEXT), FILEST(13)*(NTEXT)
      COMMON /FLKRAC/IFLDIA, INTACT, KINDPA, IFLBAK, JFAULT, NLCUM
     +,              JLINC,JLINT, NTXT, LUNOP, NHOMED, HOMED, IDPROG
     +,              LINECC,LINEUP, CHDEF,CHTERM, CHEXT,TEXT, FILEST
C--------------    END CDE                             --------------
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT,MMSLAT(36)
      CHARACTER    COLCC(NLINE)*1, COLUP(NLINE)*1
      EQUIVALENCE (COLCC,LINECC), (COLUP,LINEUP)
 
      CHARACTER    HOLDPA*80
      CHARACTER    CHWORK*3
      EQUIVALENCE (CHWORK,HOLDPA)
 
C-----------  Directory for Public PAM Files
      CHARACTER    MPUBLI*(*)
      PARAMETER   (MPUBLI = '/cern/pro/pam/')
 
 
 
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
      TEXT  = ' '
      JFAULT = 0
      IFLCOL = 0
      IFLEXC = 0
 
C--                Entry from IOFILE
 
      IF (IFLDIA.NE.0)             GO TO 14
      LINECC = ' '
      CALL UH1TOC (KARDCC,LINECC,80)
      LINEUP = LINECC
      CALL CLTOU (LINEUP)
      JLINC = NCHCCD
      JLINT = NCHCCT
      KINDPA = 11
 
      IF (IOMODE(3).EQ.0)  THEN
          CHEXT = '.pam'
        ELSE
          CHEXT = '.car'
        ENDIF
      GO TO 21
 
C--                Entry from FLPARA
 
   14 IF (CHTERM.NE.'    ')        GO TO 29
      NLCUM = JLINC
 
C-----             Handle 'No parameter'
 
C--                No more parameters
 
   21 JLINC = ICNEXT (LINECC,JLINC+1,JLINT)
      IF (JLINC.GT.JLINT)             RETURN
      NCHUU = NDSLAT
      JENDU = NESLAT
 
C--                Remove apostrophes
 
      IF (COLCC(JLINC).EQ.CHAR(39))  THEN
          JN = JLINC
   22     COLCC(JN) = ' '
          COLUP(JN) = ' '
          JN = ICFIND (CHAR(39),LINECC,JN+1,JLINT)
          IF (JN.GT.JLINT)         GO TO 21
          GO TO 22
        ENDIF
 
C--                Remove leading reverse slash
 
      IF (COLCC(JLINC).EQ.CHAR(92))  THEN
          COLCC(JLINC) = ' '
          GO TO 21
        ENDIF
 
C--                '-' or '&' for Skip next parameter
 
      TEXT(1:1) = COLCC(JLINC)
      IF     (COLCC(JLINC).NE.'-') THEN
          IF (COLCC(JLINC).NE.'&') GO TO 23
        ENDIF
 
      IF (KINDPA.NE.4)                         RETURN
      IF (INDEX('+*!?C', COLCC(JLINC+1)).EQ.0)  RETURN
      GO TO 41
 
C--                '.' or ':' for Skip Remaining parameters
 
   23 IF     (COLCC(JLINC).NE.':')  THEN
          IF (COLCC(JLINC).NE.'.') GO TO 41
        ENDIF
 
      JN = ICFNBL (LINECC,JLINC+1,JLINT)
      IF (JN.GE.JLINT)             GO TO 27
      CHWORK = LINEUP(JN:JN+2)
      IF (CHWORK.EQ.'GO ')         GO TO 28
      IF (COLCC(JLINC+1).NE.' ')   GO TO 41
 
   27 CHWORK = '  '
   28 CHTERM = COLCC(JLINC) // CHWORK
      IF (CHTERM(1:1).EQ.':')  CHDEF(1:1) = '&'
      JLINC = NLCUM
   29 TEXT(1:8) = CHDEF
      RETURN
 
C-----             Check special parameters
 
   41 IF (IPARA.EQ.-1)            RETURN
      JLAST = JENDU - 1
      NCHU  = NCHUU
      TEXT  = LINEUP(JLINC:JLINC+NCHU-1)
      IF (NCHU.LE.4)  THEN
          IF (TEXT(1:5).EQ.'HELP ')     GO TO 78
          IF (TEXT(1:5).EQ.'TTY  ')     GO TO 78
          IF (TEXT(1:5).EQ.'TTP  ')     GO TO 78
          IF (TEXT(1:5).EQ.'EOF  ')     GO TO 78
        ENDIF
 
C--                Handle literal enclosed by $
 
      IF (COLCC(JLINC).EQ.'$')  THEN
          JLINC = JLINC + 1
          JLAST = ICFIND ('$',LINECC,JLINC,JLAST)
          NCHU  = JLAST - JLINC
          IF (NCHU.LE.0)           GO TO 91
          TEXT = LINECC(JLINC:JLINC+NCHU-1)
          GO TO 78
        ENDIF
 
C--                Stop analysis of OPT or CCH parameter
 
      IF (KINDPA.EQ.3)             GO TO 78
      IF (KINDPA.EQ.4)             GO TO 78
 
C--                Handle  LNAME!  for logical names
 
      IF (COLCC(JLAST).EQ.'!')  THEN
          JLAST  = JLAST - 1
          IFLEXC = 7
        ENDIF
 
C-----             Analyse file name
 
      JLINU = JLINC
      TEXT = ' '
 
C--                Check prefix  : + =
 
   44 J = INDEX (':+=', COLCC(JLINU))
      IF (J.EQ.0)                  GO TO 45
      IF (J.EQ.1)  THEN
          IFLCOL = 7
        ELSE
          TEXT(1:1) = COLCC(JLINU)
        ENDIF
      JLINU = JLINU + 1
      GO TO 44
 
   45 JTXU = 2
 
C----              Is the file PUBLIC ?
 
      IF (COLCC(JLINU).EQ.'*')  THEN
          N  = LEN (MPUBLI)
          TEXT(JTXU:JTXU+N-1) = MPUBLI
          JTXU  = JTXU  + N
          JLINU = JLINU + 1
          GO TO 46
        ENDIF
 
C----              Does the file name start with (SYMBOL)
 
      IF (COLCC(JLINU).EQ.'(')  THEN
          JLINU = JLINU + 1
          JA = JLINU
          JE = ICFIND (')',LINECC,JA,JLAST)
          IF (NGSLAT.EQ.0)         GO TO 46
          JLINU = JE + 1
          IF (JE.EQ.JA)            GO TO 46
          LINECC(JE:JE) = ' '
          CALL GETENVF (LINECC(JA:JE),HOLDPA)
          N = LNBLNK (HOLDPA)
          IF (N.LE.0)              GO TO 46
 
          TEXT(JTXU:JTXU+N-1) = HOLDPA(1:N)
          JTXU  = JTXU  + N
          GO TO 46
        ENDIF
 
C----              Does the file name start with '~'
 
      IF (COLCC(JLINU).EQ.'~')  THEN
        IF (NHOMED.GT.0)   THEN
          N = NHOMED
          TEXT(JTXU:JTXU+N-1) = HOMED(1:N)
          JTXU  = JTXU  + N
          JLINU = JLINU + 1
          IF (COLCC(JLINU).EQ.'/')  JLINU=JLINU+1
        ENDIF
        ENDIF
 
C----            Look for Directory and Extension
 
   46 IF (JLINU.GT.JLAST)          GO TO 91
      IF (IFLCOL.EQ.0)  CALL CUTOL (LINECC(JLINU:JLAST))
 
      JFILN = JLINU
      J     = ICFILA ('/', LINECC,JFILN,JLAST) + 1
      IF (J.LE.JLAST)   JFILN = J
      LDIR  = JFILN - JLINU
 
      JEXT  = ICFILA ('.', LINECC,JFILN,JLAST)
      LEXT  = JLAST+1 - JEXT
      LFILN = JEXT    - JFILN
 
C----              Do the Directory
 
      IF (LDIR.NE.0)  THEN
          TEXT(JTXU:JTXU+LDIR-1) = LINECC(JLINU:JLINU+LDIR-1)
          JTXU = JTXU + LDIR
        ENDIF
 
C----              Do the File-name
 
      IF (LFILN.GE.3)              GO TO 49
      IF (LFILN.LE.0)              GO TO 91
 
      JUSE = ICDECI (LINECC,JFILN,JFILN)
      IF (JUSE.EQ.0)               GO TO 49
 
C--                File name 'n' or 'n+' to use name of stream n
 
      KEEPD = 0
      IF (LFILN.EQ.2)   THEN
          IF (LDIR.NE.0)               GO TO 91
          IF (COLCC(JFILN+1).NE.'+')   GO TO 91
          KEEPD = 7
        ENDIF
 
      NUSE = LNBLNK (FILEST(JUSE))
      IF (NUSE.LE.1)               GO TO 91
 
      JUFN  = ICFILA ('/',FILEST(JUSE),2,NUSE) + 1
      IF (JUFN.GT.NUSE)  JUFN = 2
      JUEX = ICFILA ('.',FILEST(JUSE),JUFN,NUSE)
      JUST = 2
      IF (KEEPD.EQ.0)  JUST = JUFN
      N = JUEX - JUST
 
      TEXT(JTXU:JTXU+N-1) = FILEST(JUSE)(JUST:JUST+N-1)
      JTXU = JTXU + N
      GO TO 51
 
   49 TEXT(JTXU:JTXU+LFILN-1) = LINECC(JFILN:JFILN+LFILN-1)
      JTXU = JTXU + LFILN
 
C----              Do the File extension
 
   51 IF (LEXT.GT.0)  THEN
          TEXT(JTXU:JTXU+LEXT-1) = LINECC(JEXT:JEXT+LEXT-1)
          CHEXT = TEXT(JTXU:JTXU+LEXT-1)
          JTXU  = JTXU + LEXT
        ELSE
          IF (IFLEXC.NE.0)         GO TO 57
          N = LNBLNK (CHEXT)
          TEXT(JTXU:JTXU+N-1) = CHEXT(1:N)
          JTXU = JTXU + N
        ENDIF
 
   57 CALL CLEFT (TEXT,2,JTXU)
 
C--                EXIT
 
   78 JLINC = JENDU
      RETURN
 
C----              Trouble
 
   91 JFAULT = 7
      RETURN
      END
C====================================================================
CDECK  ID>, FLINK.
      SUBROUTINE FLINK (LUNP)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT,MMSLAT(36)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
                   PARAMETER (NTEXT=128, NLINE=256)
                   CHARACTER  IDPROG*8,  HOMED*48
                   CHARACTER  LINECC*(NLINE), LINEUP*(NLINE)
                   CHARACTER  CHDEF*8,   CHTERM*4,   CHEXT*8
                   CHARACTER  TEXT*(NTEXT), FILEST(13)*(NTEXT)
      COMMON /FLKRAC/IFLDIA, INTACT, KINDPA, IFLBAK, JFAULT, NLCUM
     +,              JLINC,JLINT, NTXT, LUNOP, NHOMED, HOMED, IDPROG
     +,              LINECC,LINEUP, CHDEF,CHTERM, CHEXT,TEXT, FILEST
C--------------    END CDE                             --------------
      EQUIVALENCE (LUN,LUNOP)
 
      CHARACTER      OST*12, USF*11
      CHARACTER*(*)  UNF, FRM, CSOLD, CSNEW, CSAPP, CSOVR, CSSCR, APX
      PARAMETER   (UNF='UNFORMATTED')
      PARAMETER   (FRM='FORMATTED')
      PARAMETER   (APX='APPEND')
      CHARACTER    UCC*8, CCPRI*(*), CCCAR*(*)
      PARAMETER   (CCPRI='FORTRAN')
      PARAMETER   (CCCAR='LIST')
      PARAMETER   (CSOLD='OLD')
      PARAMETER   (CSNEW='NEW')
      PARAMETER   (CSAPP='UNKNOWN')
      PARAMETER   (CSOVR='NEW')
      PARAMETER   (CSSCR='SCRATCH')
      LOGICAL THERE
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
      LUN  = LUNP
      IFLBAK = 0
      IF (TEXT(1:4).EQ.'    ')  GO TO 99
      IF (TEXT(1:4).EQ.'-   ')  GO TO 99
      IF (TEXT(1:4).EQ.'&   ')  GO TO 99
      MODEX  = IOMODE(7)
 
C--                Check : + APPEND, = OVERWRITE, - SCRATCH
 
      IF (TEXT(1:1).EQ.'=')        GO TO 16
      IF (TEXT(1:1).EQ.'-')        GO TO 17
      IF (TEXT(1:1).NE.'+')        GO TO 19
      MODEX = 2*MODEX
      IOMODE(2) = 1
      GO TO 18
 
   16 MODEX = 3*MODEX
      GO TO 18
 
   17 MODEX = 4*MODEX
   18 IF (MODEX.EQ.0)  WRITE (IQTYPE,9018)
      TEXT(1:1) = ' '
 
   19 CALL CLEFT  (TEXT,1,NTEXT)
      NTXT = NDSLAT
 
      IF (IOMODE(8).NE.0)  THEN
          IF (MODEX.EQ.2)  WRITE (IQTYPE,9024)
          IF (MODEX.NE.0)  MODEX = 3
        ENDIF
 
      MODXA = IABS (MODEX)
      CLOSE (LUN)
 
      JOPFL = 0
      IF (MODXA.EQ.1)  JOPFL = 2
      IF (MODXA.EQ.3)  JOPFL = 1
 
      IF (JOPFL.NE.0)  THEN
          CALL FLOPER (JOPFL, TEXT(1:NTXT), LUN)
          IF (JOPFL.EQ.2)  IFLBAK = NDSLAT
        ENDIF
 
      IF (IOMODE(3).EQ.0)  THEN
          USF = UNF
        ELSE
          USF = FRM
        ENDIF
 
C----              Open next file -- according to MODEX parameter
C---               MODEX =-3  Old Printer File - OVERWRITE mode
C---               MODEX =-2  Old Printer File - APPEND mode
C---               MODEX =-1  New Printer File
C---               MODEX = 0  Input File
C---               MODEX = 1  New Output File
C---               MODEX = 2  Old Output File - APPEND mode
C---               MODEX = 3  Old Output File - OVERWRITE mode
C---               MODEX = 4  Scratch File
 
      IF (MODXA.EQ.0)  OST = CSOLD
      IF (MODXA.EQ.1)  OST = CSNEW
      IF (MODXA.EQ.2)  OST = CSAPP
      IF (MODXA.EQ.3)  OST = CSOVR
      IF (MODXA.EQ.4)  OST = CSSCR
      IF (IOMODE(8).NE.0)          GO TO 41
 
      IF (MODXA.EQ.2)  THEN
          OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST,ACCESS=APX,FORM=USF)
        ELSEIF (MODXA.EQ.4)  THEN
          OPEN (LUN,STATUS=OST,FORM=USF)
        ELSEIF (MODXA.EQ.0)  THEN
      INQUIRE(FILE=TEXT(1:NTXT),EXIST=THERE)
      IF(.NOT.THERE) THEN
      WRITE(6,9999) TEXT(1:NTXT)
      STOP
      ENDIF
          OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST, FORM=USF)
        ELSE
          OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST, FORM=USF)
        ENDIF
      GO TO 99
 
C----              OPEN CETA tape or disk File
 
   41 CONTINUE
      IF (IOMODE(8).GE.0)  THEN
          IF (MODEX.EQ.0)  THEN
              OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST,FORM=UNF)
            ELSE
              OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST,FORM=UNF)
            ENDIF
        ELSE
          IF (MODEX.EQ.0)  THEN
              OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST,FORM=UNF
     +,             ACCESS='DIRECT',RECL=3600)
            ELSE
              OPEN (LUN,FILE=TEXT(1:NTXT),STATUS=OST,FORM=UNF
     +,             ACCESS='DIRECT',RECL=3600)
            ENDIF
        ENDIF
   99 RETURN
 
 9018 FORMAT (' !!! No APPEND/OVERWRITE mode for input files !!!')
 9024 FORMAT (' !!! APPEND mode not possible for CETA files !!!')
 9999 FORMAT (' !!! Input file not exist : ',a)
      END
C====================================================================
CDECK  ID>, FLOPER.
      SUBROUTINE FLOPER (MODE, CHFILE, LUNOP)
 
C-    File operations :
C-    MODE = 1 :  delete file CHFILE
C-           2 :  change name of file CHFILE to CHFILE.bak
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT,MMSLAT(36)
 
      CHARACTER    CHFILE*(*), CHBAK*256
      LOGICAL      THERE
      INTEGER      RENAMEF
 
C--                Check file exists
 
      NDSLAT = 0
      INQUIRE (FILE=CHFILE,EXIST=THERE)
      IF (.NOT.THERE)              RETURN
      IF (MODE.EQ.2)               GO TO 24
      IF (MODE.NE.1)               RETURN
 
C--                Remove file
 
      OPEN  (LUNOP,FILE=CHFILE,STATUS='OLD')
      CLOSE (LUNOP,STATUS='DELETE')
      RETURN
 
C--                Rename file
 
   24 N     = MIN (LEN(CHFILE), 252)
      NFI   = LNBLNK  (CHFILE(1:N))
      CHBAK = CHFILE(1:NFI) // '.bak'
      NBAK  = NFI + 4
 
      INQUIRE (FILE=CHBAK(1:NBAK),EXIST=THERE)
      IF (THERE)  THEN
          OPEN  (LUNOP,FILE=CHBAK,STATUS='OLD')
          CLOSE (LUNOP,STATUS='DELETE')
        ENDIF
 
      ISTAT = RENAMEF (CHFILE(1:NFI), CHBAK(1:NBAK))
      IF (ISTAT.EQ.0)  NDSLAT = 1
      RETURN
      END
C====================================================================
CDECK  ID>, HELPPR.
      SUBROUTINE HELPPR
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
 
C-----------  Directory for Public PAM Files
      CHARACTER    MPUBLI*(*)
      PARAMETER   (MPUBLI = '/cern/pro/pam/')
 
 
 
      WRITE (IQTYPE,9001)
      WRITE (IQTYPE,9002) MPUBLI
      WRITE (IQTYPE,9003)
      RETURN
 
 9001 FORMAT (1X
     F/' For each Stream indicated, give File/Option as parameter in'
     F/' 1-to-1 correspondance.'/
     F/' Parameters must be separated by 1 or more blanks,'
     F/' except: multiple - do not need imbedded blanks.' /
     F/' Special parameter values :'
     F/'   - or & : do not open this stream / option string void,'
     F/'            except READ : TTY/TTP if &, file name.cra if -'
     F/'                   PRNT : TTY if &,     file +y.lis   if -'
     F/' . or .go : use - for this and all remaining streams,'
     F/' : or :go : use & for this and all remaining streams,'
     F/'      TTY : use Terminal for this stream (only for READ+PRNT),'
     F/'      TTP : use TTY with prompting (only for READ),'
     F/'      EOF : void input (only for READ),'
     F/'     HELP : as you guessed.' )
 
 9002 FORMAT (1X/' Normal parameters :'
     F/'  File:  DIR/FN.EXT  path name; DIR/, .EXT  may be omitted,'
     F/'                     a default extension is added to the'
     F/'                     file name, unless it contains a dot'
     F/'                     or terminates with !'
     F/'    [:] +DIR/FN.EXT  open output file for Append'
     F/'    [:] =DIR/FN.EXT  open output file for Over-write'
     F/'    [:] *DIR/FN.EXT   = ',A,'DIR/FN.EXT  public files'
     F/'    [:] ~DIR/FN.EXT   = $HOME/DIR/FN.EXT  relative'
     F/'    [:] (X)/FN.EXT    = $X/FN.EXT   env. variable X'
     F/'    [:]  LNAME!      Link name, no default extension added'
     F/'     :   this prefix prevents conversion to lower case')
 9003 FORMAT (1X/
     F '     FN = n or n+  (n is digit 1 to 9) : use file-name of'
     F/'                   stream n without/with directory part'/
     F/' OPT/CCH: string of max. 8 characters; if the string needs'
     F/10X,'to start with  - or &  it should be enclosed by $ signs'/
     F/' You may give 1 or several parameters on a line, the machine'
     F/' will keep asking until its list is satisfied.'
     F/' After that, you type GO to start the run and open the files.'
     F/' If you type anything else  ABEND  occurs.'/1X)
      END
C====================================================================
CDECK  ID>, PINIT.
      SUBROUTINE PINIT
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
     +,            ISPACE(160000),LAST
C--------------    END CDE                             --------------
      DATA  IISET  / 4HSET  /
 
 
      LAST  = IISET
      IQLOG = IQPRNT
      ISAVE = IQREAD
 
      CALL MQINIT (LAST)
      NQLINK = IQLOCF(NVOPER(1)) - 1
      LQWORG = IQLOCF(ISPACE(1))
 
      IQREAD = ISAVE
 
      LQWORK = LQWORG
 
      WRITE (IQPRNT,9000) IQDATE,IQTIME
 9000 FORMAT                                       (1X/10H VERSION  ,
     + 40HPATCHY  4.15 /1  911211 12.02                                     HOLD
     F,12H.RJP, TODAY:,I8,I6/1X)
 
      CALL VZERO  (LQ1,LQWORK)
      CALL PLOAD
      CALL PREADY
      RETURN
      END
C====================================================================
CDECK  ID>, PREADY.
      SUBROUTINE PREADY
 
C-    INITIALISE, READY TO READ  P=CRA*,D=,C=1.
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      COMMON /NAMES/ NAMEP(4),NAMEH(4),NAMED(4),NAMEOR(4),NAMACT(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
     +,         (INCSEQ,NVINC(1)), (INCACT,NVINC(2)), (INCMAT,NVINC(3))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MNAMES(20),MMSEQ(4),MMPAM(4),MMASMH(4),MMASM(4)
      DIMENSION    LUNAV(11),NMASM(10),NWPAM(4)
 
 
 
      DATA  MNAMES /                                                    -A8M
     + 4HPAT ,3,2,3,4HHDEC,3,3,1,4HDECK,3,3,2,4HORG ,1,0,2,4HACT ,3,2,0/-A8M
C     DATA  MNAMES /                                                     A8M
C    + 4HPAT ,3,2,2,4HHDEC,3,3,1,4HDECK,3,3,1,4HORG ,1,0,1,4HACT ,3,2,0/ A8M
 
      DATA  MANN   /11/
      DATA  MMSEQ  /4HSEQ1,3,1,2H**/
      DATA  MMPAM  /4HPAM ,2,0,2H**/
      DATA  MMASMH /4HASMH,10,0,1/
      DATA  MMASM  /4HASM ,2,0,12/
      DATA  NMASM  /2H  ,2HA ,2HD ,2HX ,2HY ,2H2 ,2HA2,2HD2,2HX2,2HY2/
      DATA  NWPAM  /15, 100, 512, 24/
      DATA  NMCRA  /4HCRA*/
 
      DATA  LUNAV  / 11, 21,22,23,24,25, 31,32,33,34,35 /
 
C--          READY /ARRVRQ/
      DO 22 J=1,MANN
   22 IQUEST(J)= J - MANN + 2
      CALL UCOPY (IQUEST(1),MAFIL,MANN)
 
C--          READY /NAMES/
      CALL UCOPY (MNAMES(1),NAMEP(1),20)
 
C--          READY PRE-SET VARIABLES IN Q
 
      INCMAT = 3 / MPAK15(2) + 2
      INCACT = INCMAT + 2
C     INCSEQ = INCMAT + 1                                                A8M
      INCSEQ = INCMAT + 2                                               -A8M
 
      KADRV(1) = 6
      KADRV(8) = IQLOCF (LEXP)
 
      NVOPER(1)= 2
      NVOPER(2)= 3
C     NVGARB(3)= 1600                                                    A10
C     NVGARB(3)= 2000                                                    A8
C     NVGARB(3)= 2600                                                    A6
C     NVGARB(3)= 3200                                                    A5
      NVGARB(3)= 4000                                                    A4
      NVGARB(5)= 7
 
 
C--                SET UP OPTIONS
 
      CALL UPKBYT (NOPTVL(4),1,MOPTIO(1),30,0)
      CALL UBLOW  (NOPTVL(1),IQUEST(1),8)
      DO 24  J=1,8
      L = IUCOMP (IQUEST(J),IQLETT(1),30)
      IF (L.EQ.0)            GO TO 25
   24 MOPTIO(L) = 1
   25 MOPTIO(3) = 1
      MOPTIO(6) = 1
      CALL PKBYT (MOPTIO(1),MOPTIO(31),1,30,0)
      CALL SETOPT
 
C--                READY /DPWORK/
 
      CALL VBLANK (JDPMKT(1),117)
      LTAIL(6)  = IQEQU
      LTAIL(15) = IQDOT
 
C----              READY BANKS FOR  P=CRA*, D=BLANK.
 
      CALL VBLANK (IDARRV(1),8)
      IDARRV(3)= NMCRA
      CALL LIFTBK (LEXP,     0,    0, NAMEP(1),0)
      CALL LIFTBK (LPAST, LEXP,   -1, NAMEP(1),0)
      CALL LIFTBK (LEXH,  LEXP,   -2, NAMEH(1),0)
      CALL LIFTBK (LEXD,  LEXH,   -2, NAMED(1),0)
      CALL LIFTBK (LDECO,    0,    0, NAMEOR(1),0)
      LPCRA   = LEXP
      LDCRAB  = LEXD
 
      IQ(LPAST+2)= IQCOMA
      IQ(LEXP-3) = LEXP
      IQ(LEXP+1) = 16
      IQ(LEXP+2) = NMCRA
      IQ(LEXP+3) = IQBLAN                                               -A8M
      IQ(LEXH+1) = 0
      IQ(LEXD+1) = IQBLAN
      IQ(LEXD+2) = IQBLAN                                               -A8M
      IQ(LDECO-1)= LEXP
      IQ(LDECO+1)= IQBLAN
      IQ(LDECO+2)= IQBLAN                                               -A8M
 
      NVUSEB(1) =  992
      NVUSEB(2) =  992
      NVUSEB(3) =  992 + 16
      NVUSEB(4) = NVUSEB(3)
 
      CALL SBYT (NVUSEB(3),IQ(LEXP),1,18)                               -MSK
      CALL SBYT (NVUSEB(4),IQ(LEXD),1,18)                               -MSK
C     IQ(LEXP) = IQ(LEXP) .OR. NVUSEB(3)                                 MSKC
C     IQ(LEXD) = IQ(LEXD) .OR. NVUSEB(4)                                 MSKC
      NVARR(6) = 1
 
 
C----              READY RESERVED SEQUENCES
 
      CALL VBLANK (MWKX(1),80)
      IQUEST(1)= 0
      IQUEST(2)= KDNWT
      IQUEST(3)= 1
      IQUEST(4)= 1
      CALL PKBYT (IQUEST(1),MWKX(1),1,4,MPAK15(1))
      MMSEQ(4)= INCSEQ + KDNWT1
      JSTAT = 1
 
      DO 39  JS=1,6
      CALL LIFTBK (L,KADRV(1),0,MMSEQ(1),0)
      IQ(L-3)= LDECO
      JSTAT  = JSTAT + 64
      CALL SBYT (JSTAT,IQ(L),7,9)
      CALL UCOPY (MWKX(1),IQ(L+1),MMSEQ(4))
      GO TO (30,31,32,33,34,35), JS
 
   30 CALL UBLOW  (7HITIMQQ=,MWKX(47),7)
      CALL USET   (IQTIME,MWKX(41),17,20)
      CALL UBUNCH (MWKX(41),IQMSQ(L),20)
      CALL UBLOW  (8HTIMEQQ  ,IQUEST(1),8)
      JSTAT = 1
      GO TO 38
 
   31 CALL UBLOW  (7HIDATQQ=,MWKX(47),7)
      CALL USET   (IQDATE,MWKX(41),15,20)
      CALL UBUNCH (MWKX(41),IQMSQ(L),20)
      CALL UBLOW  (8HDATEQQ  ,IQUEST(1),8)
      GO TO 38
 
   32 CALL UBLOW (8HQCARD1  ,IQUEST(1),8)
      GO TO 38
 
   33 CALL UBLOW (8HQEJECT  ,IQUEST(1),8)
      GO TO 38
 
   34 CALL UBLOW (8HQFTITLE ,IQUEST(1),8)
      GO TO 38
 
   35 CALL UBLOW (8HQFTITLCH,IQUEST(1),8)
   38 CALL UBUNCH (IQUEST(1),IQCC(L),8)
   39 CONTINUE
 
 
C----              READY PAM-STRUCTURE
 
      NWPAM(1) = NWPAM(1) + KDNWT
      MMPAM(4) = NWPAM(1) + NWPAM(2) + NWPAM(3) + NWPAM(4)
      CALL LIFTBK (LPAM,0,0,MMPAM,0)
      CALL VZERO (IQ(LPAM+1),MMPAM(4))
      LINBUF      = LPAM + NWPAM(1)
      IQ(LINBUF-1)= NWPAM(2)
      IQ(LINBUF-2)= NWPAM(2) + NWPAM(3)
      NVARR(1) = LUNAV(1)
 
C----              Ready ASM-structure
 
      CALL LIFTBK (LSASM,0,0,MMASMH,0)
      IQ(LSASM+1)= 0
 
      DO 49 JF=1,10
      CALL LIFTBK (LASM,LSASM,-JF,MMASM,0)
      CALL VZERO (IQ(LASM+1),MMASM(4))
      IQ(LASM+1)= 1
      IQ(LASM+2)= -7
      IQ(LASM+4)= NMASM(JF)
      IQ(LASM+5)= LUNAV(JF+1)
 
      IF (JF.NE.1)           GO TO 42
      CALL UCTOH1 (
     + '+-CDECK  ID>, +.-;DECK  ID>, +.--/*DECK ID>, +. */---'
     +, MWKX(1),60)
      LT = 2
      GO TO 44
 
   42 IF (JF.NE.6)           GO TO 44
      LT = 2
 
   44 LP = 0
   45 LT = LT + 1
      IF (MWKX(LT).EQ.MWKX(2)) GO TO 46
      LP = LP + 1
      MWK(LP) = MWKX(LT)
      GO TO 45
 
   46 IF (LP.EQ.0)           GO TO 49
      CALL LIFTRH (LP,LRHC,0)
      LQ(LASM-1) = LRHC
   49 CONTINUE
 
      JANSW = 3
      RETURN
      END
C====================================================================
CDECK  ID>, PEND.
      SUBROUTINE PEND
 
C-    PRINT FINAL SUMMARY, REWIND USED ASM-FILES
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MASMPR(11), MFILPN(9), MFILPR(11), NVGBPR(4)
      EQUIVALENCE (MASMPR(3),  MFILPN(1), MFILPR(1),IQUEST(8))
      EQUIVALENCE (NVGBPR(1),NVGARB(1))
 
      DIMENSION    LISTPR(57),LISBIT(40),LISPAT(8)
      EQUIVALENCE (LISTPR(10),LISBIT(1),MWKX(10))
     +,           (LISTPR(50),LISPAT(1))
 
      DIMENSION    IVNQL(3)
      EQUIVALENCE (IVNQL(1),NQLNOR)
 
 
C------            PRINT SUMMARY OF PATCHES
 
      IF (NQUSED.GE.16)  WRITE (IQPRNT,9008)
      IF (NQUSED.LT.16)  WRITE (IQPRNT,9009)
      WRITE (IQPRNT,9010)
      IQ(LPAST-1) = LQUSER(7)
      CALL QTOPSY (KADRV(8))
      JBITQ = -1
      L = LEXP
 
   11 IF (IQ(L+2).EQ.IQDOT)  GO TO 14
      NVUSEB(10) = IQ(L)
      NVUSEB(11) = IQ(L+1)
      IF (JBITQ.LT.0)                   GO TO 12
      IF (JBIT(NVUSEB(11),6).EQ.JBITQ)  GO TO 12
      NOTHER = 7
      GO TO 17
 
   12 LISTPR(1) = JBYT (NVUSEB(11),16,15)
      CALL UBLOW (IQ(L+2),LISTPR(2),8)
 
      MMM = 63 - JBYT(NVUSEB(10),6,5)
      CALL CBYT (NVUSEB(10), 1,MMM, 6, 5)
      CALL CBYT (NVUSEB(10),11,MMM,11, 8)
      CALL CBYT (NVUSEB(11), 1,MMM,19, 7)
C-                  ----+----1----+----2----+----3----+----4----+---
      CALL UCTOH1 ('DMELU . DMELU . DMEL . DMEL . FMXPRQ* .         '
     +,                      LISBIT(1),48)
      CALL UPKBYT (MMM,1,MWK(1),26,0)
      IF (MWK(17).NE.0)  MWK(21)=0
      JB = 1
 
      DO 13 J=1,37
      IF (LISBIT(J).EQ.IQDOT)   GO TO 13
      IF (LISBIT(J).EQ.IQBLAN)  GO TO 13
      IF (MWK(JB).EQ.0)  LISBIT(J)=IQBLAN
      JB = JB + 1
   13 CONTINUE
 
      J = IQ(L-3)
      IF (J.NE.0)  CALL UBLOW (IQ(J+2),LISPAT(1),8)
      WRITE (IQPRNT,9013) LISTPR
      GO TO 17
 
C--                RPAM-BANK, NEW PAM-FILE
 
   14 CALL UBLOW (IQ(L+4),MFILPR(1),8)
      MFILPR(9) = JBYT (IQ(L),1,17)                                     -MSK
C     MFILPR(9) = IQ(L) .AND. 131071                                     MSKC
      MFILPR(10)= IQ(L+1)
      MFILPR(11)= IQ(L+3)
      IF (MFILPR(10).LT.0)   GO TO 16
      WRITE (IQPRNT,9014) MFILPR
      GO TO 17
 
   16 WRITE (IQPRNT,9016) MFILPN
   17 L = IQ(L-1)
      IF (L.EQ.0)            GO TO 18
      IF (L.NE.LPAST)        GO TO 11
      IF (IQ(L-1).EQ.0)      GO TO 21
C     CALL QSORTH (2,  LPAST-1)                                          A8M
      CALL QSORVH (2,2,LPAST-1)                                         -A8M
      WRITE (IQPRNT,9018)
      NOTHER = 0
      JBITQ  = 1
      GO TO 17
 
   18 IF (JBITQ.EQ.0)        GO TO 21
      IF (NOTHER.EQ.0)       GO TO 21
      WRITE (IQPRNT,9019)
      JBITQ = 0
      L = LPAST
      GO TO 17
 
C----              PRINT SUMMARY OF PAM MATERIAL READ
 
   21 WRITE (IQPRNT,9021)  (IQ(J+LPAM),J=7,11)
 
C----              IDENTIFY ALL ACTIVE ASM STREAMS
 
      DO 27  JF=1,10
      LASM = IQ(LSASM-JF)
      IF (IQ(LASM+5).EQ.0)   GO TO 27
      NCASM = IQ(LASM+2)
      IF (NCASM)             26,27,24
 
   24 JM = IQ(LASM+1)
      IF (JM.EQ.JF)          GO TO 27
      LASMM = IQ(LSASM-JM)
      IF (IQ(LASMM+3).NE.0)  GO TO 27
      IQ(LASMM+3) = -1
      GO TO 27
 
   26 IQ(LASM+2) = 0
   27 CONTINUE
 
C----              PRINT ASM SUMMARY, REWIND USED ASM FILES
 
      WRITE (IQPRNT,9031)
      MACTIV = 0
 
      DO 39 JF=1,10
      LASM  = IQ(LSASM-JF)
      IF (IQ(LASM+5).EQ.0)   GO TO 39
 
      CALL VBLANK (IQUEST(11),7)
      JM    = IQ(LASM+1)
      LASMM = IQ(LSASM-JM)
      NCASM = IQ(LASM+2)
 
C--                SECONDARY STREAM
 
      IF (JF.EQ.JM)          GO TO 31
      IF (NCASM.EQ.0)        GO TO 39
      GO TO 37
 
C--                PRIMARY STREAM
 
   31 NDKASM = IQ(LASM+3)
 
      IF (NDKASM.EQ.0)       GO TO 37
 
   36 CALL IOFILE (580,IQ(LASMM+5))
C-                 580 =   4 CARDS, 64 OUTPUT, 512 FINAL
 
   37 MASMPR(1) = IQ(LASM+4)
      MASMPR(2) = NCASM
      MASMPR(3) = IQ(LASM+3)
      MASMPR(4) = IQ(LASMM+10)
      MASMPR(5) = IQBLAN
      WRITE (IQPRNT,9038) MASMPR
   39 CONTINUE
 
C----              PRINT STORE INFORMATION
 
      NVGBPR(1) = NQMAX
      WRITE (IQPRNT,9041)  NVGBPR
      IF (NVGARB(4).NE.0)    GO TO 44
      J = LQTOL - LQWORK - NVGARB(3)
      WRITE (IQPRNT,9042) J
   44 CONTINUE
 
C----              PRINT LINES PARAMETERS
 
      WRITE (IQPRNT,9047) IVNQL
 
C----              PRINT WARNINGS
 
      WRITE (IQPRNT,9051) NVWARN
 
      N = NVWARN(1)+NVWARN(2)+NVWARN(3)+NVWARN(4)+NVWARN(6)
      IF (N.NE.0)   WRITE (IQPRNT,9052)
 
      RETURN
 
 9008 FORMAT (1H1,38(1H-))
 9009 FORMAT (1X/1X,38(1H-))
 9010 FORMAT (39H SUMMARY OF PATCHES IN PROCESSING ORDER/1X/
     F' PROCESSING MODE SELECTIONS',24X,'OTHER STATUS BITS FOR P=X'/1X/
     F11H D - DIVERT,40X,'F  - - -  DESELECTED BY  +PATCH,P=X,IF=...'/
     F 8H M - MIX,44X,'M - - -  DESELECTED BY  +IMITATE,P=X'/
     F 8H E - EXE,45X,'X  - -  NOT +EXE BUT AT LEAST 1 DECK TO ASM'/
     F 9H L - LIST,45X,'P - -  PARTIAL USE-SELECTION BY +USE,P=X,D=...'/
     F 8H U - USE,20X,6HSELF +,9X,4HSELF,8X,'R  -  P=X,T=REPEAT' /
     F20X,'INHIBIT FOREIGN  TRANS   ONLY',7X,'Q -  QUOTED IN IF=X'/
     F19X,2(8H -------),2(7H ------) /
     F19X,2(8H  DMELU ),2(7H  DMEL ),'  FMXPRQ    USED FROM P='/1X)
 9013 FORMAT (3X,I6,1X,8A1,3H . ,60A1)
 9014 FORMAT (1X,8A1,52X,'PAM  CALL/FILE',I5/3X,I6,2H -,I6)
 9016 FORMAT (1X,8A1,4H ---,48X,'PAM  CALL/FILE',I5)
 9018 FORMAT (1X/1X,28(1H-)/29H QUOTED PATCHES NOT TURNED UP/1X)
 9019 FORMAT (1X/1X,28(1H-)/29H OTHER  PATCHES NOT TURNED UP/1X)
 9021 FORMAT (1X/1X,14(1H-)/8H READ   ,I7,18H CARDS   ON CRADLE/
     F8X,I7,21H CARDS   ON CARD-PAMS/
     F8X,I7,' RECORDS ON COMPACT BINARY PAMS, INCL.',I6,' SKIPPED.'/
     F8X,I7,11H PAM-CALLS.)
 9031 FORMAT (1X/1X,14(1H-)/8H WRITTEN)
 9038 FORMAT (8X,3HASM,A2,I7,6H CARDS,I6,15H DECKS TO  LUN=,I3,A2,
     F4H -- ,7A1)
 9041 FORMAT (1X/1X,12(1H-)/13H MEMORY USAGE/
     F22H FINAL SIZE OF STORE =,I7/
     F39H LARGEST GAP REQUIRED BY ANY DECK WAS =,I5/
     F30H GAP SECURITY FOR THIS RUN WAS,8X,1H=,I5/
     F32H NUMBER OF GARBAGE COLLECTIONS =,I4)
 9042 FORMAT (25H NUMBER OF WORDS UNUSED =,I6)
 9047 FORMAT (1X/1X,17(1H-)/' LINES IN  /QMACH/'/' NQL-NOR  MAX  PTH'/
     F3X,3I5)
 9051 FORMAT (1X/1X,22(1H-)/23H NO.OF WARNINGS PRINTED/
     F1X/18H BAD CONTROL CARDS,I5/18H MISSING SEQUENCES,I5/
     F18H LOST ACTIVATIONS ,I5/16H UNSATISF/ REF'S,I7/
     F16H LEVEL 1 CLASHES,  I7/16H LEVEL 2 CLASHES,I7/1X,22(1H-))
 9052 FORMAT (1X,3(/1X,44(1H*)))
      END
C====================================================================
CDECK  ID>, DOSPEC.
      SUBROUTINE DOSPEC
 
C-    HANDLE SPECIAL RARE RUN CONDITIONS
 
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
     +,         (KACTEX,NVACT(4)), (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (JCCF,JCCPC)
      DIMENSION    MVPR(6)
      EQUIVALENCE (MVPR(1),IQUEST(11))
      DIMENSION    MMRBIG(4), MMUNIT(2)
 
 
      DATA  MMRBIG /4HRBIG,2,1,2/
      DATA  MMUNIT /4H RCR,4H CAR /,  ICRA/4HCRA*/
 
 
C----              GARBAGE COLLECTION
 
      GO TO (21,27,41,61), JANSW
 
   21 NVGARB(1) = LQTOL - LQWORK
      IF (LQUSER(5).EQ.0)    GO TO 22
      CALL QTOUCH (IQDROP,LQUSER(5),3HSH.)
      CALL MQGARB
      NVGARB(4) = NVGARB(4) + 1
   22 NQFREE = 0
   24 NVGARB(5) = NQFREE
   25 NQRESV = LQTOL - LQWORK
      NQFREE = NVGARB(1) - NQRESV
      NQUSED = NQUSED + 1
      IF (MOPTIO(2).NE.0)  WRITE (IQPRNT,9025) NDECKR,
     +                                         NVGARB(1),NQRESV,NQFREE
      IF (JANSW.EQ.3)        GO TO 48
      RETURN
 
C----              ROLL-IN MATERIAL FOR CURRENT PATCH
 
   27 CONTINUE
      RETURN
 
C----              EOF SEEN ON PAM-FILE,  (ALSO START P=CRA*,D=BLANK )
 
   41 IF (NVARR(6).NE.0)     GO TO 51
      IF (NCARDP.EQ.0)       GO TO 43
      NVARR(8)    = NVARR(8)    + NCARDP
      IQ(LPAM+10) = IQ(LPAM+10) + NSKIPR
      IQ(LRPAM+3) = NDECKR
      NDECKR = NDECKR + 1
      IF (JPROPD.GE.4)       GO TO 43
      IF (NVARR(7).LT.NVARR(10))  GO TO 71
 
C--                MULTI PAM FINISHED, TERMINAL REWIND
 
   43 J = LPAM + 9 - MODPAM
      IQ(J) = IQ(J) + NVARR(8)
      CALL IOFILE (512,NVARR(1))
      IF (IOMODE(6).EQ.0)  IQ(LRBIG+1)=-7
 
      WRITE (IQPRNT,9044) IQ(LPAM+11),NVARR(8),MMUNIT(MODPAM+1),MVPR
      NQUSED = NQUSED + 2
 
 
C----              RE-START INPUT FROM CRADLE
 
      NVARR(6) = 1
      IDARRV(1)= ICRA
      IDARRV(2)= IQBLAN                                                 -A8M
      IDARRV(3)= ICRA
      IDARRV(4)= IQBLAN                                                 -A8M
      JANSW    = 3
      IF (LQTOL-LQWORK.LT.NVGARB(3))  GO TO 21
   48 NVUTY(6)= 7
      CALL CREAPD (IDARRV(3),0)
      LEXH  = IQ(LEXP-2)
      LEXD  = 0
      LPCRA = LEXP
      LDECO = 0
      CALL SBYT (NDECKR,IQ(LEXP+1),16,15)
      NVUSEB(3) = IQ(LEXP)
 
   51 NVUSEB(4) = NVUSEB(3)
      NVUSEB(8) = NVUSEB(4)                                             -MSK
      CALL SBIT0      (NVUSEB(8), 8)                                    -MSK
      CALL SBYTOR (513,NVUSEB(8), 9,10)                                 -MSK
C     NVUSEB(8) = 131328 .OR. (NVUSEB(4).AND.130943)                     MSKC
      NVUSEB(9) = 1
      KADRV(2)  = 0
      KADRV(3)  = 0
      IDARRV(5) = IQSTAR
      IDARRV(6) = IQBLAN                                                -A8M
      NVGARB(1) = LQTOL - LQWORK
      NVDEP(5)  = 1
      NVDEP(6)  = 1
      NVDEPL(3) = 1
      NVDEPL(4) = 7
      NVOPER(3) = 0
      KACTEX= 0
      LACTEX= -7
      JCWAIT= LARGE
      JCWDEL= 0
      MODPAM= 1
      NCHKD = -1
      NCARDP= 0
      LUNPAM= IQREAD
      CALL KDNGO
      MCCTOU= -7
      JANSW = 3
      RETURN
 
C----              +QUIT IN CRADLE
 
   59 JANSW= 5
      RETURN
 
C-------           END OF CRADLE, START NEW PAM
 
   61 IQ(LPAM+7) = IQ(LPAM+7) + NCARDP
      IF (JCCTYP.NE.MCCPAM)  GO TO 59
      IQ(LPAM+1) = MCCPAR(JCCPD+1)
      IQ(LPAM+2) = MCCPAR(JCCPD+2)                                      -A8M
      IQ(LPAM+11)= IQ(LPAM+11) + 1
      MPAMTP     = MCCPAR(JCCPT+1)
      MODPAM     = JBIT(MPAMTP,3)
      NVOPER(3)  = JBIT(MPAMTP,21)
      NVARR(3)   = MCCPAR(JCCF+1)
      NVARR(5)   = IOTYPE (MPAMTP,0)
      NVARR(6)   = 0
      NVARR(7)   = 0
      NVARR(8)   = 0
      NVARR(9)   = 0
      IF (NCCPN.LT.2)        GO TO 62
      NVARR(9)   = -MCCPAR(JCCPN+1)
      JCCPN = JCCPN + 3
   62 NVARR(10)  = MCCPAR(JCCPN+1) - NVARR(9)
      IF (NVARR(10).EQ.0)    NVARR(10)=999
 
      IQ(LPAM+4) = 0
      IQ(LPAM+5) = MCCPAR(JCCPP+1)
      IQ(LPAM+6) = MCCPAR(JCCPP+2)                                      -A8M
      IF (NCCPP.LT.2)        GO TO 64
      CALL UBLOW (MCCPAR(JCCPP+4),IQUEST(1),2)
      J = IUCOMP (IQUEST(1),IQLETT(1),4)
      IF (J.EQ.0)            GO TO 64
      CALL SBIT1 (IQ(LPAM+4),J)
 
C--                READY  RBIG-BANK FOR NEW BIG-FILE
 
   64 CALL IOFILE (256+2048,NVARR(1))
      IQ(LPAM+3) = IOMODE(2)
      IF (IOPARF(3).NE.0)    GO TO 67
      IF (LRBIG.NE.0)        GO TO 69
      IOPARF(3) = IOPARF(1)
C-                           LQUSER(2) SUPPORTS 'RBIG'-STRUCTURE
   67 LRBIG = LQFIND   (IOPARF(3),2,2,K)
      IF (LRBIG.NE.0)        GO TO 69
      CALL LIFTBK (LRBIG,2,0,MMRBIG,7)
      IQ(LRBIG+1) = -7
      IQ(LRBIG+2) = IOPARF(3)
   69 IF (IOMODE(2).EQ.0)  IQ(LRBIG+1)=-7
 
   71 CALL DOSPGO
      IF (JPROPD.GE.4)       GO TO 43
      JANSW = 4
      RETURN
 
 9025 FORMAT (1X,I9,42X,'COLLECT GARBAGE,  GAPS BEF/AFT',3I6)
 9044 FORMAT (1X/1X,19(1H-),'  .END   PAM',I3,'  AFTER',I7,A4,
     F'DS TOTAL,   --  ',6A1)
      END
C====================================================================
CDECK  ID>, DOSPGO.
      SUBROUTINE DOSPGO
 
C-    READY NEXT PAM-FILE FOR PROCESSING, READ PAM HEADER RECORD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(9),LARX,LARXE,LINBUF
     +, NVCCP(7),JARDO,JARWT,JARLEV
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
      EQUIVALENCE(LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MVPR(30), MMRPAM(4)
      EQUIVALENCE (MVPR(1),MWKX(1))
 
C     DATA  MMRPAM /4HRPAM,2,1,4/                                        A8M
      DATA  MMRPAM /4HRPAM,2,1,5/                                       -A8M
      DATA  MMQUE  /4H????/
 
 
      CALL VZERO  (NCHKD,5)
      CALL VBLANK (KARDCC(1),84)
      IDARRV(5)= MMQUE
      IDARRV(6)= IQBLAN                                                 -A8M
      LUNPAM   = NVARR(1)
      NVOPER(6)= 0
      NDKSV    = NDECKR
      JPROPD   = 0
 
 
C----              READ FILE-NAME RECORD,  COMPACT BINARY
 
      NDPLEV = 0
      IF (MODPAM.NE.0)       GO TO 31
      MCCTOU = 0
 
      JARDO = 7
      CALL ARBIN
      IF (NVARRI(1).NE.3)    GO TO 25
      IF (NVARRI(3).NE.3)    GO TO 27
      IF (NVARRI(2).NE.0)    GO TO 27
      IF (JARDO    .NE.0)    GO TO 27
      NVARRI(3)= 0
      IDARRV(5)= NVARRI(5)
      IDARRV(6)= NVARRI(6)                                              -A8M
      NDECKR = 100 * ((NDECKR+98)/100)
      IF (IQ(LPAM+5).EQ.0)   GO TO 41
 
C--                READY NEXT RECORD WITH  +PAM,...,P=  : JPROPD=2
      JARDO = 7
      CALL ARBIN
      IF (NVARRI(1).NE.3)    GO TO 27
      NDECKR = NDECKR - 1
      JPROPD = 2
      GO TO 41
 
C--                START OF PATCH FOUND, CONTINUE PREV. FILE : JPROPD=-2
 
   25 IF ( NVARRI(1).NE.2)   GO TO 27
      IF (IQ(LRBIG+1).LT.0)  GO TO 27
      LRPAM = IQ(LRBIG-2)
      IDARRV(5) = IQ(LRPAM+4)
      IDARRV(6) = IQ(LRPAM+5)                                           -A8M
      N      = MOD (IQ(LRBIG+1)+1,100)
      NDECKR = N + 100*( (NDECKR-N+98) /100)
      JPROPD = -2
      GO TO 41
 
C--                EOI  OR  POSITIONING FAULT
 
   27 IF (JPROPD.GE.4)       RETURN
      WRITE (IQPRNT,9027)
      CALL PABEND
 
 
C--                READ TITLE CARD,  CARD-PAM
 
   31 MCCTOU = -7
      JCARD  =  1
      IF (IQ(LPAM+5).EQ.0)   GO TO 34
      IF (NVARR(9).LT.0)     GO TO 34
      JPROPD = 2
      GO TO 41
 
   34 JARWT  = 2
      LARMAT = LINBUF
      LAREND = LARMAT + 40
      JARDO  = 0
      CALL ARBCD
      IF (JPROPD.GE.4)       RETURN
      IF (JCCTYP.EQ.MCCTIT)  GO TO 31
      IF (NVDEP(12).EQ.0)    GO TO 41
      CALL NAMEFL (IQ(LINBUF),IDARRV(5))
 
C------            READY  RPAM-BANK,  LQUSER(7) SUPPORTS 'PAST PAT'-STR.
 
   41 CALL LIFTBK (LRPAM,7,0,MMRPAM,7)
      IQ(LRPAM+1) = NDECKR
      IQ(LRPAM+2) = IQDOT
      IQ(LRPAM+4) = IDARRV(5)
      IQ(LRPAM+5) = IDARRV(6)                                           -A8M
      IQ(LRBIG-2) = LRPAM
 
C--                PREPARE PRINTING
 
      CALL VBLANK (MVPR(1),30)
      CALL UBLOW (IDARRV(5),MVPR(2), 8)
      CALL UBLOW (6H.START, MVPR(12),6)
      IF (NVARR(9).LT.0)        GO TO 58
      IF (IDARRV(5).EQ.MMQUE)   GO TO 61
      IF (LQUSER(1).EQ.0)       GO TO 61
      IF (IQ(LRBIG+1).GE.0)     GO TO 61
 
 
C--                CHECK FILE DE-SELECTED
 
      LB = LQUSER(1)
   53 N  = IQ(LB+1)
      L  = LB + 2
 
      DO 54 J=1,N
      IF (IQ(L+1).NE.IDARRV(6))  GO TO 54                               -A8M
      IF (IQ(L)  .NE.IDARRV(5))  GO TO 54
      IQ(L) = 0
      GO TO 61
C  54 L  = L + 1                                                         A8M
   54 L  = L + 2                                                        -A8M
      LB = IQ(LB-1)
      IF (LB.NE.0)           GO TO 53
   58 NVARR(9) = NVARR(9) + 1
      CALL UBLOW (6H.SKIP ,MVPR(12),6)
      IQ(LRPAM+1) = -NDKSV - 1
      GO TO 64
 
C----              FILE ACCEPTED
 
   61 IF (JPROPD.NE.2)       GO TO 64
      JCCIFV = 0
      JCCPT  = 4
      MCCPAR(5) = IQ(LPAM+4)
      IDARRV(7) = IQ(LPAM+5)
      IDARRV(8) = IQ(LPAM+6)                                            -A8M
      IQ(LPAM+5)= 0
 
C--                PRINT START-OF-FILE INFORMATION
 
   64 NVARR(7) = NVARR(7) + 1
      MVPR(19) = 100*IQ(LPAM+11) + NVARR(7)
      CALL SBYT (MVPR(19),IQ(LRPAM),1,17)
      CALL UCTOH1 ('REWINDRESUMECONTIN',IQUEST(1),18)
      J = 6*IQ(LPAM+3)
      CALL UCOPY (IQUEST(J+1),MVPR(22),6)
      WRITE (IQPRNT,9064) MVPR
      NQUSED= NQUSED + 2
      IQ(LPAM+3)  = 2
      IQ(LRBIG+1) = -7
      RETURN
 
 9027 FORMAT ('0***  PAM IS NOT PACKED BINARY OR IS BADLY POSITIONED.')
 9064 FORMAT (1X/1X,10(1H-),18A1,'PAM-FILE',I4,6H,   --,11A1)
      END
C====================================================================
CDECK  ID>, DORUN.
      SUBROUTINE DORUN
 
C-    CONTROL PROCESSING OF INDIVIDUAL PATCHES AND DECKS
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
     +,         (KACTEX,NVACT(4)), (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
 
 
      DATA  ICRA   /4HCRA*/
 
 
C--   BRANCH:  1 GARB.COLL DONE,  2 ROLL-IN COMPLETE,  3 START CRADLE
C--                                                    4 START PAM
      GO TO (75,54,11,12), JANSW
 
C-----             START OR RE-START CRADLE INPUT
 
   11 NVOPER(6)  = 0
      IQ(LPAM+1) = 0
      GO TO 91
 
C-------------     START NEW PAM-FILE      -----------------------------
 
   12 IF (IQ(LRPAM+1).LT.0)  GO TO 17
      IF  (JPROPD.EQ.0)      GO TO 18
C     IF (IABS(JPROPD).NE.2) CALL QFATAL                                DEBUG
      IF (JPROPD.GE.0)       GO TO 13
 
C--                FOR  JPROPD=-2 : DECODE CARD +PATCH IN PENDING RECORD
 
      JASK = MAFIL-1
      CALL ARRIVE
      IDARRV(7)= MCCPAR(JCCPP+1)
      IDARRV(8)= MCCPAR(JCCPP+2)                                        -A8M
 
C  13 WRITE (IQPRNT,9013) IDARRV(7)                                      A8M
   13 WRITE (IQPRNT,9013) IDARRV(7),IDARRV(8)                           -A8M
      NQUSED = NQUSED + 2
      GO TO 42
 
C--                FILE DE-SELECTED
 
   17 JASK = MAFIL
      CALL ARRIVE
      NDECKR = -IQ(LRPAM+1) - 2
      JANSW  = 3
      RETURN
 
C--                FILE ACCEPTED, PRINT TITLE
 
   18 WRITE (IQPRNT,9019)
      NVDEPL(1)= 7
      NSV   = NQUSED
      NQUSED= 0
      JASK  = MAFIL-1
      CALL ARRIVE
      NQUSED = NQUSED + NSV + 2
      WRITE (IQPRNT,9019)
      GO TO 42
 
 
C-------------     SPECIAL CONDITIONS      -----------------------------
 
C--                ROLL-IN NEEDED FOR NEW PATCH
 
   21 JANSW = 2
      RETURN
 
C--                GARBAGE COLLECTION NEEDED FOR NEW DECK
 
   22 JANSW = 1
      RETURN
 
C--                END OF INPUT,   RETURN=PNAME,  EOF, +PAM, +QUIT
 
   23 NVARR(10)  = 0
      IQ(LRBIG+1)= NDECKR
 
   24 JANSW= 3
      IF (NVARR(6).EQ.0)     RETURN
      JANSW= 4
      RETURN
 
 
C-------------     NEXT PATCH ?            -----------------------------
 
C--                LAST PATCH PROCESSING FINISHED
 
   30 CALL DOUREF (7)
      GO TO 36
 
   31 CALL SBIT1 (IQ(LEXP+1),1)                                         -MSK
C  31 IQ(LEXP+1)= IQ(LEXP+1) .OR. 1                                      MSKC
 
   34 JPROPD = 0
   36 LSV = LEXP
C-                           LQUSER(7) SUPPORTS 'PAST PAT'-STRUCTURE
      CALL QSHUNT (KADRV(8),0,7,0)
      IF (LEXH.EQ.0)                GO TO 42
      IF (JBIT(IQ(LSV+1),5) .NE.0)  GO TO 42                            -MSK
C     IF ((IQ(LSV+1).AND.16).NE.0)  GO TO 42                             MSKC
C-                           LQUSER(5) SUPPORTS GARBAGE-STRUCTURE
      CALL QSHUNT (LSV,-2,5,0)
      GO TO 42
 
   39 IF (MOPTIO(1).NE.0)    GO TO 34
      LEXP  = IQ(LEXP-1)
      LQSTA = LSTASV
      LQEND = LSTASV
 
C----              FIND NEXT PATCH-NAME
 
   41 JASK = MAPAT
      CALL ARRIVE
   42 IF (IABS(JPROPD)-2)    41,43,24
 
C--                CHECK EXIT FOR  +PAM, RETURN=PNAME.
 
   43 IF (NVOPER(6).NE.0)    GO TO 23
      IDARRV(3)= IDARRV(7)
      IDARRV(4)= IDARRV(8)                                              -A8M
   44 IF (IDARRV(3).EQ.IQ(LPAM+1))  NVOPER(6)=7
      IF (IDARRV(4).NE.IQ(LPAM+2))  NVOPER(6)=0                         -A8M
 
C--                CREATE + RE-LINK PAT-BANK
 
      NVUTY(6) = 7
      NVUTY(7) = 7
      LSTASV = LQSTA
      CALL CREAPD (IDARRV(3),1)
      N = NDECKR
      IF (JPROPD.LT.0) N=N+1
      CALL SBYT (N,IQ(LCRP+1),16,15)
      NVUSEB(3) = IQ(LCRP)
      LEXH = IQ(LCRP-2)
 
 
C--                CHECK PATCH USE-ENABLED, PARTIAL USE + NOT INHIB
C--                CHECK DE-SELECTION FOR IMITATION
 
      IF (JBIT(NVUSEB(3),5) .NE.0)   GO TO 49                           -MSK
      IF (NVUTY(7).EQ.0)             GO TO 39                           -MSK
      IF (JBIT(IQ(LCRP+1),4).EQ.0)   GO TO 34                           -MSK
      IF (JBIT(NVUSEB(3),10).EQ.0)   GO TO 34                           -MSK
   49 IF (JBIT(IQ(LCRP+1),2).NE.0)   GO TO 34                           -MSK
 
C     IF ((NVUSEB(3).AND.16).NE.0)   GO TO 49                            MSKC
C     IF (NVUTY(7).EQ.0)             GO TO 39                            MSKC
C     IF ((IQ(LCRP+1).AND.8).EQ.0)   GO TO 34                            MSKC
C     IF ((NVUSEB(3).AND.512).EQ.0)  GO TO 34                            MSKC
C  49 IF ((IQ(LCRP+1).AND.2).NE.0)   GO TO 34                            MSKC
 
C--                CHECK ROLL-IN NEEDED
 
      IF (LEXH.EQ.0)         GO TO 54
      IF (IQ(LEXH+1).LT.0)   GO TO 21
      IF (IQ(LEXH-1).NE.0)   GO TO 21
 
C--                DECODE  +PATCH,..., T=REP,COMP,ASL,DATA,X,Y, IF=...
 
   54 IF (JPROPD.GE.0)       GO TO 55
      JASK = MAREAL
      CALL ARRIVE
   55 MT = MCCPAR (JCCPT+1)
C     IF (IABS(JPROPD).EQ.1) CALL QFATAL                                DEBUG
      IF     (JBIT(MT,18).NE.0)  CALL SBIT1 (IQ(LEXP+1),5)              -MSK
C     IF ((MT.AND.131072).NE.0)  IQ(LEXP+1)=IQ(LEXP+1) .OR. 16           MSKC
      IDARRV(1)= IQBLAN
      IDARRV(2)= IQBLAN                                                 -A8M
      IF (JCCIFV.NE.0)       GO TO 31
      NVDEP(5) = 1
      IF (JBIT(MT,25).NE.0)  NVDEP(5)=5
      IF (JBIT(MT,24).NE.0)  NVDEP(5)=4
      IF (JBIT(MT,4) .NE.0)  NVDEP(5)=3                                 -MSK
      IF (JBIT(MT,1) .NE.0)  NVDEP(5)=2                                 -MSK
C     IF ((MT.AND.8) .NE.0)  NVDEP(5)=3                                  MSKC
C     IF ((MT.AND.1) .NE.0)  NVDEP(5)=2                                  MSKC
      IF     (JBIT(NVUSEB(3),18).NE.0)  NVDEPL(2)=40                    -MSK
C     IF ((NVUSEB(3).AND.131072).NE.0)  NVDEPL(2)=40                     MSKC
      NVDEP(7)= IDARRV(3)
      NVDEP(8)= IDARRV(4)                                               -A8M
      JPROPD = 1
      GO TO 74
 
C-------------     NEXT DECK ?             -----------------------------
 
C--                LAST DECK PROCESSING FINISHED
 
   61 IF (LEXD.EQ.0)         GO TO 71
   65 JPROPD= 0
C-                           LQUSER(5) SUPPORTS GARBAGE-STRUCTURE
   66 CALL QSHUNT (LEXH,-2,5,0)
      GO TO 72
 
C----              FIND NEXT DECK NAME
 
   71 JASK = MADEC
      CALL ARRIVE
   72 IF (IABS(JPROPD)-1)    71,73,30
   73 IDARRV(1)= IDARRV(7)
      IDARRV(2)= IDARRV(8)                                              -A8M
      NVDEP(7) = IDARRV(1)
      NVDEP(8) = IDARRV(2)                                              -A8M
 
C--                CHECK GARBAGE COLLECTION NEEDED
 
   74 NQRESV = LQTOL - LQWORK
      IF (NQRESV.GE.NVGARB(3))       GO TO 75
      IF (LQUSER(5)+NVGARB(5).NE.0)  GO TO 22
   75 NVGARB(1) = LQTOL - LQWORK
 
C--                FIND DEC-BANK, RELINK IF ANY
 
      NVUSEB(3) = IQ(LEXP)
      KADRV(2)  = 0
      KADRV(3)  = 0
      LEXH  = IQ(LEXP-2)
      IF (LEXH.EQ.0)         GO TO 79
      KADRV(2) = LEXH-3
C     LEXD = LQFIND   (IDARRV(1),1,LEXH-2,K)                             A8M
      LEXD = LQLONG (2,IDARRV(1),1,LEXH-2,K)                            -A8M
      IF (LEXD.EQ.0)         GO TO 79
      CALL QSHUNT (K,0,LEXH,-2)
      KADRV(3) = LEXD-3
 
C--                CHECK USE-INHIBIT
 
      CALL MXJOIN (NVUSEB(3),IQ(LEXD))
      NVUSEB(4)= IQ(LEXD)
      IF (JBIT(NVUSEB(4),5) .NE.0)  GO TO 81                            -MSK
C     IF ((NVUSEB(4).AND.16).NE.0)  GO TO 81                             MSKC
      GO TO 65
 
   79 IF (JBIT(NVUSEB(3),5) .EQ.0)  GO TO 71                            -MSK
C  79 IF ((NVUSEB(3).AND.16).EQ.0)  GO TO 71                             MSKC
      NVUSEB(4)= NVUSEB(3)
      LEXD = 0
 
 
C--                DECODE  +DECK,..., T=COMP,ASL,DATA,X,Y,JOIN, IF=...
 
   81 NVUSEB(8) = NVUSEB(4)
      CALL MXJOIN (NVUSEB(1),NVUSEB(8))
      NVUSEB(9) = 0
      NVDEPL(3) = 0
      NVDEPL(4) = 7
      KACTEX = 0
      LACTEX = 0
      LDECO  = 0
      IF (JPROPD.GE.0)       GO TO 85
      JASK = MAREAL
      CALL ARRIVE
   85 IF (JCCIFV.NE.0)       GO TO 61
      MT = MCCPAR(JCCPT+1)
      NVDEPL(4)= JBIT (MT,10)                                           -MSK
C     NVDEPL(4)= MT .AND. 512                                            MSKC
      NVDEP(6) = NVDEP(5)
      IF (JBIT(MT,25).NE.0)  NVDEP(6)=5
      IF (JBIT(MT,24).NE.0)  NVDEP(6)=4
      IF (JBIT(MT,4) .NE.0)  NVDEP(6)=3                                 -MSK
      IF (JBIT(MT,1) .NE.0)  NVDEP(6)=2                                 -MSK
      IF (JBIT(MT,3) .NE.0)  NVDEP(6)=1                                 -MSK
C     IF ((MT.AND.8) .NE.0)  NVDEP(6)=3                                  MSKC
C     IF ((MT.AND.1) .NE.0)  NVDEP(6)=2                                  MSKC
C     IF ((MT.AND.4) .NE.0)  NVDEP(6)=1                                  MSKC
      IF (LEXD.NE.0)         GO TO 94
 
C--                PROCESS DECK FOR LEXD=0  (AND P=CRA*,D=,D=CRA*)
 
   91 CALL DODECK
      IF (LEXD.EQ.0)         GO TO 72
      IQ(LEXH-2)= IQ(LEXD-1)
      IF (LEXD.NE.LDCRAB)    GO TO 72
      CALL DOASM
      LEXD = 0
      GO TO 72
 
C--                PROCESS DECK FOR  LEXD.NE.0
 
   94 CALL DODECK
      GO TO 66
 
C9013 FORMAT (49X,2HP=,A10/1X)                                           A10
C9013 FORMAT (49X,2HP=,A8/1X)                                            A8
C9013 FORMAT (49X,2HP=,2A6/1X)                                           A6
C9013 FORMAT (49X,2HP=,2A5/1X)                                           A5
 9013 FORMAT (49X,2HP=,2A4/1X)                                           A4
 9019 FORMAT (1X)
      END
C====================================================================
CDECK  ID>, DODECK.
      SUBROUTINE DODECK
 
C-    PROCESS DECK MATERIAL
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDARRV(1)), (IDP(1),IDARRV(3)), (IDF(1),IDARRV(5))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
     +,         (KACTEX,NVACT(4)), (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LASM,NVDEP(2))
 
 
 
C---  ACTIVATION BITS  1 = SELECTED OR NOT INHIBITED
C-                     0 = NOT SELECTED OR INHIBITED
C-
C-             FORGN INHIB TRANS  SELF
C-         DIV     1     6    11    15
C-         MIX     2     7    12    16
C-         EXE     3     8    13    17
C-         LIST    4     9    14    18
C-         USE     5    10
 
      CALL UPKBYT (NVUSEB(4),1,NVUSEB(5),3,MPAK5(1))
      NVUSEB(10) = JBYT (NVUSEB(8),15,4)
      NVUSEB(11) = JBYT (NVUSEB(8), 6,4)
      IF (JBIT(NVUSEB(11),3).EQ.0)  CALL SBYT (0,NVUSEB(11),1,2)        -MSK
C     IF ((NVUSEB(11).AND.4).EQ.0)  NVUSEB(11)=NVUSEB(11).AND.8          MSKC
 
      IF (LACTEX.EQ.0)  CALL ACSORT
      IF (MODPAM.NE.0)  JCARD=1
      JANSW  = 0
      JPROPD = 0
      NDPLEV = 0
      NVDEP(1) = 0
      NVDEP(10)= 0
      NVDEPL(1)= 0
      MEXDEC(5)= 0
 
C------            SET PROCESSING MODES
 
   21 NVUSEB(10) = JBYTET (NVUSEB(10),NVUSEB(11),1,4)                   -MSK
C  21 NVUSEB(10) = NVUSEB(10) .AND. NVUSEB(11)                           MSKC
      CALL UPKBYT (NVUSEB(10),1,MEXDEC(1),4,0)
 
      NVUSEB(13) = MIN  (MOPTIO(6),MEXDEC(4))                           -MSK
      NVUSEB(9)  = MAX  (NVUSEB(9),NVUSEB(13))                          -MSK
C     NVUSEB(9)  = NVUSEB(9) .OR. (MOPTIO(6) .AND. MEXDEC(4))            MSKC
 
      NVUSEB(13) = 31 - NVUSEB(10)
      NVUSEB(14) = JBYTET (NVUSEB(13),NVUSEB(11),1,4)                   -MSK
C     NVUSEB(14) = NVUSEB(13) .AND. NVUSEB(11)                           MSKC
 
C--                SELECT ASM-FILE
 
      JASM = NVDEP(6)
      IF (MEXDEC(1).NE.0)  JASM=JASM+5
      LASM = IQ(LSASM-JASM)
      IF (IQ(LASM+5).NE.0)   GO TO 23
      MEXDEC(3) = 0
      CALL SBIT0 (NVUSEB(14),3)                                         -MSK
C     NVUSEB(14) = NVUSEB(14) .AND. 11                                   MSKC
      GO TO 24
 
   23 IQ(LSASM+1) = JASM
      IF (JBIT(IQ(LASM+12),13)  .EQ.0)  GO TO 24                        -MSK
C     IF ((IQ(LASM+12).AND.4096).EQ.0)  GO TO 24                         MSKC
      MEXDEC(2) = 1
      CALL SBIT0 (NVUSEB(14),2)                                         -MSK
C     NVUSEB(14) = NVUSEB(14) .AND. 13                                   MSKC
 
   24 IF (MEXDEC(3).NE.0)    GO TO 26
      MEXDEC(2) = 0
      CALL SBIT0 (NVUSEB(14),2)                                         -MSK
C     NVUSEB(14) = NVUSEB(14) .AND. 13                                   MSKC
 
C--                EXE/MIX/LIST MODE
 
   26 MEXDEC(6) = MEXDEC(2) + MEXDEC(3) - 1
      IF (MEXDEC(4).NE.0)    MEXDEC(6)=MEXDEC(6)+3
 
C--                PRINT DECK HEADER CARD
 
      MSELF  = MADRVS
      IF (MEXDEC(5).NE.0)    GO TO 52
      MDEPAR = 2
      IF (JCCBAD.NE.0)       GO TO 27
      IF (NVUSEB(9).EQ.0)    GO TO 28
      IF (NVOPER(3).NE.0)    GO TO 28
      MDEPAR = 4
   27 CALL DEPART
 
C--                DECIDE PROCESSING OF START OF DECK
 
   28 IF (MOPTIO(23).NE.0)   GO TO 29
      IF (MEXDEC(6).GE.0)    GO TO 52
      MSELF = MAFLAT
      IF (NVOPER(2).EQ.0)  MSELF=MACHEK
      GO TO 52
 
   29 MEXDEC(5) = 7
      GO TO 52
 
 
C-------------     DRIVE DECK MATERIAL          ------------------------
 
   40 JASK = MADEL
   41 CALL ARRIVE
      IF (JCARD.GT.JCWAIT)   CALL ACEXQ (-7)
   42 IF (JANSW.NE.0)        GO TO 82
 
C--                FOREIGN MATERIAL
 
      IF (JCCTYP.LE.0)       GO TO 44
      CALL DOMATF
      IF (JCCTYP.NE.0)       GO TO 42
   43 JASK = MASKIP
      GO TO 41
 
C--                CHECK DELETION
 
   44 IF (JCARD-JCWDEL)      40,52,45
   45 IF (JCCTYP.NE.0)       GO TO 58
 
C-------           PROCESS SELF-MATERIAL
 
   52 JASK = MSELF
      IF  (JASK.EQ.MAFLAT)   GO TO 41
      IF (JCARD.LT.JCWAIT)   GO TO 41
      CALL ACEXQ (0)
      IF (JCARD.GE.JCWDEL)   GO TO 41
      GO TO 40
 
   58 IF (NVUSEB(9).EQ.0)    GO TO 59
      MDEPAR = 4
      CALL DEPART
   59 IF (JCCTYP.LT.-2)      GO TO 71
 
 
C----              PROCESS  +SELF  OR  +SEQ
 
      NVUSEB(13) = MXCCIF
      JMISSW = JBIT(MCCPAR(JCCPT+1),16)
      IF (JCCTYP.EQ.-1)      GO TO 62
 
C--                HANDLE  +SELF, Z=..., T=PASS, IF=...
 
      IF (JCCIFV.NE.0)       GO TO 66
      IF (NCCPZ.EQ.0)        GO TO 61
      LTHISQ = LOCSEQ (MCCPAR(JCCPZ+1),KADRV(2),KADRV(3),0,7)
      IF (LTHISQ.NE.0)       GO TO 64
      CALL SBYTOR (NVUTY(16),NVUSEB(13),1,4)                            -MSK
C     NVUSEB(13) = NVUSEB(13) .OR. NVUTY(16)                             MSKC
   61 JCCTYP = -1
      GO TO 66
 
 
C--                HANDLE  +SEQ, Z=..., T=PASS, IF=...
 
   62 IF (JBIT(MCCPAR(JCCPT+1),4).NE.0)    GO TO 68                     -MSK
C  62 IF ((MCCPAR(JCCPT+1).AND.8).NE.0)    GO TO 68                      MSKC
      IF (JCCIFV.NE.0)       GO TO 66
      IF (NCCPZ.EQ.0)        GO TO 69
 
   63 LTHISQ = LOCSEQ (MCCPAR(JCCPZ+1),KADRV(2),KADRV(3),0,JMISSW)
      IF (LTHISQ.NE.0)       GO TO 64
      CALL SBYTOR (NVUTY(16),NVUSEB(13),1,4)                            -MSK
C     NVUSEB(13) = NVUSEB(13) .OR. NVUTY(16)                             MSKC
      GO TO 65
 
   64 CALL SBYTOR (IQ(LTHISQ),NVUSEB(13),1,4)                           -MSK
C  64 NVUSEB(13) = NVUSEB(13) .OR. IQ(LTHISQ)                            MSKC
      CALL ACPEEL (LTHISQ)
 
   65 JCCPZ = JCCPZ + 3
      NCCPZ = NCCPZ - 1
      IF (NCCPZ.NE.0)        GO TO 63
 
   66 IF (MOPTIO(12).EQ.0)   GO TO 67
      NVUSEB(13) = JBYTET (NVUSEB(13),NVUSEB(14),1,4)                   -MSK
C     NVUSEB(13) = NVUSEB(13) .AND. NVUSEB(14)                           MSKC
      IF (NVUSEB(13).EQ.0)   GO TO 67
      MDEPAR = 11
      CALL DEPART
   67 IF (JCCTYP.EQ.-1)      GO TO 52
      GO TO 43
 
C--                HANDLE  +SEQ, Z=..., T=DUMMY, IF=...
 
   68 IF (MEXDEC(5).EQ.0)    GO TO 52
      IF (JCCIFV.NE.0)       GO TO 685
  682 IF (NCCPZ.EQ.0)        GO TO 685
 
      LTHISQ = LOCSEQ (MCCPAR(JCCPZ+1),KADRV(2),KADRV(3),0,7)
      IF (LTHISQ.NE.0)       GO TO 683
      CALL SBYTOR (NVUTY(16),NVUSEB(13),1,4)                            -MSK
C     NVUSEB(13) = NVUSEB(13) .OR. NVUTY(16)                             MSKC
      GO TO 684
 
  683 IF (JBIT(IQ(LTHISQ),5).NE.0)  CALL ACXREF (LTHISQ,NVUSEB(13))
      CALL SBYTOR (IQ(LTHISQ),NVUSEB(13),1,4)                           -MSK
C     NVUSEB(13) = NVUSEB(13) .OR. IQ(LTHISQ)                            MSKC
 
  684 JCCPZ = JCCPZ + 3
      NCCPZ = NCCPZ - 1
      GO TO 682
 
  685 IF (JBYTET (NVUSEB(13),NVUSEB(14),1,4) .EQ.0)  GO TO 52           -MSK
C 685 IF ((NVUSEB(13).AND.NVUSEB(14))        .EQ.0)  GO TO 52            MSKC
 
      CALL SBYTOR (NVUSEB(13),NVUSEB(10),1,4)                           -MSK
C     NVUSEB(10) = NVUSEB(10) .OR. NVUSEB(13)                            MSKC
      GO TO 21
 
C--                FAULTY CARD  +SEQ.
 
   69 MDEPAR = 2
      CALL DEPART
      GO TO 66
 
C----     +IMITATE, +SUSPEND, +FORCE, +USE, +LIST, +EXE, +MIX, +DIVERT
 
   71 IF (JCCIFV.NE.0)       GO TO 52
      IF (JCCTYP-MCCASM)     75,74,72
   72 IF (JCCTYP.LE.MCCOPT)  GO TO 73
      CALL DOUSE
      GO TO 52
 
C--                HANDLE  +WARN, +ONLY, +PARA, +OPTION
 
   73 CALL DOOPT
      GO TO 52
 
C--                HANDLE  +ASM
 
   74 CALL DOASM
      GO TO 52
 
C--                HANDLE  +EOD
 
   75 IF (JCCTYP.EQ.MCCEOD)  GO TO 82
 
C--                IGNORE  +PAM, +QUIT  ON PAM-FILE
 
      GO TO 52
 
C-------------     END OF DECK                  ------------------------
 
   82 NQRESV = LQTOL - LQWORK
      NDIFFG = NVGARB(1) - NQRESV
      NVGARB(2) = MAX  (NVGARB(2),NDIFFG)
      IF (JCWAIT.NE.LARGE)   CALL DOUREF (0)
      IF (NVDEP(1).EQ.0)     GO TO 84
      IQ(LASM+2) = IQ(LASM+2) + NVDEP(1)
      IF (MOPTIO(13).EQ.0)   GO TO 84
      IF (NQUSED.GE.NQLMAX)  CALL DPPAGE
      WRITE (IQPRNT,9083) NDECKR,IDD,IDP,NVDEP(1),IQ(LASM+4)
      NQUSED = NQUSED + 1
   84 IF (NVDEPL(1).NE.0)  NVDEPL(2)=NVDEPL(1)
      IF (MOPTIO(2).EQ.0)          RETURN
      IF (16*NDIFFG.LT.NVGARB(3))  RETURN
      NQUSED = NQUSED + 1
      WRITE (IQPRNT,9084) NDECKR,NVGARB(1),NQRESV,NDIFFG
      RETURN
 
 9083 FORMAT (1X,I9,3H D=,2A4,  3H P=,2A4,  I6,' LINES TO  ASM',A2)      A4
C9083 FORMAT (1X,I9,3H D=,A5,A3,3H P=,A5,A3,I6,' LINES TO  ASM',A2)      A5
C9083 FORMAT (1X,I9,3H D=,A6,A2,3H P=,A6,A2,I6,' LINES TO  ASM',A2)      A6
C9083 FORMAT (1X,I9,3H D=,A8,   3H P=,A8,   I6,' LINES TO  ASM',A2)      A8M
 9084 FORMAT (1X,I9,60X,'GAPS BEF/AFT',3I6)
      END
C====================================================================
CDECK  ID>, DOMATF.
      SUBROUTINE DOMATF
 
C-    READ FOREIGN MATERIAL INTO MEMORY
C-    ( INDIRECT OR I- MATERIAL IS AN OLD NAME FOR 'FOREIGN' MATERIAL )
C-    CALLED FROM DODECK FOR   +KEEP,  +DELETE,  +REPLACE,  +ADBEF, +ADD
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /NAMES/ NAMEP(4),NAMEH(4),NAMED(4),NAMEOR(4),NAMACT(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (KACTEX,NVACT(4))
     +,                            (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
     +,         (INCSEQ,NVINC(1)), (INCACT,NVINC(2)), (INCMAT,NVINC(3))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (KJOIN,NVIMAT(3))
      EQUIVALENCE (JNILTH,NVUTY(10))
      DIMENSION    JDESCR(4)
      DIMENSION    NAMCSQ(5), NAMMAT(4)
 
 
C     DATA  NAMCSQ /4HCSQ ,3,1,2,7/                                      A8M
      DATA  NAMCSQ /4HCSQ ,3,1,3,8/                                     -A8M
      DATA  NAMMAT /4HMAT ,1,1,2H**/
C     DATA  MMACT  /4HACT /, MMSEQ/4HKEEP/                               DEBUG
 
 
C----       JDESCR (1)  WORDS OF VOLUME
C--                (2)  NO. OF WORDS OF MATERIAL
C--                (3)  NO. OF CARDS OF MATERIAL
C--                (4)  CARD COUNT ORIGIN
 
      MXCD1 = 0
 
C-------           CONSTRUCT EXE-BITS  NVIMAT(5)
 
C-----             DELETED ACTION MATERIAL
 
      IF (JCARD.GT.JCWDEL)   GO TO 7
      NVIMAT(5)= 0
      CALL MXACTD (-1)
      LDELOR= IQ(LACDEL-3)
      IF (JCCPIF.EQ.0)       GO TO 6
      NVIMAT(5)= JBYTET (MXCCIF,NVIMAT(5),1,4)                          -MSK
C     NVIMAT(5)= NVIMAT(5) .AND. MXCCIF                                  MSKC
      GO TO 6
 
C--                READY FOR NIL-ACTION, IF OTHER THAN GLOBAL BITS
 
    5 NVIMAT(5)= MXCCIF
    6 JNILTH = 8
      IF (MXNEW(NVIMAT(5),NVUSEB(2)).NE.0)  GO TO 11
      JNILTH = -7
      GO TO 11
 
C-----             NON-DELETED ACTION MATERIAL
 
    7 LDELOR = 0
      IF (JCCIFV.NE.0)       GO TO 5
      NVIMAT(5)= NVUSEB(4)
      IF (LADRV(10).NE.0)    CALL MXACTN (-1)
      IF (MXCCIF.NE.0)  CALL SBYTOR (MXCCIF,NVIMAT(5),1,4)              -MSK
C     NVIMAT(5)= NVIMAT(5) .OR. MXCCIF                                   MSKC
      JNILTH= 0
 
C-------           READY MEMORY TO RECEIVE ACTION MATERIAL
 
   11 JSTAT = JCCTYP + JNILTH
      IF (JCCPIF.NE.0)       JSTAT=JSTAT+32
      IF (LDECO.EQ.0)        CALL CRDECO
      JDESCR(3) = 0
      JDESCR(4) = JCARD
 
   14 LHEAD = 0
      LHOLD = 0
      NVIMAT(4)= 0
      NVIMAT(6)= 0
      IF (JCCTYP.NE.1)       GO TO 31
 
 
C-----             READY HEADER BANK  'KEEP'  FOR
C--                +KEEP, SNAME, P=PNAME, D=DNAME, T=NOLIST, DUMMY
 
      IF (JNILTH.LT.0)       GO TO 25
      IF (JBIT(MCCPAR(JCCPT+1),4).NE.0)     GO TO 29                    -MSK
C     IF ((MCCPAR(JCCPT+1).AND.8).NE.0)     GO TO 29                     MSKC
      JLOW = -1
      KP   = 0
      KD   = 0
      LCRH = 0
      IF (JCCPP.EQ.0)        GO TO 24
      JLOW = 0
      CALL CREAPD (MCCPAR(JCCPP+1),MCCPAR(JCCPD+1))
      KP   = LCRH-3
      KD   = MAX  (0,LCRD-3)
   24 L = LOCSEQ (MCCPAR(JCCPZ+1),KP,KD,0,7)
      IF (L.NE.0)            GO TO 27
 
      IF (NVUTY(16).NE.0)  CALL SBYTOR (NVUTY(16),NVIMAT(5),1,4)        -MSK
C     NVIMAT(5) = NVIMAT(5) .OR. NVUTY(16)                               MSKC
      KJOIN     = NVUTY(14)
   25 IF (NVUSEB(9).EQ.0)    GO TO 26
      NVUTY(9) = 0
      MDEPAR = 4
      CALL DEPART
 
   26 IF (JNILTH.LT.0)       GO TO 97
      LSTAT = LQWORK + NQNAME + NAMACT(2)
      INCC  = INCSEQ
      LARMAT= LSTAT + INCC
C     NAMACT(1) = MMSEQ                                                  DEBUG
      IQCC(LSTAT)  = MCCPAR(JCCPZ+1)
      IQCC(LSTAT+1)= MCCPAR(JCCPZ+2)                                    -A8M
      IF (JNILTH.NE.0)       GO TO 91
      IF (JCCPT.EQ.0)        GO TO 50
      IF (JBIT(MCCPAR(JCCPT+1),14)  .EQ.0)  GO TO 50                    -MSK
C     IF ((MCCPAR(JCCPT+1).AND.8192).EQ.0)  GO TO 50                     MSKC
      JSTAT = JSTAT + 512
      GO TO 50
 
C--                OVER-RULED DECK-DIRECTED SEQUENCE
 
   27 IF (JBIT(MCCPAR(JCCPT+1),1).NE.0)  GO TO 291                      -MSK
C  27 IF ((MCCPAR(JCCPT+1).AND.1).NE.0)  GO TO 291                       MSKC
      IF (KD.EQ.0)           GO TO 29
      NVIMAT(4) = IQ(L)
      IF (JNILTH.EQ.0)       GO TO 28
      NVIMAT(4) = JBYTET (NVIMAT(4),NVIMAT(5),1,4)                      -MSK
C     NVIMAT(4) = NVIMAT(4) .AND. NVIMAT(5)                              MSKC
   28 NVIMAT(4) = MXNEW (NVIMAT(4),IQ(LCRD))
      CALL SBYTOR (NVIMAT(4),IQ(LCRD),15,4)
   29 JNILTH = -7
      GO TO 25
 
 
C--                +KEEP, ..., T=APPEND.
 
  291 IF (JBIT(IQ(L),17).EQ.0)     GO TO 292
      MCCPAR(JCCPT+1) = 0
      GO TO 27
 
  292 CALL SBIT1 (IQ(L),17)
      LHEAD = L
      KJOIN = L-2
      NVIMAT(4) = JRSBYT (0,IQ(L),1,6)
      NVIMAT(6) = JBYT (IQ(L+1),1,15)
 
      IF (NVUSEB(9).EQ.0)    GO TO 294
      NVUTY(9) = 0
      MDEPAR   = 4
      CALL DEPART
 
  294 LSTAT  = LQWORK + NQNAME + NAMACT(2)
      INCC   = INCACT
      LARMAT = LSTAT + INCC
      JSTAT  = 5
      IQCC(LSTAT)   = 0
      IQCC(LSTAT+1) = 0
 
  297 IF (IQ(KJOIN).EQ.0)    GO TO 50
      KJOIN = IQ(KJOIN) - 1
      GO TO 297
 
 
C-----             READY HEADER BANK 'ACT' FOR
C--                +DEL, +REPL, +ADB, +ADD
 
   31 IF (NCCPC.EQ.0)        GO TO 88
      JLOW = 0
      LAST = NVIMAT(2)
      IF (JCCPP.NE.0)        GO TO 33
      LCRP = NVIMAT(1)
      LCRD = NVIMAT(2)
      IF (LCRP.EQ.0)         GO TO 88
      IF (JCCPD.EQ.0)        GO TO 35
 
   33 JCCPD = MAX  (JCCPD,1)
      CALL CREAPD (MCCPAR(JCCPP+1),MCCPAR(JCCPD+1))
      IF (LCRD.EQ.LEXD)      GO TO 88
      NVIMAT(1)= LCRP
      NVIMAT(2)= LCRD
   35 KJOIN = LCRD - 2
      LCRH  = IQ(LCRP-2)
 
      IF (NVUSEB(9).EQ.0)    GO TO 36
      NVUTY(9) = LAST - LCRD
      MDEPAR = 4
      CALL DEPART
 
   36 IF (JNILTH.LT.0)       GO TO 97
      LSTAT = LQWORK + NQNAME + NAMACT(2)
      INCC  = INCACT
      LARMAT= LSTAT + INCC
C     NAMACT(1) = MMACT                                                 DEBUG
      IQCC(LSTAT)  = MCCPAR(JCCPC+1)
      IQCC(LSTAT+1)= MCCPAR(JCCPC+2)
      IF (JNILTH.NE.0)       GO TO 92
      IF (JCCTYP.EQ.2)       GO TO 94
      IF (NCCPZ.EQ.0)        GO TO 50
 
C--                DEAL WITH OLD FORM  +REP,..., Z=ZNAME
 
      LMATSV = LARMAT
      LSEQ   = 0
      JCCTYP = -1
      GO TO 61
 
 
C-------           DRIVE ACTION MATERIAL TO MEMORY
 
   50 JCCTYP = 0
   51 LMATSV = LARMAT
   52 IF (JCARD.GE.JCWAIT)   GO TO 54
      JASK = MADRVI
      CALL ARRIVE
      IF (LARMAT.GE.LQTOL)   CALL NOMEM
      JDESCR(3) = JDESCR(3) + NCARR
      IF (JCCTYP)            58,54,61
 
C----              JCARD HAS REACHED JCWAIT
C--                IN CASE OF PENDING +DELETE  (REAL OR NIL)
C--                CHECK NEXT CARD PART OF CURRENT ACTION MATERIAL
 
   54 IF (NVACT(1).NE.2)     GO TO 60
      IF (JCCPRE.NE.0)       GO TO 60
      JASK = MAPRE
      CALL ARRIVE
      GO TO 61
 
C--                +SEQ SEEN, TRY DIRECT SUBSTITUTION
 
   58 IF (JCCTYP.NE.-1)      GO TO 61
C     NVIMAT(5) = NVIMAT(5) .OR. MXCCIF                                  MSKC
      IF (MXCCIF.NE.0)       CALL SBYTOR (MXCCIF,NVIMAT(5),1,4)         -MSK
      IF (JCCIFV.NE.0)       GO TO 61
      LSEQ = -7
      IF (NCCPZ.NE.1)                    GO TO 61
      LSEQ = LOCSEQ (MCCPAR(JCCPZ+1),0,0,0,7)
      IF (LSEQ.EQ.0)                     GO TO 61
      IF (JBIT(IQ(LSEQ),6) .EQ.0)        GO TO 61                       -MSK
C     IF ((IQ(LSEQ).AND.32).EQ.0)        GO TO 61                        MSKC
      IF (JBIT(MCCPAR(JCCPT+1),4).NE.0)  GO TO 61                       -MSK
C     IF ((MCCPAR(JCCPT+1).AND.8).NE.0)  GO TO 61                        MSKC
 
      N = JBYT(IQ(LSEQ+1),16,15)
      CALL UCOPY (IQMSQ(LSEQ),IQ(LARMAT),N)
      LARMAT = LARMAT + N
      JDESCR(3) = JDESCR(3) + 1
      CALL SBYTOR (IQ(LSEQ),NVIMAT(5),1,4)                              -MSK
C     NVIMAT(5) = NVIMAT(5) .OR. IQ(LSEQ)                                MSKC
      JCCTYP = 0
      IF (NVUSEB(9).EQ.0)    GO TO 52
      MDEPAR = 4
      CALL DEPART
      GO TO 52
 
 
C-----             END OF DATA, CLOSE CURRENT BANK
 
   60 CONTINUE
   61 JDESCR(1) = LARMAT - LQWORK
      JDESCR(2) = LARMAT - LMATSV
      NAMACT(4) = LARMAT - (LSTAT+1)
      IF (LHOLD.NE.0)        GO TO 63
 
C--                CLOSE HEADER BANK 'ACT' OR 'KEEP'
 
      CALL LIFTBK (LSTAT,KJOIN,0,NAMACT,JLOW)
      LHOLD = LSTAT
      KJOIN = LHOLD - 2
      IF (LHEAD.EQ.0)  LHEAD=LHOLD
      IQ(LSTAT-3) = LDECO
      IF (JDESCR(3).EQ.1)  MXCD1=32
      IF (NVARR(6) .NE.0)  JSTAT=JSTAT+2048
      CALL SBYT (JSTAT,IQ(LHOLD),7,12)
      GO TO 65
 
C--                CLOSE MAT-BANK
 
   63 IF (JDESCR(3).EQ.0)    GO TO 67
      NAMMAT(4) = NAMACT(4)
      CALL LIFTBK (LSTAT,KJOIN,0,NAMMAT,JLOW)
      KJOIN = LSTAT - 1
   65 NVIMAT(6)= NVIMAT(6) + JDESCR(1)
      CALL PKBYT (JDESCR(1),IQ(LSTAT+1),1,4,MPAK15(1))
 
C--                BRANCH:   JCCTYP = 0  STOP BY JCWAIT
C--                                  -1  +SEQ
C--                                ELSE  END OF I-MATERIAL
 
   67 IF (JCCTYP)            68,76,81
   68 IF (JCCTYP.NE.-1)      GO TO 81
      IF (JCCPRE.EQ.0)       GO TO 70
      JCCPRE= 0
      IF (NVACT(2).EQ.2)     GO TO 76
      CALL ACEXQ (7)
      LSEQ = -7
 
 
C-----             HANDLE  +SEQ, Z=S1,S2,..., T=PASS.
 
   70 IF (NVUSEB(9).EQ.0)    GO TO 71
      MDEPAR = 4
      CALL DEPART
 
   71 IF (NCCPZ.EQ.0)        GO TO 751
      IF (JCCIFV.NE.0)       GO TO 79
      JSTAT = 7
      CALL CBYT (MCCPAR(JCCPT+1),16,JSTAT,7,1)
      CALL CBYT (MCCPAR(JCCPT+1), 4,JSTAT,8,1)
      JLOWA = IABS(JLOW)
      IF (LSEQ.GE.0)         GO TO 73
 
   72 LSEQ = LOCSEQ (MCCPAR(JCCPZ+1),0,0,0,7)
   73 CALL LIFTBK (LSTAT,KJOIN,0,NAMCSQ,JLOWA)
      KJOIN = LSTAT - 1
      IQ(LSTAT-3)= LDECO
      CALL SBYT (JSTAT,IQ(LSTAT),7,9)
      IQ(LSTAT+1)= JCARD
      IQ(LSTAT+2)= MCCPAR(JCCPZ+1)
      IQ(LSTAT+3)= MCCPAR(JCCPZ+2)                                      -A8M
      IF (LSEQ.EQ.0)         GO TO 74
      IQ(LSTAT-2)= LSEQ
      CALL SBYTOR (IQ(LSEQ),NVIMAT(4),1,5)                              -MSK
C     NVIMAT(4)= NVIMAT(4) .OR. IQ(LSEQ)                                 MSKC
      IF (JBYT(IQ(LSEQ),13,3).EQ.0)   GO TO 75
      J = MAX  (JCCPD,JCCPN)
      IQ(LSTAT+2)= MCCPAR(J+1)
      IQ(LSTAT+3)= MCCPAR(J+2)                                          -A8M
      GO TO 75
 
   74 CALL SBIT1 (NVIMAT(4),5)                                          -MSK
C  74 NVIMAT(4)= NVIMAT(4) .OR. 16                                       MSKC
   75 NVIMAT(6)= NVIMAT(6) + NAMCSQ(5)
      NCCPZ = NCCPZ - 1
      IF (NCCPZ.EQ.0)        GO TO 79
      JCCPZ = JCCPZ + 3
      GO TO 72
 
C--                CARD +SEQ WITHOUT SEQ-NAMES
 
  751 IF (JBIT(MCCPAR(JCCPT+1),4).NE.0)  GO TO 79                       -MSK
C 751 IF ((MCCPAR(JCCPT+1).AND.8).NE.0)  GO TO 79                        MSKC
      MDEPAR = 2
      CALL DEPART
      GO TO 79
 
 
C-----             ATTACH HIGHER LEVEL ACTION
 
   76 CALL ACEXQ (7)
      IF (JCARD.GE.JCWDEL)   GO TO 79
 
C--                SKIP DELETED I-MATERIAL
 
   77 JSV  = JCARD + 2
      JASK = MADEL
      CALL ARRIVE
      IF (JCARD.GT.JCWAIT)   CALL ACEXQ (-7)
      IF (JCCTYP.NE.0)       GO TO 80
      IF (JCARD.GE.JSV)  CALL MXACTD (-1)
      IF (JCARD.LT.JCWDEL)   GO TO 77
 
C-----             READY MAT-BANK FOR CONTINUATION MATERIAL
 
   79 LSTAT = LQWORK + NQNAME + NAMMAT(2)
      LARMAT= LSTAT + INCMAT
      INCC  = INCMAT
      JDESCR(3) = 0
      JDESCR(4) = JCARD
      GO TO 50
 
C----              END OF I-MAT FOR THIS ACTION OR SEQUENCE
 
   80 IF (JCARD.GT.JSV)  CALL MXACTD (-2)
   81 IF (IQ(LHEAD-2).NE.0)  MXCD1=0
      CALL SBYTOR  (NVIMAT(4),MXCD1,1,5)                                -MSK
      CALL SBYTOR  (NVIMAT(5),MXCD1,1,4)                                -MSK
      CALL SBYT (MXCD1,IQ(LHEAD),1,6)                                   -MSK
C     NVIMAT(4)= NVIMAT(4) .AND. 31                                      MSKC
C     NVIMAT(5)= NVIMAT(5) .AND. 15                                      MSKC
C     IQ(LHEAD)= IQ(LHEAD) .OR. NVIMAT(5) .OR. NVIMAT(4) .OR. MXCD1      MSKC
      CALL SBYT (NVIMAT(6),IQ(LHEAD+1),1,15)
      IF (LCRH.NE.0)  IQ(LCRH+1)=IQ(LCRH+1) + NVIMAT(6)
C     IF (NVIMAT(6).LT.0)    CALL QFATAL                                 DEBUG
      IF (JCCPRE.EQ.0)       RETURN
      CALL ACEXQ (-7)
      JCCPRE= 0
      RETURN
 
C-----             FAULTY CARD
 
   88 MDEPAR = 2
      CALL DEPART
      GO TO 98
 
C-----             ACTION CARD DELETED, CREATE NIL-BANK
 
   91 NVUTY(15)= NVUTY(15) + 1
   92 NAMACT(3)= 1
 
C--                CLOSE ACTION-BANK FOR NIL-ACTION  OR  +DELETE
 
   94 JDESCR(1) = LARMAT - LQWORK
      JDESCR(2) = 0
      NAMACT(4) = LARMAT - (LSTAT+1)
      CALL LIFTBK (LSTAT,KJOIN,0,NAMACT,0)
      IQ(LSTAT-3) = LDECO
      CALL SBYTOR (NVIMAT(5),IQ(LSTAT),1,4)                             -MSK
C     IQ(LSTAT)= IQ(LSTAT) .OR. (NVIMAT(5).AND.15)                       MSKC
      CALL SBYT (JSTAT,IQ(LSTAT),7,9)
      IF (NVARR(6).NE.0)  CALL SBIT1 (IQ(LSTAT),18)
      CALL PKBYT (JDESCR(1),IQ(LSTAT+1),1,4,MPAK15(1))
      IF (LCRH.NE.0)  IQ(LCRH+1)=IQ(LCRH+1) + JDESCR(1)
      IF (NAMACT(3).NE.2)    GO TO 96
 
C--                REPEAT FOR MULTI-C +DELETE
 
      NCCPC = NCCPC - 1
      IF (NCCPC.EQ.0)        GO TO 98
      JCCPC = JCCPC + 3
      JCCPP = 0
      JCCPD = 0
      GO TO 14
 
C--                NIL ACTION BANK
 
   96 NAMACT(3) = 2
      IQ(LSTAT-2) = LDELOR
 
C----              IGNORE REMAINING I-MATERIAL
 
   97 CONTINUE
   98 JCCTYP= 0
      RETURN
      END
C====================================================================
CDECK  ID>, DOUREF.
      SUBROUTINE DOUREF (MODEP)
 
C-    PRINT UREF'S, UNSATISFIED REFERENCES FROM THE CRADLE TO :
C-    MODE = 0   TRAILING ACTIONS INTO DECK JUST PROCESSED
C-         = 7   ACTIONS + SEQ INTO TRAILING DECKS OF PATCH JUST PROC.
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
      EQUIVALENCE                  (KACTEX,NVACT(4))
     +,                            (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MODEP(9)
 
 
 
      MODE = MODEP(1)
      IF (MODE.NE.0)         GO TO 31
 
C----              TRAILING ACTIONS INTO CURRENT DECK
 
   24 IF (JCWAIT.NE.JCARD)   GO TO 27
      IF (NVACT(1).LT.4)     GO TO 27
      CALL ACEXQ (-7)
      IF (LACTEX.NE.0)       GO TO 24
      RETURN
 
   27 LDPACT = KACTEX + 1
      JLS    = 1
      GO TO 63
 
C----              TRAILING DECKS OF CURRENT PATCH
 
   31 IF (LEXH.EQ.0)                   RETURN
      IF (JBIT(IQ(LEXP+1),5)  .NE.0)   RETURN                           -MSK
C     IF ((IQ(LEXP+1).AND.16) .NE.0)   RETURN                            MSKC
      LEXD = LEXH - 1
 
   34 LEXD = IQ(LEXD-1)
      IF (LEXD.EQ.0)         RETURN
      JLS = 3
 
C--                PRINT ONE BY ONE
 
   61 JLS    = JLS - 1
   62 LDPACT = LEXD - JLS
   63 LDPACT = IQ(LDPACT-1)
      IF (LDPACT.EQ.0)       GO TO 69
      IF (MOPTIO(21).NE.0)   GO TO 66
      IF (JBIT(IQ(LDPACT),18)     .EQ.0)   GO TO 63                     -MSK
C     IF ((IQ(LDPACT).AND.131072) .EQ.0)   GO TO 63                      MSKC
   66 MDEPAR = 6
      CALL DEPART
      GO TO 63
 
   69 IF (JLS.NE.1)          GO TO 61
      IF (MODE.NE.0)         GO TO 34
      RETURN
      END
C====================================================================
CDECK  ID>, DOASM.
      SUBROUTINE DOASM
 
C-    DIGEST CARD  +ASM, ...  GIVEN IN P=CRA*, D=.
C-    EXTRA CALL AT THE END OF P=CRA*, D=BLANK TO FINALISE ASM USE
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,          (LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (JFILE,JCCPC)
 
 
 
      IF (JCCTYP.NE.MCCASM)  GO TO 41
      IF (LEXD.NE.LDCRAB)    GO TO 91
 
C------            +ASM-CARD,  CHECK IF ROUTINE-HEADER CARD REQESTED
 
      LRHC = -7
      IF (JCCPD.EQ.0)        GO TO 21
      LRHC = 0
      NCH  = NCHCCT - NCHCCD
      IF (NCH.LE.0)          GO TO 21
 
C--                Analyse text of Routine Header card
 
      CALL UCOPY (KARDCC(NCHCCD+1),MWK(1),NCH)
      MWKX(1) = MCCPAR(JCCPD+1)
      CALL LIFTRH (NCH,LRHC,7)
 
 
C--                FILL CROSS-REFERENCES
 
   21 NF = 0
   22 IF (NCCPN.EQ.0)        GO TO 27
      NS = MCCPAR(JCCPN+1) - 20
      IF (NS.LE.0)           GO TO 91
      IF (NS.LT.6)           GO TO 24
      NS = NS-5
      IF (NS.LT.6)           GO TO 91
      IF (NS.GE.11)          GO TO 91
   24 IF (NF.EQ.0)  NF=NS
      LASM = IQ(LSASM-NS)
      IF (IQ(LASM+1).NE.1)   GO TO 91
      IQ(LASM+1) = NF
      IQ(LASM+12)= MCCPAR(JCCPT+1)
      IF (LRHC.GE.0)  IQ(LASM-1)=LRHC
      JCCPN= JCCPN + 3
      NCCPN= NCCPN - 1
      GO TO 22
 
C--                SET OPTIONS FOR MAIN STREAM
 
   27 NF  = MAX (NF,1)
      LASM= IQ(LSASM-NF)
      NS  = MCCPAR(JCCPT+1)
      IQ(LASM+7) = MCCPAR(JFILE+1)
      IQ(LASM+8) = MCCPAR(JFILE+2)                                      -A8M
      IQ(LASM+9) = IOTYPE (NS,0)
      IF (JBIT(NS,2).NE.0)   GO TO 36                                   -MSK
C     IF ((NS.AND.2).NE.0)   GO TO 36                                    MSKC
 
C--                CONNECT FILE IF T=ATTACH
 
 
      IF (JBIT(NS,1).EQ.0)   RETURN                                     -MSK
C     IF ((NS.AND.1).EQ.0)   RETURN                                      MSKC
   28 IF (IQ(LASM+7).EQ.0)  IQ(LASM+7)=IQ(LASM+5)
      CALL IOFILE (4+64+256+2048,IQ(LASM+5))
      IQ(LASM+2) = 0
      RETURN
 
C--                ASM BY-PASS
 
   36 IQ(LASM+5) = 0
      RETURN
 
 
C------            END OF  D=,P=CRA*,   READY ALL ASM-STREAMS
 
   41 DO 69 JF=1,10
      LASM = IQ(LSASM-JF)
      IF (IQ(LASM+5).EQ.0)   GO TO 69
      IF (IQ(LASM+1).NE.JF)  GO TO 63
 
C--                EACH MAIN STREAM: REAL LUN/FILE TO BE USED
 
      IQ(LASM+10) = IQ(LASM+5)
      IF (IQ(LASM+7).NE.0)  IQ(LASM+10)=IQ(LASM+7)
      JWR = 0
      GO TO 52
 
C--                CHECK SAME LUN/FILE USED ON A PREVIOUS MAIN STREAM
 
   51 LASMWR = IQ(LSASM-JWR)
      IF (IQ(LASMWR+10).EQ.IQ(LASM+10))  GO TO 61
   52 JWR = JWR + 1
      IF (JWR.LT.JF)         GO TO 51
C-    REAL INDEPENDENT MAIN STREAM FOUND
      GO TO 69
 
 
C----              APPARENT MAIN STREAM REALLY SECONDARY
 
   61 IQ(LASM+1) = JWR
      CALL SBYTOR (IQ(LASM+9),IQ(LASMWR+9),1,6)                         -MSK
C     IQ(LASMWR+9) = IQ(LASMWR+9) .OR. IQ(LASM+9)                        MSKC
      GO TO 64
 
C--                SECONDARY STREAM
 
   63 JWR   = IQ(LASM+1)
      LASMWR= IQ(LSASM-JWR)
      IF (IQ(LASMWR+5).EQ.0) GO TO 68
   64 IQ(LASM-2) = IQ(LASMWR-2)
      GO TO 69
 
   68 IQ(LASM+5) = 0
   69 CONTINUE
      RETURN
 
C--                FAULTY OR MIS-PLACED CARD
 
   91 MDEPAR = 2
      CALL DEPART
      RETURN
      END
C====================================================================
CDECK  ID>, DOOPT.
      SUBROUTINE DOOPT
 
C-    ANALYSE  +XXX..., +ONLY, +PARAM, +OPTION
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    MMONLY(4)
      DATA  MMONLY /4HONLY,1,1,2H**/
 
 
      IF (NVARR(6).EQ.0)     GO TO 91
      JTYP = MCCPAR(JCCPT+1)
      JNNN = MCCPAR(JCCPN+1)
      CALL UPKBYT (JTYP,1,IQUEST(1),30,0)
      J = JCCTYP - MCCASM
      GO TO (21,31,61,71), J
 
C--                +XXX...
 
   21 CONTINUE
      RETURN
 
C----              +ONLY, (F=) FILES
 
   31 IF (NCCPZ.EQ.0)        GO TO 91
C     MMONLY(4)= NCCPZ + 1                                               A8M
      MMONLY(4)= NCCPZ+NCCPZ + 1                                        -A8M
C-                           LQUSER(1) SUPPORTS 'ONLY' - STRUCTURE
      CALL LIFTBK (L,1,0,MMONLY,7)
      IQ(L+1)= NCCPZ
 
      DO 33  J=1,NCCPZ
      IQ(L+2)= MCCPAR(JCCPZ+1)
      IQ(L+3)= MCCPAR(JCCPZ+2)                                          -A8M
      JCCPZ= JCCPZ + 3
C  33 L = L+1                                                            A8M
   33 L = L+2                                                           -A8M
      RETURN
 
C--                +PARAM, (T=)GAP,CLASH, N=N
 
   61 IF (JCCPN.EQ.0)        GO TO 91
      IF (IQUEST(7).NE.0)  NVGARB(3)=MAX (JNNN,500)
      IF (IQUEST(3).NE.0)  NVOPER(1)=MIN (JNNN,3)
 
C--                +PARAM, LINES, N=A,B,C
 
      IF (IQUEST(12).EQ.0)   RETURN
      IF (JNNN.LT.40)        RETURN
      NQLNOR = JNNN
      NQLMAX = JNNN
      NQLPTH = 0
 
      IF (NCCPN.LT.2)        RETURN
      JNNN = MCCPAR(JCCPN+4)
      IF (JNNN.LT.NQLNOR)    RETURN
      NQLMAX = JNNN
 
      IF (NCCPN.LT.3)        RETURN
      JNNN = MCCPAR(JCCPN+7)
      IF (JNNN.LT.0)         RETURN
      IF (JNNN.GE.13)        RETURN
      NQLNOR = NQLNOR + JNNN
      NQLMAX = NQLMAX + JNNN
      NQLPTH = JNNN
      RETURN
 
C----              +OPTION, (T=)
 
   71 CALL SETOPT
      NVOPER(2) = 3*(1-MOPTIO(12))
      MCCSW(2)  = 0
      MCCSW(7)  = 0
      IF (MOPTIO(11).EQ.0)  MCCSW(7)= 1
      IF (MOPTIO(19).EQ.0)  MCCSW(2)=-1
      MCCSW(3)  = MCCSW(2)
      RETURN
 
C-----             FAULTY CARD
 
   91 MDEPAR = 2
      CALL DEPART
      RETURN
      END
C====================================================================
CDECK  ID>, DOUSE.
      SUBROUTINE DOUSE
 
C-    PROC. +IMITATE, +SUSPEND, +FORCE, +USE, +LIST, +EXE, +MIX, +DIV
 
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (NFOR,IQUEST(1)),(NSUS,IQUEST(2)),(JVAL,IQUEST(3))
     +,             (MX,IQUEST(11))
 
C--   ACTION MATRIX     JVAL NSUSP NFORCE  NFNSVL(J)
C-    (1) SUSPEND / ON     0     1      1     = 3
C-    (2) FORCE   / ON     1     1      1     = 7
C-    (3) SUSPEND / OFF    1     1      0     = 6
C-    (4) FORCE   / OFF    0     0      1     = 1
 
      DIMENSION    NFNSVL(4)
 
 
      DATA  NFNSVL / 3, 7, 6, 1/
 
 
      J = JCCTYP - MCCUSE
      IF (J.EQ.-3)           GO TO 71
      CALL UPKBYT (MCCPAR(JCCPT+1),1,IQUEST(1),21,0)
 
C-                  9 INHIB, 20 TRANS, 15 ONLY/OFF
C-                 21 DIV, 22 MIX, 23 EXE, 24 LIST, 25 USE
C-                            18 REPEAT
 
      IQUEST(25)= IQUEST(21)
      IQUEST(24)= IQUEST(12)
      IQUEST(23)= IQUEST(5)
      IQUEST(22)= IQUEST(13)
      IQUEST(21)= IQUEST(4)
      IQUEST(25-J) = 1
      CALL PKBYT (IQUEST(21),MX,1,5,0)
      IF (J.LT.0)            GO TO 74
 
C--                PROPAGATION PERMISSION FILTER,  ACTION BRANCH
 
      IF (NVARR(6).NE.0)     GO TO 21
      MX = JBYTET (NVUSEB(5),MX,1,5)                                    -MSK
C     MX = MX .AND. NVUSEB(5)                                            MSKC
   21 IF (JCCPD.NE.0)        GO TO 51
      IF (JCCPP.NE.0)        GO TO 41
 
C---------         PROCESS GLOBAL ACTIVATION
 
      IF (IQUEST(9)+IQUEST(25).EQ.2)    GO TO 91
      IF (NVARR(6).EQ.0)                GO TO 91
      CALL MXSET (0,NVUSEB(2))
      L = LEXP
   33 CALL MXJOIN (NVUSEB(2),IQ(L))
      CALL DOUPD (L)
      L = IQ(L-1)
      IF (L.NE.0)            GO TO 33
      RETURN
 
C---------         PROCESS PATCH ACTIVATION
 
   41 CONTINUE
   44 CALL CREAPD (MCCPAR(JCCPP+1),1)
      CALL MXSET (NVUSEB(7),IQ(LCRP))
      IF (IQUEST(18).NE.0)  CALL SBIT1 (IQ(LCRP+1),5)                   -MSK
C     IF (IQUEST(18).NE.0)  IQ(LCRP+1)=IQ(LCRP+1) .OR. 16                MSKC
      IF (IQUEST(25).EQ.0)         GO TO 47
      IF (IQUEST(9) .NE.0)         GO TO 46
      IF (JBIT(IQ(LCRP),5) .EQ.0)  GO TO 47                             -MSK
C     IF ((IQ(LCRP).AND.16).EQ.0)  GO TO 47                              MSKC
   46 IQ(LCRP-3)=LEXP
   47 CALL DOUPD (LCRP)
      NCCPP = NCCPP - 1
      IF (NCCPP.EQ.0)        RETURN
      JCCPP = JCCPP + 3
      GO TO 44
 
C---------         PROCESS DECK ACTIVATION
 
   51 IF (NCCPP.NE.1)        GO TO 91
   54 CALL CREAPD (MCCPAR(JCCPP+1),MCCPAR(JCCPD+1))
      CALL MXSET (NVUSEB(7),IQ(LCRD))
      IF (LCRD.EQ.LEXD)      CALL DOUPD(0)
      NCCPD = NCCPD - 1
      JCCPD = JCCPD + 3
      IF (NCCPD.NE.0)        GO TO 54
      IF (IQUEST(9).NE.0)    RETURN
      IF   (MX.LT.16)        RETURN
      CALL SBIT1 (IQ(LCRP+1),4)                                         -MSK
C     IQ(LCRP+1) = IQ(LCRP+1) .OR. 8                                     MSKC
      IF (IQ(LCRP-3).EQ.0)  IQ(LCRP-3)=LEXP
      RETURN
 
C----------        PROCESS  +IMITATE, P=...
 
   71 IF (NCCPD.NE.0)        GO TO 91
   72 IF (NCCPP.EQ.0)        RETURN
      CALL CREAPD (MCCPAR(JCCPP+1),1)
      IF (JBIT(IQ(LCRP),10).EQ.0)  GO TO 73                             -MSK
      CALL SBIT1 (IQ(LCRP),5)                                           -MSK
      CALL SBIT1 (IQ(LCRP+1),2)                                         -MSK
 
C     IF ((IQ(LCRP).AND.512).EQ.0) GO TO 73                              MSKC
C     IQ(LCRP)  = IQ(LCRP)   .OR. 16                                     MSKC
C     IQ(LCRP+1)= IQ(LCRP+1) .OR. 2                                      MSKC
   73 NCCPP = NCCPP - 1
      JCCPP = JCCPP + 3
      GO TO 72
 
C-------           +SUSPEND, (OFF,) LIST, EXE, MIX, DIVERT
C--                +FORCE,   (OFF,) LIST, EXE, MIX, DIVERT
 
   74 IF (NVARR(6).EQ.0)     GO TO 91
      JJ = (J+3) + 2*IQUEST(15)
      CALL UPKBYT (NFNSVL(JJ),1,NFOR,3,0)
 
      DO 79 J=1,4
      IF (IQUEST(J+20).EQ.0) GO TO 79
      IF (NFOR.NE.0)  CALL SBIT (JVAL,NVUSEB(1),J+14)
      IF (NSUS.NE.0)  CALL SBIT (JVAL,NVUSEB(1),J+5)
   79 CONTINUE
      RETURN
 
C-----             FAULTY CARD
 
   91 MDEPAR = 2
      CALL DEPART
      RETURN
      END
C====================================================================
CDECK  ID>, DOUPD.
      SUBROUTINE DOUPD (LPAT)
 
C-    MERGE NEW USE-STATUS OF PATCH INTO ALL DEPENDENT DECKS
 
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,         (KACTEX,NVACT(4)), (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
 
 
      LP = LPAT
      IF (LP.EQ.0)           GO TO 32
      L  = IQ(LP-2)
      IF (L.EQ.0)            RETURN
      L  = IQ(L-2)
      IF (L.EQ.0)            RETURN
      MXP = IQ(LP)
 
   21 CALL MXJOIN (MXP,IQ(L))
      L  = IQ(L-1)
      IF (L.NE.0)            GO TO 21
      IF (LP.NE.LPCRA)       RETURN
 
   32 IF (LACTEX.NE.-7)      RETURN
      NVUSEB(3) = IQ(LEXP)
      NVUSEB(4) = IQ(LEXD)
      CALL UPKBYT (NVUSEB(4),1,NVUSEB(5),3,MPAK5(1))
      RETURN
      END
C====================================================================
CDECK  ID>, ACSORT.
      SUBROUTINE ACSORT
 
C-    READY ACTION BANKS FOR CURRENT DECK
C-    CALLED FROM DODECK WHEN PROCESSING OF A NEW DECK IS STARTED
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (KACTEX,NVACT(4))
     +,                            (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
      DIMENSION    LACVH(2), LACV(2), NV(2), JRV(2)
      EQUIVALENCE (LADRV(9),LACV(1)), (LADRV(11),LACVH(1))
      EQUIVALENCE (NDEL,NV(1)), (NNIL,NV(2))
      EQUIVALENCE (JRDEL,JRV(1)), (JRNIL,JRV(2))
 
      DIMENSION    JACTTR(5), BIAS(3), MMV(4,2)
 
 
      DATA  JACTTR /1,2,2,1,3/,   BIAS /-.25, 0., .375/
      DATA  MMV    /4HACMD,0,0,2H**,4HACNL,0,0,2H**/
 
 
C---------         CONSTRUCT SUMMARY LIST, REMEMBER TIME-SEQUENCE
C--                LIST ENTRY     L+2  L OF ACTION BANK
C--                               L+1  J-ACTION = 1 ADB, 2 REP, 3 ADD
C--                                                   ( +4 IF NIL )
C--                               L+0  ACTION CARD NUMBER + FRACTION
C--                               L-1  L OF NEXT
 
      NVUSEB(12) = 0
 
      JCWDEL = 0
      IF (LEXD.EQ.0)         GO TO 88
      KACTEX = LEXD-2
      LACTEX = IQ(KACTEX)
      IF (LACTEX.EQ.0)       GO TO 81
      LIMIT  = LQWORK+20
      KST    = LQSTA-1
      L      = KST
      IQ(L-5)= 0
 
   12 IF (L.LT.LIMIT)        GO TO 97
      L    = L - 4
      JACT = JBYT (IQ(LACTEX),7,3)
      JACT = JACTTR(JACT)
      Q(L) = FLOAT(IQCC(LACTEX)) + BIAS(JACT)
      IF (JBIT(IQ(LACTEX),10).EQ.0)  GO TO 14
      JACT = JACT + 4
      Q(L) = Q(L) + .125
   14 IQ(L+1)= JACT
      IQ(L+2)= LACTEX
      IQ(L-5)= L
      LACTEX = IQ(LACTEX-1)
      IF (LACTEX.NE.0)       GO TO 12
      IQ(KST)= L
      LIMIT = L-4
 
C--                SORT THE LIST FOR ACTION-CARD NO.
 
      CALL QSORT (0,KST)
 
C---------         SCAN FOR CLASH
 
      KDONE = KST
      NDEL  = 0
      NNIL  = 0
      CNDEL = -1.
 
 
C--                NEXT BANK IN SCAN
 
   24 L = IQ(KDONE)
      IF (L.EQ.0)            GO TO 61
      CN  =  Q(L)
      JM  = IQ(L+1)
      LW  = IQ(L+2)
      LEV = 1
      IF (CN.LT.CNDEL)       GO TO 41
 
C--                IF +DEL OR +REPL,  SET TOTAL DELETE RANGE
 
      IF (JM.GE.4)           GO TO 34
      IF (JM.NE.2)           GO TO 36
      NDEL = NDEL + 1
      LDEL = L
      LACT = LW
      CNDA = FLOAT(IQCC(LACT+1)) + .25
      CNDEL= CNDA
      CNDT = CNDEL
      LN   = L
 
   32 LN = IQ(LN-1)
      IF (LN.EQ.0)           GO TO 39
      IF (Q(LN).GE.CNDT)     GO TO 39
      IF (IQ(LN+1).NE.2)     GO TO 32
      LA   = IQ(LN+2)
      CNDT =  MAX  (CNDT,FLOAT(IQCC(LA+1))+.25)
      GO TO 32
 
C--                COUNT NIL DELETE-BANKS
 
   34 IF (JM.NE.6)           GO TO 39
      NNIL = NNIL + 1
      GO TO 39
C--                CHECK NEXT ACTION ON SAME CARD
 
   36 IF (NVOPER(1).GE.2)    GO TO 39
      LN = IQ(L-1)
      IF (LN.EQ.0)           GO TO 39
      IF (Q(LN)-CN .GE. 0.1) GO TO 39
      LACT = IQ(LN+2)
      GO TO 38
 
C--                CURRENT BANK DONE
 
   37 IF (LEV.LT.NVOPER(1))  GO TO 39
   38 J = LEV + 12
      CALL SBIT1 (IQ(LACT),J)
      CALL SBIT1 (IQ(LW),  J)
   39 KDONE= L - 1
      GO TO 24
 
 
C-----             ACTION ON DELETED CARD
 
C--                FIND CORRECT DEL-BANK
 
   41 IF (JM.GE.4)           GO TO 56
      CALL SBIT1 (IQ(LW),11)
   42 IF (CN.LT.CNDA)        GO TO 45
   44 LDEL = IQ(LDEL-1)
      IF (IQ(LDEL+1).NE.2)   GO TO 44
      LACT = IQ(LDEL+2)
      CNDA = FLOAT(IQCC(LACT+1)) + .25
      GO TO 42
 
C--                SERIOUS:  DELETED EARLIER THAN DELETED
 
   45 IF (L.LT.LDEL)         LEV=3
      IF (JM.EQ.2)           GO TO 46
      IF (LEV.LT.NVOPER(1))  GO TO 59
      CALL SBYT (0,IQ(LW),1,4)
      GO TO 38
 
C--                PARTIALLY OVERLAPPING DELETE-RANGE
 
   46 NDEL = NDEL + 1
      CE   = IQCC(LW+1)
      IF (CE.LT.CNDEL)       GO TO 47
      CNDEL = CE + .25
      LEV   = MAX  (LEV,2)
      GO TO 37
 
C--                FULLY OVERLAPPING DELETE-RANGE
 
   47 CE   = CE -.25
      LN   = LDEL
   48 IF (IQ(LN+1).NE.2)     GO TO 49
      LA   = IQ(LN+2)
      IF (CE.GE.FLOAT(IQCC(LA+1)))  GO TO  49
      MX   = JBYTET (IQ(LW),IQ(LA),1,4)                                 -MSK
C     MX   = IQ(LW) .AND. IQ(LA)                                         MSKC
      CALL SBYT (MX,IQ(LW),1,4)
   49 LN = IQ(LN-1)
      IF (LN.NE.L)           GO TO 48
      GO TO 37
 
 
C--                DELETED NIL ACTION
 
   56 IF (JM.NE.6)           GO TO 59
      IF (FLOAT(IQCC(LW+1)).LT.CNDT)  GO TO 59
      IQCC(LW)= CNDT + 1.
      Q(L)= FLOAT (IQCC(LW)) + .125
      CALL QSORT (0,KDONE)
      GO TO 24
 
C--                DE-LINK FULLY DELETED, NON-WARNING BANK
 
   59 IQ(LW-1)  = LQUSER(5)
      LQUSER(5) = LW
      IQ(KDONE) = IQ(L-1)
      GO TO 24
 
C---------         READY  ACMD & ACNL  BANKS
 
   61 JV  = 0
   62 JV  = JV+1
      L   = 0
      N   = NV(JV)
      IF (N.EQ.0)            GO TO 65
      N = N + 3
      L = LACVH(JV)
      IF (L.EQ.0)            GO TO 63
      IF (IQ(L+1).GE.N)      GO TO 64
      CALL SBIT1 (IQ(L),IQDROP)
   63 NN = MAX  (N,43)
      MMV(4,JV)= NN
      CALL LIFTBK (L,0,0,MMV(1,JV),0)
      IF (LQWORK.GE.LIMIT)   GO TO 97
      IQ(L+1) = NN
      LACVH(JV)= L
   64 JRV(JV)= L+3
      IQ(L+2)= L+4
      IQ(L+3)= L+N +1
   65 LACV(JV)= L
      IF (JV.EQ.1)           GO TO 62
      NVGARB(2) = MAX  (NVGARB(2),NVGARB(1)-(LIMIT-LQWORK))
 
C---------         RE-LINK BANKS IN EXECUTION ORDER
 
C--                BUMP CARD-COUNT FOR  +ADD
C--                CONSTRUCT MULTI-DELETE INDEX BANK  ACMD
C--                CONSTRUCT   NIL-DELETE INDEX BANK  ACNL
 
      KACT  = KACTEX
      L     = IQ(KST)
 
   72 JM    = IQ(L+1)
      LACT  = IQ(L+2)
      IQ(KACT)= LACT
      IF (JM-3)              75,73,74
 
C--                +ADD
 
   73 IQCC(LACT)= IQCC(LACT) + 1
      GO TO 79
 
C--                NIL  +REP, +DEL
 
   74 IF (JM.NE.6)           GO TO 79
      JRNIL= JRNIL + 1
      IQ(JRNIL)= LACT
      GO TO 79
 
C--                +REPL, +DEL
 
   75 IF (JM.NE.2)           GO TO 79
      JRDEL = JRDEL + 1
      IQ(JRDEL)= LACT
 
   79 KACT = LACT - 1
      L    = IQ(L-1)
      IF (L.NE.0)            GO TO 72
      IQ(KACT)= 0
 
 
C-----             CONSTRUCT EXE-BITS FOR SELF-MATERIAL
 
      LGO = IQ(LEXD-2)
      GO TO 82
   81 LGO = IQ(LEXD-3)
   82 L   = LGO
      IF (L.EQ.0)            GO TO 84
 
   83 IF (JBIT(IQ(L),5) .NE.0)  CALL ACXREF (L,NVUSEB(12))              -MSK
C  83 IF ((IQ(L).AND.16).NE.0)  CALL ACXREF (L,NVUSEB(12))               MSKC
 
      CALL SBYTOR (IQ(L),NVUSEB(12),1,4)                                -MSK
C     NVUSEB(12)= NVUSEB(12) .OR. IQ(L)                                  MSKC
      L = IQ(L-1)
      IF (L.NE.0)            GO TO 83
 
   84 IF (LGO.NE.IQ(LEXD-3)) GO TO 81
 
      CALL SBYTOR (NVUSEB(12),NVUSEB(10),1,4)                           -MSK
C     NVUSEB(10)= NVUSEB(10) .OR. NVUSEB(12)                             MSKC
 
      LACTEX= IQ(KACTEX)
      IF (LACTEX.EQ.0)       GO TO 88
      NVACT(3)= JBYT (IQ(LACTEX),7,12)
      NVACT(2)= JBYT (NVACT(3),1,4)                                     -MSK
C     NVACT(2)= NVACT(3) .AND. 15                                        MSKC
      NVACT(1)= JBYT (NVACT(3),1,3)                                     -MSK
C     NVACT(1)= NVACT(3) .AND. 7                                         MSKC
      JCWAIT= IQCC(LACTEX)
      RETURN
 
C--                DECK WITH NO ACTIONS
 
   88 JCWAIT= LARGE
      LACTEX= 7
      RETURN
 
C-----             NOT ENOUGH SPACE FOR THE TABLE
 
   97 CONTINUE
      CALL NOMEM
      RETURN
      END
C====================================================================
CDECK  ID>, ACEXQ.
      SUBROUTINE ACEXQ (IPARAP)
 
C-    HANDLE ACTIONS ON MATERIAL CURRENTLY ARRIVING
C-                 PARAMETER  -VE  STEP OVER BANKS LEFT BEHIND
C-                              0  ACTION INTO SELF-MATERIAL
C-                            +VE  ACTION INTO FOREIGN MATERIAL
 
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (KACTEX,NVACT(4))
     +,                            (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (KJOIN,NVIMAT(3))
 
 
 
      IPARAM= IPARAP
   11 JCLA  = 4*JBYT (NVACT(3),7,3)                                     -MSK
C  11 JCLA  = NVACT(3) .AND. 448                                         MSKC
      IF (NVACT(2).GE.4)     GO TO 17
      JCWDEL= MAX  (JCWDEL,IQCC(LACTEX+1)+1)
   17 IF (IPARAM.EQ.0)       GO TO 41
 
C-----             STEP OVER BANKS LEFT BEHIND
 
   21 IF (JCLA+MEXDEC(6).LT.2)   GO TO 43
      IF (JCLA+NVUSEB(9).EQ.0)   GO TO 43
      IF (IPARAM.GE.0)           GO TO 42
      IF (JCCPRE.NE.0)           GO TO 42
      CALL SBIT1 (IQ(LACTEX),11)                                        -MSK
C     IQ(LACTEX)= IQ(LACTEX) .OR. 1024                                   MSKC
      GO TO 42
   25 IF (JCARD.GT.JCWAIT)   GO TO 11
      RETURN
 
 
C-----             EXQ ACTION ON SELF-MATERIAL
 
   41 IF (JCLA.EQ.0)         GO TO 44
   42 LDPACT= LACTEX
      MDEPAR= 1
      CALL DEPART
   43 IF (IPARAM)            47,44,64
 
   44 IF (JBIT(NVACT(3),5).NE.0)   GO TO 47                             -MSK
C  44 IF ((NVACT(3).AND.16).NE.0)  GO TO 47                              MSKC
      CALL ACPEEL (LACTEX)
      GO TO 47
 
C--                READY NEXT ACTION FOR EXECUTION
 
   47 KACTEX= LACTEX - 1
   48 LACTEX= IQ(KACTEX)
      IF (LACTEX.EQ.0)       GO TO 49
      NVACT(3)= JBYT (IQ(LACTEX),7,12)
      NVACT(2)= JBYT (NVACT(3),1,4)                                     -MSK
C     NVACT(2)= NVACT(3) .AND. 15                                        MSKC
      NVACT(1)= JBYT (NVACT(3),1,3)                                     -MSK
C     NVACT(1)= NVACT(3) .AND. 7                                         MSKC
      JCWAIT  = IQCC(LACTEX)
      IF (IPARAM.LT.0)       GO TO 25
      IF (JCARD.LT.JCWDEL)   RETURN
      IF (JCARD.LT.JCWAIT)   RETURN
      GO TO 11
 
   49 JCWAIT= LARGE
      RETURN
 
C-----             JOIN HIGH ACTION INTO LEVEL 1 ACTION
 
   64 IF (JBIT(NVACT(3),5).NE.0)   GO TO 47                             -MSK
C  64 IF ((NVACT(3).AND.16).NE.0)  GO TO 47                              MSKC
      IQ(KACTEX)= IQ(LACTEX-1)
      IQ(KJOIN) = LACTEX
      KJOIN     = LACTEX - 1
      IQ(KJOIN) = 0
      CALL SBYTOR (IQ(LACTEX),NVIMAT(4),1,5)                            -MSK
C     NVIMAT(4) = NVIMAT(4) .OR. IQ(LACTEX)                              MSKC
      NVIMAT(6) = NVIMAT(6) + JBYT (IQ(LACTEX+1),1,15)
      GO TO 48
      END
C====================================================================
CDECK  ID>, ACPEEL.
      SUBROUTINE ACPEEL (LPARAM)
 
C--   PEEL-OFF ACTION DATA-STRUCTURE TO DEPART
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (INCSEQ,NVINC(1))
     +,                            (INCACT,NVINC(2)), (INCMAT,NVINC(3))
C--------------    END CDE                             -----------------  ------
      DIMENSION    LSAVE(36)
      EQUIVALENCE (LSAVE(1),MWK(1))
 
 
 
C----              HEADER BANK 'KEEP'
 
      LX = LPARAM
      JDPMAT = JBYT (IQ(LX),7,3)
      IF (JDPMAT.NE.1)              GO TO 32
      IF (JBYT(IQ(LX),13,3).NE.0)   GO TO 28
   24 NDPLEV   = 1
      LSAVE(1) = LX
      LDPACT   = LX
      JDPACT   = 1
      NVDEP(14)= INCSEQ
      GO TO 47
 
   28 CALL ACSEQ (LX,0)
      IF (LX.NE.0)           GO TO 24
      RETURN
 
C-----             ATTACK NEXT BANK
 
   31 JDPMAT = JBYT (IQ(LX),7,3)
      IF (JDPMAT.EQ.0)       GO TO 41
 
C--                HIGHER LEVEL
 
   32 JDPACT = JDPMAT
      LDPACT = LX
      NDPLEV = NDPLEV + 1
      IF (NDPLEV.GE.81)      GO TO 91
      LSAVE(NDPLEV) = LX
      IF (JDPACT.NE.7)       GO TO 42
 
C--                SEQUENCE CALL
 
      IF (JBIT(IQ(LX),14)  .NE.0)  GO TO 61                             -MSK
C     IF ((IQ(LX).AND.8192).NE.0)  GO TO 61                              MSKC
 
      JDPACT = 1
      LDPACT = IQ(LX-2)
      IF (LDPACT.LE.0)                  GO TO 36
      IF (JBYT(IQ(LDPACT),13,3) .EQ.0)  GO TO 37                        -MSK
C     IF ((IQ(LDPACT).AND.28672).EQ.0)  GO TO 37                         MSKC
      CALL ACSEQ (LDPACT,LX)
      IF (LDPACT.EQ.0)       GO TO 61
      GO TO 38
 
   36 JMISSW = JBIT (IQ(LX),13)                                         -MSK
C  36 JMISSW = IQ(LX) .AND. 4096                                         MSKC
      LDPACT = LOCSEQ (IQ(LX+2),KADRV(2),KADRV(3),LX,JMISSW)
      IF (LDPACT.EQ.0)       GO TO 64
 
   37 CALL SBYTOR (IQ(LDPACT),NVUSEB(13),1,4)                           -MSK
C  37 NVUSEB(13) = NVUSEB(13) .OR. IQ(LDPACT)                            MSKC
   38 NVDEP(14)  = INCSEQ
      JDPMAT = 1
      LX     = LDPACT
      GO TO 47
 
C--                DEPARTURE
 
   41 NVDEP(14)= INCMAT
      GO TO 47
 
   42 NVDEP(14)= INCACT
   47 LDPMAT   = LX
      MDEPAR   = -1
      CALL DEPART
 
C-----             WHAT NEXT ?
 
   51 IF (JDPMAT.NE.0)       GO TO 54
   52 LX = IQ(LX-1)
      IF (LX.NE.0)           GO TO 31
      GO TO 61
 
C--                NOT MAT BANK, CHECK STILL HIGHER LEVEL
 
   54 IF (JBIT(IQ(LX),10).NE.0)     GO TO 61
      LX = IQ(LX-2)
      IF (LX.NE.0)           GO TO 31
 
C--                GO 1 LEVEL BACKWARDS
 
   61 NDPLEV = NDPLEV - 1
      IF (NDPLEV.EQ.0)       RETURN
      LDPACT= LSAVE(NDPLEV+1)
      LX    = IQ(LDPACT-1)
      IF (LX.EQ.0)           GO TO 61
      LDPACT= LSAVE (NDPLEV)
      JDPACT= JBYT(IQ(LDPACT),7,3)
      IF (JDPACT.NE.7)       GO TO 31
      LDPACT= IABS (IQ(LDPACT-2))
      JDPACT= 1
      GO TO 31
 
   64 CALL SBYTOR (NVUTY(16),NVUSEB(13),1,4)                            -MSK
C  64 NVUSEB(13) = NVUSEB(13) .OR. NVUTY(16)                             MSKC
      GO TO 61
 
C----              ACTION LEVEL TOO HIGH
 
   91 NVDEPL(5) = 8
      CALL DPPAGE
      WRITE (IQPRNT,9091) JCARD
      CALL PABEND
 
 9091 FORMAT (1X/' ***  FAULT AT C=',I5/
     F' ***  ACTION LEVEL 81 REACHED, MAYBE SEQUENCE CALL LOOP.')
      END
C====================================================================
CDECK  ID>, ACXREF.
      SUBROUTINE ACXREF (LPARAM,MXLOCL)
 
C-    CHECK THRU ACTION DATA-STRUCTURE TO FILL X-REFERENCES FROM
C-    SEQ-CALL-BANKS TO KEEP-BANKS AND TO COLLECT THE EXE-BITS
C-    BITS FROM GLOBAL SEQUENCES ARE JOINED INTO STATUS OF HEADER
C-    BITS FROM LOCAL  SEQUENCES ARE JOINED INTO SECOND PARAMETER
C-    (MODIFIED COPY OF ACPEEL)
C-    CALLED FROM ACSORT FOR 1 PARTICULAR LEVEL 1 ACTION BANK 'LPARAM'
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
C--------------    END CDE                             -----------------  ------
      DIMENSION    LSAVE(36), MXCUM(2), LPARAM(9), MXLOCL(9)
      EQUIVALENCE (LSAVE(1),MWK(1))
 
 
 
C--                HEADER BANK
 
      LX  = LPARAM(1)
      LGO = LX
 
      MXCUM(1) = IQ(LX)
      MXCUM(2) = 0
      JCUM   = 1
      MXUNS  = 0
      NDPLEV = 0
 
C-----             ATTACK NEXT BANK
 
   31 JDPMAT = JBYT (IQ(LX),7,3)
      IF (JDPMAT.EQ.0)       GO TO 52
 
C--                HIGHER LEVEL
 
      NDPLEV = NDPLEV + 1
      IF (NDPLEV.GE.81)      GO TO 81
      LSAVE(NDPLEV) = LX
      IF (JDPMAT.NE.7)       GO TO 54
 
C--                SEQUENCE CALL
 
      LDPACT= IQ(LX-2)
      IF (LDPACT.GT.0)       GO TO 37
      LDPACT = LOCSEQ (IQ(LX+2),KADRV(2),KADRV(3),LX,7)
      IF (IQ(LX-2).GT.0)     GO TO 37
      MXUNS = 16
      IF (LDPACT.EQ.0)       GO TO 64
      JCUM = 2
 
   37 CALL SBYTOR (IQ(LDPACT),MXCUM(JCUM),1,4)                          -MSK
C  37 MXCUM(JCUM) = MXCUM(JCUM) .OR. IQ(LDPACT)                          MSKC
 
      IF (JBIT(IQ(LDPACT),5) .EQ.0)    GO TO 61                         -MSK
C     IF ((IQ(LDPACT).AND.16).EQ.0)    GO TO 61                          MSKC
      LX = LDPACT
      GO TO 54
 
C-----             WHAT NEXT ?
 
   52 LX = IQ(LX-1)
      IF (LX.NE.0)           GO TO 31
      GO TO 61
 
C--                NOT MAT BANK, CHECK STILL HIGHER LEVEL
 
   54 IF (JBIT(IQ(LX),10).NE.0)     GO TO 61
      LX = IQ(LX-2)
      IF (LX.NE.0)           GO TO 31
 
C--                GO 1 LEVEL BACKWARDS
 
   61 NDPLEV = NDPLEV - 1
      IF (NDPLEV.EQ.0)       GO TO 81
      LDPACT= LSAVE(NDPLEV+1)
      LX    = IQ(LDPACT-1)
      IF (LX.EQ.0)           GO TO 61
      GO TO 31
 
   64 CALL SBYTOR (NVUTY(16),MXCUM(2),1,4)                              -MSK
C  64 MXCUM(2) = MXCUM(2) .OR. NVUTY(16)                                 MSKC
      GO TO 61
 
C--                MERGE EXE-BITS COLLECTED FROM KEEP-BANKS
 
   81 MXCUM(1) = MXUNS +  JBYT(MXCUM(1),1,4)                            -MSK
C  81 MXCUM(1) = MXUNS + (MXCUM(1).AND.15)                               MSKC
      CALL SBYT   (MXCUM(1),IQ(LGO),1,5)
      CALL SBYTOR (MXCUM(2),MXLOCL(1),1,4)
      NDPLEV = 0
      RETURN
      END
C====================================================================
CDECK  ID>, ACSEQ.
      SUBROUTINE ACSEQ (LSQ,LSQCP)
 
C-    Handle preset sequences
C-           1 DATEQQ, 2 QCARD1, 3 QEJECT, 4 QFTITLE, 5 QFTITLCH
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (INCSEQ,NVINC(1))
     +,                            (INCACT,NVINC(2)), (INCMAT,NVINC(3))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LASM,NVDEP(2))
      DIMENSION    LSQCP(9)
 
 
C     DATA  IDEAD  /4H****/                                              DEBUG
 
 
      LSQC= LSQCP(1)
      JS  = JBYT (IQ(LSQ),13,3)
      GO TO (26,21,28,31,31), JS
 
C-------           HANDLE Z=QCARD1,  IN FOREIGN OR IN SELF MATERIAL
 
   21 LSQ = 0
      IF (LSQC.NE.0)         GO TO 23
      IF (JCCPD.EQ.0)        RETURN
      NVDEP(7)= MCCPAR(JCCPD+1)
      NVDEP(8)= MCCPAR(JCCPD+2)                                         -A8M
      GO TO 24
 
   23 IF (IQ(LSQC+2).EQ.0)   RETURN
      NVDEP(7)= IQ(LSQC+2)
      NVDEP(8)= IQ(LSQC+3)                                              -A8M
   24 IF (NVDEP(1).EQ.0)     RETURN
      IQ(LASM+2)= IQ(LASM+2) + NVDEP(1)
      NVDEP(1) = 0
   26 RETURN
 
 
C-------           HANDLE Z=QEJECT
 
   28 LSQ = 0
C     N = IQ(LSQC+2)                                                    DEBUG
C     IF (LSQC.EQ.0)  N=MCCPAR(JCCPD+1)                                 DEBUG
C     IF (N.EQ.IDEAD)        CALL QFATAL                                DEBUG
      RETURN
 
C-------           HANDLE Z=QFTITLE,  IN FOREIGN OR IN SELF MATERIAL
 
   31 N = IQ(LSQC+2)
      IF (LSQC.EQ.0)  N=MCCPAR(JCCPN+1)
      N = MAX  (N,8)
      N = MIN  (N,62)
      CALL VBLANK (MWKX(1),80)
      NCH = MIN  (IQ(LPAM+12),70)
      CALL UBLOW (IQ(LPAM+13),MWKX(11),NCH)
 
C--                DISCARD LEADING BLANKS
 
      L = 11
      IF (MWKX(11).NE.IQLETT(3))  GO TO 34
      IF (MWKX(12).NE.IQBLAN)     GO TO 35
   33 L = L + 1
      IF (L.GE.19)                GO TO 35
   34 IF (MWKX(L).EQ.IQBLAN)      GO TO 33
   35 IF (L.NE.11)  CALL UCOPY (MWKX(L),MWKX(11),N)
      CALL VBLANK (MWKX(N+11),70-N)
      IF (JS.EQ.5)           GO TO 37
 
C--                CONSTRUCT  .....+.##Htext
 
      CALL SETNUM (N,MWKX(73),MWKX(5))
      MWKX(6) = IQPLUS
      MWKX(10)= IQLETT(8)
      CALL UBLOW  (8H    HOLD,MWKX(73),8)
      GO TO 39
 
C--                CONSTRUCT  .....+..'text'
 
   37 CALL UCOPY (MWKX(11),MWKX(10),N)
      MWKX(6) = IQPLUS
      MWKX(9) = IQAPO
      MWKX(10+N) = IQAPO
   39 CALL UBUNCH (MWKX(1),IQMSQ(LSQ),80)
      RETURN
      END
C====================================================================
CDECK  ID>, MXACTD.
      SUBROUTINE MXACTD (INC)
 
C-    EVALUATE EXE-BITS FOR DELETED CARD 'JCARD+INC'
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
      EQUIVALENCE                  (KACTEX,NVACT(4))
     +,                            (LACTEX,NVACT(5)), (LACDEL,NVACT(6))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LACMD,LADRV(9))
 
 
 
      JCD = JCARD + INC
      LA  = IQ(LACMD+2)
      LE  = IQ(LACMD+3)
 
C--                POSITION TO FIRST DELETE OF CARD 'JCD'
 
   12 LW = IQ(LA)
      IF (JCD.LE.IQCC(LW+1)) GO TO 21
      LA = LA + 1
C     IF (LA.EQ.LE)          CALL QFATAL                                DEBUG
      IQ(LACMD+2)= LA
      GO TO 12
 
C--                LOGICAL .AND. OF ALL DELETES TO 'JCD'
 
   21 MX    = IQ(LW)
      LACDEL= LW
   22 LA = LA + 1
      IF (LA.EQ.LE)          GO TO 29
      LW = IQ(LA)
      IF (JCD.LT.IQCC(LW))   GO TO 29
      IF (JCD.GT.IQCC(LW+1)) GO TO 22
      MX = JBYTET (IQ(LW),MX,1,4)                                       -MSK
C     MX = MX .AND. IQ(LW)                                               MSKC
      GO TO 22
 
   29 CALL SBYTOR (MX,NVIMAT(5),1,4)                                    -MSK
C  29 NVIMAT(5)= NVIMAT(5) .OR. MX                                       MSKC
      RETURN
      END
C====================================================================
CDECK  ID>, MXACTN.
      SUBROUTINE MXACTN (INC)
 
C-    EVALUATE EXE-BITS FOR ACCEPTED CARD 'JCARD+INC' IF COVERED BY
C-    NIL-DELETE
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LACNL,LADRV(10))
 
 
      JCD = JCARD + INC
      LA  = IQ(LACNL+2)
      LE  = IQ(LACNL+3)
 
C--                POSITION TO FIRST NIL-DELETE OF CARD 'JCD'
 
   12 LW = IQ(LA)
      IF (JCD.LT.IQCC(LW))   RETURN
      IF (JCD.LE.IQCC(LW+1)) GO TO 21
      LA = LA + 1
      IQ(LACNL+2)= LA
      IF (LA.NE.LE)          GO TO 12
   14 LACNL= 0
      RETURN
 
C--                LOGICAL .OR. OF ALL NIL-DELETES ON 'JCD'
 
   21 CALL SBYTOR (IQ(LW),NVIMAT(5),1,4)                                -MSK
C  21 NVIMAT(5)= NVIMAT(5) .OR. IQ(LW)                                   MSKC
   22 LA = LA + 1
      IF (LA.EQ.LE)          RETURN
      LW = IQ(LA)
      IF (JCD.LT.IQCC(LW))   RETURN
      IF (JCD.GT.IQCC(LW+1)) GO TO 22
      GO TO 21
      END
C====================================================================
CDECK  ID>, ARRIVE.
      SUBROUTINE ARRIVE
 
C-    CONTROL ROUTINE FOR ALL INPUT, EXCEPT FILE-NAME READ BY DOSPGO
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(9),LARX,LARXE,LINBUF
     +, NVCCP(7),JARDO,JARWT,JARLEV
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
      EQUIVALENCE(LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
C--------------    END CDE                             -----------------  ------
      DIMENSION    JCV(3)
      EQUIVALENCE (JCV(1),JCCPP)
 
C---------------   PACKED PAM-FILE             -------------------------
 
   90 IF (JASK)               91,161,151
   91 MUST = MAREAL - JASK
      IF (MUST)              130,121,92
   92 IF (MUST.NE.4)         GO TO 111
 
C--                JASK = MAFILE-1, READ FIRST TITLE RECORD, PRINT TITLE
 
      IF (MODPAM.NE.0)       GO TO 407
      IF (JPROPD.NE.0)       GO TO 122
      JARDO = 7
      CALL ARBIN
      IF (NVARRI(1).NE.3)    GO TO 108
      NDECKR = NDECKR - 1
 
      LDPMAT   = IABS(IQ(LARX))
      IQ(LPAM+12) = 80
      CALL UCOPY (IQ(LDPMAT),IQ(LPAM+13),KDNWT)
      NVDEP(11)= IABS(IQ(LARX+2)) - LDPMAT
      NVDEP(12)= IQ(LARX+1) - 1
      NVDEP(13)= 1
      MDEPAR = 5
      CALL DEPART
      GO TO 173
 
C--                EOI  OR  POSITIONING FAULT
 
  108 WRITE (IQPRNT,9108)
      CALL PABEND
 
 
C-------           JASK = MAFIL,MAPAT,MADEC  GET NEXT FILE/PATCH/DECK
 
  111 IF (MODPAM.NE.0)       GO TO 411
      JARDO = -7
  112 IF (NVARRI(3).GE.MUST) GO TO 173
      CALL ARBIN
      GO TO 112
 
C--------          JASK= MAREAL   DECODE CARD  +PATCH  +DECK
 
  121 CONTINUE
C     IF (JPROPD.GE.0)       CALL QFATAL                                DEBUG
      JARDO = 7
      CALL ARBIN
 
C--                DECODE PATCH/DECK HEADER CARD
 
  122 JPROPD = NVARRI(1)
      L      = IQ(LARX)
      JCCTYP = MCCDEF - JPROPD
      IF (NVOPER(3).NE.0)    GO TO 125
      IF (IQ(LARX+1).NE.1)   GO TO 123
      LARX = LARX + 2
      NWKD = -IQ(LARX) - L
      GO TO 124
 
  123 NWKD    = KDSTEP (IQ(L),1)
      IQ(LARX)= L + NWKD
  124 NCHKD   = KDNCHW*NWKD - 1
      JCARD = 1
      CALL CCKRAK (IQ(L))
      IF (NCCPIF.NE.0)  CALL CCPROC
      RETURN
 
C--                UPDATE MODE
 
  125 NWKD  = KDSTEP (IQ(L),1)
      NCHKD = KDNCHW*NWKD - 1
      CALL CCKRAK (IQ(L))
      RETURN
 
 
C-------           JASK = MAPRE   PRE-READ NEXT CARD
 
  127 IF (MODPAM.NE.0)       GO TO 471
      IF (LARX.LT.LARXE)     GO TO 128
      IF (NVARRI(3).NE.0)    GO TO 171
      JARDO = 7
      CALL ARBIN
  128 JCCPRE = 7
      GO TO 181
 
C-------           JASK = MAFLAT, MASKIP, MADEL, MACHEK   IGNORE CARDS
 
  130 JARLEV= -JASK
      IF (JASK+2)            133,132,131
 
C--                -1  JASK = MACHECK
  131 JARWT = JCWAIT
      GO TO 135
 
C--                -2  JASK = MADEL
  132 JARWT = JCWDEL
      GO TO 135
 
C--                -3  JASK = MASKIP
C--                -4  JASK = MAFLAT
 
  133 JARWT = LARGE
      JARLEV= JARLEV - 1
 
  135 IF (MODPAM.NE.0)       GO TO 431
      JCCPRE= 0
 
 
C----              POSITION TO CARD 'JARWT' OR NEXT C/C OF WANTED LEVEL
 
  136 IF (JCARD.EQ.JARWT)    GO TO 182
      IF (LARX.LT.LARXE)     GO TO 141
  137 IF (NVARRI(3).NE.0)    GO TO 171
      IF (NVARRI(4).GE.JARLEV)     GO TO 139
      IF (JCARD+520 .GE.JARWT)     GO TO 139
 
C--                SKIP NEXT RECORD, UP-DATE  JCARD
 
      JARDO = 0
      CALL ARBIN
      JCARD = IQ(LARXE)
      GO TO 137
 
C--                READ NEXT RECORD
 
  139 JARDO = 7
      CALL ARBIN
 
C--                CHECK CARD 'JCARD' IS C/C
 
  141 L = IQ(LARX)
      IF (L.GE.0)            GO TO 142
      L = -L
      JCCTYP= JARTYP (IQ(L))
      IF  (JCCTYP.GE.0)      GO TO 186
      IF (-JCCTYP.GE.JARLEV) GO TO 186
 
C--                CHECK CARD 'JARWT' IS WITHIN CURRENT GROUP
 
  142 IF (JARWT.LT.IQ(LARX+1))     GO TO 143
      JCARD = IQ(LARX+1)
      LARX  = LARX + 2
      GO TO 136
 
C--                POSITION TO CARD  JARWT
 
  143 IQ(LARX) = L + KDSTEP (IQ(L),JARWT-JCARD)
      JCARD = JARWT
      GO TO 182
 
 
C-------           JASK = MADRVI   DRIVE INDIRECT (FOREIGN) MATERIAL
 
  151 IF (JASK.NE.1)         GO TO 127
      NCARR = 0
      IF (MODPAM.NE.0)       GO TO 451
      JCCPRE= 0
C     IF (JCARD.EQ.JCWAIT)   CALL QFATAL                                DEBUG
      IF (LARX.GE.LARXE)     GO TO 160
  152 NVDEP(13)= JCARD
      LDPMAT   = IQ(LARX)
      IF (LDPMAT.LT.0)       GO TO 184
      LCARD= IQ(LARX+1)
      IF (JCWAIT.GE.LCARD)   GO TO 155
      NVDEP(12)= JCWAIT - JCARD
      NVDEP(11)= KDSTEP (IQ(LDPMAT),NVDEP(12))
      IQ(LARX) = LDPMAT + NVDEP(11)
      JCARD    = JCWAIT
      GO TO 158
 
  155 LARX  = LARX + 2
      JCARD = LCARD
      NVDEP(11)= -IQ(LARX) - LDPMAT
      NVDEP(12)= LCARD - NVDEP(13)
 
C--                DRIVE INDIRECT MATERIAL TO MEMORY, AND POSSIBLY LIST
 
  158 CALL UCOPY (IQ(LDPMAT),IQ(LARMAT),NVDEP(11))
      NCARR = NCARR  + NVDEP(12)
      LARMAT= LARMAT + NVDEP(11)
      IF (NVUSEB(9).EQ.0)    GO TO 159
      MDEPAR = -2
      CALL DEPART
  159 IF (JCARD.EQ.JCWAIT)   GO TO 182
      IF (LARX.GE.LARXE)     GO TO 160
      L = -IQ(LARX)
      GO TO 185
 
C--                LOAD NEXT RECORD
 
  160 IF (NVARRI(3).NE.0)    GO TO 171
      JARDO = 7
      CALL ARBIN
      GO TO 152
 
 
C-------           JASK = MADRVS   DRIVE SELF MATERIAL TO DEPART
 
  161 NVDEP(14)= 0
      IF (MODPAM.NE.0)       GO TO 461
      JCCPRE= 0
C     IF (JCARD.EQ.JCWAIT)   CALL QFATAL                                DEBUG
      IF (LARX.GE.LARXE)     GO TO 170
  162 NVDEP(13)= JCARD
      LDPMAT   = IQ(LARX)
      IF (LDPMAT.LT.0)       GO TO 184
      LCARD= IQ(LARX+1)
      IF (JCWAIT.GE.LCARD)   GO TO 165
      NVDEP(12)= JCWAIT - JCARD
      NVDEP(11)= KDSTEP (IQ(LDPMAT),NVDEP(12))
      IQ(LARX) = LDPMAT + NVDEP(11)
      JCARD    = JCWAIT
      GO TO 168
 
  165 LARX  = LARX + 2
      JCARD = LCARD
      NVDEP(11)= -IQ(LARX) - LDPMAT
      NVDEP(12)= LCARD - NVDEP(13)
 
C--                DRIVE SELF-MATERIAL TO DEPART
 
  168 MDEPAR = 0
      CALL DEPART
      IF (JCARD.EQ.JCWAIT)   GO TO 182
      IF (LARX.GE.LARXE)     GO TO 169
      L = -IQ(LARX)
      GO TO 185
 
C--                LOAD NEXT RECORD
 
  169 NVDEP(14)= 7
  170 IF (NVARRI(3).NE.0)    GO TO 171
      IF (JASK.NE.0)         GO TO 90
      JARDO = 7
      CALL ARBIN
      GO TO 162
 
C-----             END OF DECK
 
  171 JANSW = 7
      JCCTYP= MCCEOD
  173 JPROPD   =-NVARRI(3)
      IDARRV(7)= NVARRI(5)
      IDARRV(8)= NVARRI(6)                                              -A8M
      NVARRI(3)= 0
      LARX = LARXE
      RETURN
 
 
C----------        END OF PROCESSING, DECODE NEXT C-C
 
  181 L = -IQ(LARX)
      IF (L.GE.0)            GO TO 185
  182 JCCTYP= 0
      RETURN
 
  184 L = -LDPMAT
  185 JCCTYP= JARTYP (IQ(L))
  186 JCARD = JCARD + 1
      LARXSV= LARX
      IF (JCARD.NE.IQ(LARX+1))   GO TO 188
      LARX = LARX + 2
      NWKD = -IQ(LARX) - L
      GO TO 189
 
  188 NWKD = KDSTEP (IQ(L),1)
      IQ(LARX)= L + NWKD
  189 NCHKD= KDNCHW*NWKD - 1
      CALL CCKRAK (IQ(L))
      IF (JCCBAD.NE.0)       GO TO 196
      IF (NCCPIF.NE.0)  CALL CCPROC
      RETURN
 
C--                HANDLE FAULTY C/C
 
  196 MDEPAR = 2
      CALL DEPART
      LARX = LARXSV
      IQ(LARX) = L
      JCARD= JCARD - 1
      IF (JASK.EQ.0)         GO TO 162
      IF (JASK.EQ.1)         GO TO 152
      IF (JASK.GE.2)         GO TO 182
      IF (JASK.GE.-4)        GO TO 136
      RETURN
 
 
C---------------   PAM-FILE ON CARDS           -------------------------
 
C--                JASK = MAFILE-1, PRINT TITLE
 
  407 IF (NVDEP(12).EQ.0)    GO TO 481
      IQ(LPAM+12) = NCHKD
      CALL UCOPY (IQ(LDPMAT),IQ(LPAM+13),NWKD)
      NVDEP(11)= NWKD
      NVDEP(12)= 1
      MDEPAR = 5
      CALL DEPART
      RETURN
 
C----              JASK = MAFIL,MAPAT,MADEC  GET NEXT FILE/PATCH/DECK
C--                ACCEPTED  +PAM, +QUIT ON THE CRADLE ALSO TERMINATE
 
  411 JARWT = -7
      JARDO = -2
 
  412 JPROPD= 0
      CALL ARBCD
      IF (JPROPD.GE.MUST)    RETURN
      JPROPD = MCCDEF - JCCTYP
      IF (JPROPD.LT.MUST)    GO TO 412
      IF (JCCTYP.GE.MCCTIT)  GO TO 482
      IF (NVARR(6).EQ.0)     GO TO 412
      IF (JCCBAD.NE.0)       GO TO 496
      IF (NCCPIF.EQ.0)       GO TO 487
      CALL CCPROC
      IF (JCCIFV.EQ.0)       GO TO 487
      GO TO 412
 
C----              JASK = MAFLAT, MADEL, MASKIP, MACHECK   IGNORE CARDS
 
  431 JARDO = -1
      CALL ARBCD
      GO TO 481
 
 
C----              JASK = MADRVI   DRIVE INDIRECT (FOREIGN) MATERIAL
 
  451 LAREND= LQTOL
      JARWT = JCWAIT
      JARDO = 0
  453 CALL ARBCD
      NCARR = NCARR + NVDEP(12)
      IF (NVUSEB(9).EQ.0)    GO TO 456
      IF (NVDEP(12).EQ.0)    GO TO 456
      MDEPAR = -2
      CALL DEPART
  456 IF (JCCTYP.NE.0)       GO TO 482
      IF (JCARD.EQ.JARWT)    RETURN
      CALL NOMEM
 
C----              JASK = MADRVS   DRIVE SELF MATERIAL TO DEPART
 
  461 NVDEP(14)= 0
      JARWT  = JCWAIT
      JARDO  = 0
  463 LARMAT = LINBUF
      LAREND = LINBUF + IQ(LINBUF-2)
      IF (MEXDEC(5).NE.0)    GO TO 466
  464 CALL ARBCD
 
      IF (NVDEP(12).EQ.0)    GO TO 481
      MDEPAR= 0
      CALL DEPART
      IF (JCCTYP.NE.0)       GO TO 482
      IF (JCARD.EQ.JARWT)    RETURN
      IF (JASK.NE.0)         GO TO 90
      NVDEP(14)= 7
      GO TO 463
 
  466 LAREND = LINBUF + 24
      GO TO 464
 
C----              JASK = MAPRE   PRE-READ NEXT CARD
 
  471 JARDO = 1
      CALL ARBCD
 
C-------------     CHECK END-OF-DECK  AND RETURN
 
  481 IF (JCCTYP.EQ.0)       RETURN
  482 IF (JCCBAD.NE.0)       GO TO 496
      IF (NCCPIF.NE.0)  CALL CCPROC
      IF (JCCTYP-MCCEOD)     485,487,483
  483 RETURN
 
 
C----              DECK TERMINATION BY  +PATCH, +DECK
 
  485 IF (JCCTYP-MCCTIT)     491,488,486
  486 JPROPD = MCCDEF - JCCTYP
      J = JCV(3-JPROPD)
      IDARRV(7)= MCCPAR(J+1)
      IDARRV(8)= MCCPAR(J+2)                                            -A8M
  487 JANSW = 7
      RETURN
 
C--                +TITLE,  IGNORE IF VERY FIRST CARD ON FILE
 
  488 IF (NCARDP.EQ.1)       GO TO 489
      JPROPD = 3
      JANSW  = 7
      RETURN
 
  489 NCARDP = 0
      JCARD  = 0
      GO TO 90
 
C--                +PAM, +QUIT IN THE CRADLE
 
  491 IF (NVARR(6).EQ.0)     RETURN
      IF (JCCIFV.NE.0)       RETURN
      MDEPAR = 4
      CALL DEPART
      JPROPD = 3
      JANSW  = 7
      RETURN
 
C------            FAULTY C/C
 
  496 MDEPAR = 2
      CALL DEPART
      IF (JASK.LT.0)         GO TO 498
      JCARD  = JCARD - 1
      JCCPRE = 7
      JCCTYP = 0
      IF (JASK.EQ.2)         RETURN
      CALL UCOPY (IQ(LARMAT),KDHOLD(1),NWKD)
      IF (JASK.EQ.0)         GO TO 463
      GO TO 453
 
  498 IF (JASK.GE.-4)        GO TO 431
      IF (JASK.GE.MAPAT)     GO TO 412
      RETURN
 
 9108 FORMAT ('0***  PAM IS NOT PACKED BINARY OR IS BADLY POSITIONED.')
      END
C====================================================================
CDECK  ID>, ARBCD.
      SUBROUTINE ARBCD
 
C-    DRIVE CARD INPUT TO YPATCHY
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(9),LARX,LARXE,LINBUF
     +, NVCCP(7),JARDO,JARWT,JARLEV
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    IN(20)
      EQUIVALENCE (IN(1),KDHOLD(1))
 
 
C--               JARDO= -2 POSITION DECK, -1 IGNORE, 0 READ, 1 PRE-READ
 
      NVDEP(13)= JCARD
      LDPMAT   = LARMAT
    9 IF  (JARDO)            21,41,31
 
C-------           IGNORE CARDS UNTIL 'JARWT' OR C/C
 
   20 JCARD = JCARD + 1
      JCCPRE= 0
 
   21 IF (JCCPRE.NE.0)       GO TO 20
   22 IF (JCARD.EQ.JARWT)    GO TO 29
      CALL KDNEXT (IN(1))
      IF (NCHKD.LT.0)        GO TO 73
      JCARD = JCARD + 1
      JCCTYP= JARTYP (IN(1))
      IF (JCCTYP.EQ.0)       GO TO 22
 
C--                POSITION DECK
 
      IF (JARDO.EQ.-1)       GO TO 24
      IF (JCCTYP.GE.MCCEOD)  GO TO 22
      CALL CCKRAK (IN(1))
      IF (JCCTYP.GE.MCCEOD)  GO TO 22
      RETURN
 
C--                SKIP DATA
 
   24 IF (JCCTYP.GE.0)       GO TO 25
      IF (-JCCTYP.LT.JARLEV) GO TO 22
   25 CALL CCKRAK (IN(1))
      RETURN
 
C----              STOP ON CARD 'JARWT'
 
   28 NVDEP(11) = LARMAT - LDPMAT
      NVDEP(12) = JCARD - NVDEP(13)
   29 JCCTYP = 0
      RETURN
 
C-------           PRE-READ C/C
 
   31 CALL KDNEXT (IN(1))
      IF (NCHKD.LT.0)        GO TO 73
      JCCPRE = 7
      JCCTYP = JARTYP (IN(1))
      IF (JCCTYP.EQ.0)       RETURN
      JCARD = JCARD + 1
      GO TO 25
 
 
C-------           COLLECT CARDS UNTIL 'JARWT' OR C/C OR BUFFER FULL
 
   40 JCCPRE= 0
      JCARD = JCARD + 1
      CALL UCOPY (IN(1),IQ(LARMAT),NWKD)
      LARMAT = LARMAT + NWKD
 
   41 IF (JCCPRE.NE.0)       GO TO 40
   42 IF (JCARD.EQ.JARWT)    GO TO 28
      IF (LARMAT.GE.LAREND)  GO TO 28
      CALL KDNEXT (IQ(LARMAT))
      IF (NCHKD.LT.0)        GO TO 73
      JCARD = JCARD + 1
      JCCTYP= JARTYP (IQ(LARMAT))
      IF (JCCTYP.NE.0)       GO TO 51
   44 LARMAT= LARMAT + NWKD
      GO TO 42
 
C----              STOP ON CONTROL-CARD
 
   51 NVDEP(11) = LARMAT - LDPMAT
      NVDEP(12) = JCARD-1 - NVDEP(13)
      CALL CCKRAK (IQ(LARMAT))
      RETURN
 
C------            STOP ON   EOS (-1),  EOF (-2),  EOI (-3)
 
   73 JCCTYP= MCCEOD
      JCCBAD= 0
      NCCPIF= 0
      JANSW = 7
      JPROPD= 4
   79 NVDEP(11) = LARMAT - LDPMAT
      NVDEP(12) = JCARD - NVDEP(13)
      RETURN
      END
C====================================================================
CDECK  ID>, ARBIN.
      SUBROUTINE ARBIN
 
C-    READ/SKIP NEXT RECORD OF COMPACT PAM
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(9),LARX,LARXE,LINBUF
     +, NVCCP(7),JARDO,JARWT,JARLEV
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LUNUSE,LUNPAM)
 
 
 
      LINBIN = LINBUF + IQ(LINBUF-1)
    9 IF  (JARDO)            11,17,21
 
 
C----              SKIP NEXT DECK
 
   11 CONTINUE
      J = 3
      CALL XINB (LUNUSE,IQ(LINBIN+1),J)
      IF   (J.EQ.0)          GO TO 81
      IF   (J.LT.0)          GO TO 80
      NSKIPR = NSKIPR + 1
      GO TO 31
 
C----              SKIP RECORD WITHOUT C-C
 
   17 CONTINUE
      J = 3
      CALL XINB (LUNUSE,IQ(LINBIN+1),J)
      IF   (J.EQ.0)          GO TO 81
      IF   (J.LT.0)          GO TO 80
      NSKIPR = NSKIPR + 1
      N = 2
      GO TO 31
 
C----              READ NEXT RECORD IN FULL
 
   21 CONTINUE
      J = 510
      CALL XINB (LUNUSE,IQ(LINBIN+1),J)
      IF   (J.EQ.0)          GO TO 81
      IF   (J.LT.0)          GO TO 80
      IQ(LINBIN) = J
C     JARDO = JBYT (IQ(LINBIN+2),10,9)                                   A8M
      JARDO = JBYT (IQ(LINBIN+3),10,9)                                  -A8M
      N = 2*JARDO + 3
 
 
C------            PROCESS THE STUFF READ
 
   31 NVARRI(5)= IQ(LINBIN+1)
      NVARRI(6)= IQ(LINBIN+2)                                           -A8M
      CALL UPKBYT (IQ(LINBIN+3),1,NVARRI(1),4,MPAK2(1))                 -A8M
C     CALL UPKBYT (IQ(LINBIN+2),1,NVARRI(1),4,MPAK2(1))                  A8M
      NCARDP= NCARDP + 1
      IF (NVARRI(1).EQ.0)    GO TO 34
      NDECKR = NDECKR + 1
      JCARD  = MAX  (0,NVARRI(1)-2)
   34 CONTINUE
      IF (JARDO.LT.0)        RETURN
      LEND = LINBIN + IQ(LINBIN) + 1
 
C--                UNPACK INDEX VECTOR, CONVERT TO C/C DIRECTORY
 
C     CALL UPKBYT (IQ(LINBIN+2),2,IQ(LINBUF+1),N,MPAK9(1))               A8M
      CALL UPKBYT (IQ(LINBIN+3),2,IQ(LINBUF+1),N,MPAK9(1))              -A8M
      LARX  = LINBUF + 3
      IF (NVOPER(3).NE.0)    GO TO 61
      IF (JARDO    .EQ.0)    GO TO 63
 
C----              RECORD WITH C/C
 
      LARXE = LINBUF + N + 1
      IQ(LARXE)  = IQ(LINBUF+2)
      IQ(LARXE+1)= -LEND
 
      DO 37   L=LARX,LARXE,2
      IQ(L)   = -(IQ(L) + LINBIN)
   37 IQ(L+1) =   IQ(L+1) + JCARD
      IQ(LARX)= -IQ(LARX)
      IF (IQ(LARX+1).EQ.JCARD)  LARX=LARX+2
      IF (MOPTIO(11)+MOPTIO(19).EQ.0)        RETURN
 
 
C--                REMOVE CARDS +SEQ, +KEEP FROM C/C DIRECTORY IF OPTION
 
      L = -IQ(LARX)
      IF (L.LT.0)               GO TO 42
      IF (JARTYP(IQ(L)).NE.0)   GO TO 42
      IQ(LARX) = L
 
   42 LP = LARX + 1
      LT = LARX - 1
   45 LT = LT + 2
      IF (LT.GE.LARXE)       GO TO 46
      L = -IQ(LT+1)
      IF (JARTYP(IQ(L)).EQ.0)   GO TO 45
      IQ(LP)   = IQ(LT)
      IQ(LP+1) = -L
      LP = LP + 2
      GO TO 45
 
   46 IQ(LP)   = IQ(LARXE)
      IQ(LP+1) = IQ(LARXE+1)
      LARXE = LP
      RETURN
 
 
C----              UPDATE MODE, BY-PASS C/C
 
   61 IQ(LARX) = IQ(LARX) + LINBIN
      IF (NVARRI(3) .EQ.0)   GO TO 62
      IF (MOPTIO(20).EQ.0)   GO TO 62
      IQ(LEND)  = KDEOD(1)
      IQ(LEND+1)= KDEOD(2)                                               A4
      LEND = LEND + 2                                                    A4
C     LEND = LEND + 1                                                   -A4
      IQ(LINBUF+2) = IQ(LINBUF+2) + 1
 
   62 NVARRI(2) = 0
      NVARRI(4) = 0
      IF (JARDO.NE.0)        GO TO 64
 
C--                RECORD WITHOUT C/C
 
   63 IQ(LARX) = NWSEN1 + LINBIN
   64 LARXE = LARX + 1
      IQ(LARXE)   = IQ(LINBUF+2) + JCARD
      IQ(LARXE+1) = -LEND
      RETURN
 
C------            EOF SEEN
 
   80 CALL PABERR (LUNUSE)
   81 NVARRI(1)= 4
      NVARRI(3)= 3
      JPROPD = 4
      RETURN
 
      END
C====================================================================
CDECK  ID>, DEPART.
      SUBROUTINE DEPART
 
C-    MAIN DEPARTURE CONTROL ROUTINE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRVRQ/MAFIL,MAPAT,MADEC,MAREAL,MAFLAT,MASKIP,MADEL
     +,              MACHEK,MADRVS,MADRVI,MAPRE,  MSELF
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, JASK,JCWAIT,JCWDEL,LARMAT,LAREND,NCARR
     +, NVARR(10), IDARRV(8),JPROPD,MODPAM, NVARRI(11),LINBUF,NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
C     EQUIVALENCE (LEADCC,LEAD(3))                                      A5,A10
C     EQUIVALENCE (LEADCC,LEAD(5))                                      A8
      EQUIVALENCE (LEADCC,LEAD(1))                                      A4,A6
 
      DIMENSION    LOSTV(4)
 
 
      DATA  LOSTV  /4HDIV ,4HMIX ,4HEXE ,4HLIST/
 
 
   10 IF   (MDEPAR)          21,11,31
 
 
C------------      SELF MATERIAL                       -----------------
 
   11 IF (MEXDEC(5).NE.0)    GO TO 19
      IF (MEXDEC(6))         18,17,12
   12 JDPMKT(1)= IQMINS
      JDPMKT(2)= IQBLAN
      JDPMK(1) = IQMINS
      JDPMK(2) = IQBLAN
      IDDEPP(1)= 0
 
C----              +LIST FOR NORMAL SELF
 
      IF (MEXDEC(4).EQ.0)    GO TO 14
      CALL DPLIST
      IF (MEXDEC(3).EQ.0)    RETURN
      IF (MEXDEC(2).EQ.0)    GO TO 17
 
C----              +MIX FOR NORMAL SELF
 
   14 IF (NVDEP(14).NE.0)    GO TO 15
      IDDEPD(1)= IDARRV(1)
      IDDEPD(2)= IDARRV(2)                                              -A8M
      IDDEPP(1)= IDARRV(3)
      IDDEPP(2)= IDARRV(4)                                              -A8M
      IDDEPZ(1)= 0
      JDPMKT(2)= IQMINS
   15 CALL DPMIX
      RETURN
 
C----              +EXE FOR NORMAL SELF
 
   17 CALL DPEXE
   18 RETURN
 
C----              DECK DEMANDS ASM FILE NOW
 
   19 MEXDEC(5) = 0
      IF (MEXDEC(6).GE.0)    GO TO 10
      MSELF = MAFLAT
      IF (NVOPER(2).EQ.0) MSELF=MACHEK
      IF (MDEPAR.EQ.0)     JASK=MSELF
      RETURN
 
C------------      FOREIGN MATERIAL FROM THIS DECK     -----------------
 
   20 JDPMKT(1)= IQDOT
      JDPMKT(2)= IQBLAN
      JDPMK(1) = IQDOT
      JDPMK(2) = IQBLAN
      IDDEPP(1)= 0
      CALL DPLIST
      RETURN
 
 
C------------      FOREIGN MATERIAL INTO THIS DECK     -----------------
 
   21 IF (MDEPAR.NE.-1)      GO TO 20
      CALL UPKBYT (IQ(LDPMAT+1),2,NVDEP(11),3,MPAK15(1))
      IF (NVDEP(12).EQ.0)    GO TO 29
      IF (MEXDEC(5).NE.0)    GO TO 19
C     IF (JBIT(IQ(LDPMAT),11).NE.0)   CALL QFATAL                       DEBUG
      LDPMAT = LDPMAT + NVDEP(14)
      IF (MEXDEC(6))         28,27,22
   22 CALL DEPID
 
C----              +LIST  FOR NORMAL FOREIGN
 
      IF (MEXDEC(4).EQ.0)    GO TO 24
      IF (IDDEPP(1).EQ.0)    GO TO 23
      NVDEPL(5)= NVDEP(12)
      CALL DPLIST
   23 IF (MEXDEC(3).EQ.0)    RETURN
      IF (MEXDEC(2).EQ.0)    GO TO 27
 
C----              +MIX  FOR NORMAL FOREIGN
 
   24 CONTINUE
      CALL DPMIX
      RETURN
 
C----              +EXE  FOR NORMAL FOREIGN
 
   27 CALL DPEXE
   28 RETURN
 
C-----             ZERO-CARD INDIRECT MATERIAL
 
   29 IF (MEXDEC(4).EQ.0)    RETURN
      GO TO 53
 
 
C------------      SPECIAL LISTING                     -----------------
 
   31 IF (MDEPAR-5)          32,45,46
   32 IF (MDEPAR-3)          41,42,44
 
C--                MDEPAR=1, ACTION ON THIS DECK, CLASH-WARNING IF ANY
   41 IF (MDEPAR.EQ.1)       GO TO 51
 
C--                MDEPAR=2, FAULTY CONTROL CARD
      CALL DPPAGE
      NVWARN(1)= NVWARN(1) + 1
      J = JCARD-1
      WRITE (IQPRNT,9042) NVWARN(1),J
      NQUSED= NQUSED + 1
      GO TO 44
 
C--                MDEPAR=3,    MISSING SEQUENCE
   42 IF (LDPACT.NE.0)          GO TO 53
      IF (NVDEPL(3).EQ.JCARD)   GO TO 43
      JDPACT= 0
      CALL DEPMSG
      NVDEPL(5)= 1
      CALL DPLIST
   43 JDPACT= 1
      GO TO 57
 
C--                MDEPAR=4, LIST LAST CONTROL-CARD
   44 IF (NVDEPL(3).EQ.JCARD)   RETURN
      LDPACT= 0
      JDPACT= 0
      GO TO 57
 
C--                MDEPAR=5, LIST PAM TITLE
   45 JDPMKT(1)= IQLETT(20)
      JDPMKT(2)= IQBLAN
      JDPMK(1) = IQLETT(20)
      JDPMK(2) = IQBLAN
      IDDEPP(1)= 0
      GO TO 58
 
C--                MDEPAR=6, LIST U/REF AT LDPACT
 
   46 IF (MDEPAR.NE.6)       GO TO 60
 
 
C----              OUTPUT FOR SPECIAL LIST
 
   51 JDPACT= JBYT (IQ(LDPACT),7,3)
      JDPMAT= JDPACT
   52 CALL UPKBYT (IQ(LDPACT+1),2,NVDEP(11),3,MPAK15(1))
   53 IF (LDPACT.EQ.NVDEP(10))  RETURN
      NVDEP(10)= LDPACT
      CALL DEPID
      IF (IDDEPP(1).EQ.0)    RETURN
   57 CALL DEPMSG
   58 CALL DPLIST
      LEADCC = IQBLAN
      RETURN
 
C------------      STRAIGHT MESSAGE PRINTING           -----------------
 
C--                PRINT LOST ACTIVATION WARNING
 
   60 IF (NVWARN(3).GE.61)   RETURN
 
      NVDEPL(5) = -2
      CALL DPPAGE
 
      J = JCARD - 1
 
      DO 63 JJ=1,4
      IF (JBIT(NVUSEB(13),JJ).EQ.0)  GO TO 63
      NVWARN(3) = NVWARN(3) + 1
      WRITE (IQPRNT,9063) NVWARN(3),LOSTV(JJ),J
      CALL SBIT0 (NVUSEB(14),JJ)
      NQUSED = NQUSED + 1
   63 CONTINUE
      GO TO 44
 
 9042 FORMAT (1X,40(1H*),I5,'*   FAULTY CONTROL CARD   C=',I5)
 9063 FORMAT (1X,40(1H*),I5,'*   LOST +',A4,' ACTIVATION FOR  C=',I5)
      END
C====================================================================
CDECK  ID>, DEPID.
      SUBROUTINE DEPID
 
C-    SET UP TAIL-WORDS FOR LIST & MIX OUTPUT ACCORDING TO ACTION LDPACT
C-    IT NEEDS:  NDPLEV, LDPACT, JDPACT, JDPMAT
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
C--------------    END CDE                             -----------------  ------
      DIMENSION    NUMVAL(9)
      EQUIVALENCE (NUMVAL(1),IQNUM(2))
      DIMENSION    MKV(8)
 
 
      DATA  MKV    / 1H/,1HZ,1HD,1HR,1HB,1HA,1H-,1HZ /
 
 
C-------           HANDLE 'KEEP' BANK
 
      IF (JDPACT.NE.1)       GO TO 41
      IF (JDPMAT.NE.1)       GO TO 26
      IF (JBIT(IQ(LDPACT),16).NE.0)  GO TO 91
      IDDEPZ(1)= IQCC(LDPACT)
      IDDEPZ(2)= IQCC(LDPACT+1)                                         -A8M
      IF (NDPLEV.NE.1)       GO TO 44
      JDPMKT(1)= IQBLAN
      JDPMKT(2)= IQDOT
      JDPMK(1) = IQBLAN
      JDPMK(2) = IQBLAN
      GO TO 46
 
C--                HANDLE SEQ CALL BANK
 
   26 IF (JDPMAT.EQ.0)       GO TO 41
      NVDEP(13)= IQ(LDPACT+1)
      IDDEPZ(1)= IQ(LDPACT+2)
      IDDEPZ(2)= IQ(LDPACT+3)                                           -A8M
      GO TO 44
 
C-------           HANDLE ACTION BANKS
 
   41 IDDEPZ(1)= 0
   44 JDPMKT(1)= MKV(JDPMAT+1)
      JDPMKT(2)= JDPMKT(1)
      JDPMK(1) = IQPLUS
      JDPMK(2) = IQPLUS
   46 J = MAX (NDPLEV,1)
      MMLEV = NUMVAL(J)
      MMACT = MKV(JDPACT+1)
 
      L = IQ(LDPACT-3)
      JDECKN = JBYT (IQ(L),1,15)                                        -MSK
C     JDECKN = IQ(L) .AND. 32767                                         MSKC
      IDDEPD(1)= IQ(L+1)
      IDDEPD(2)= IQ(L+2)                                                -A8M
      L = IQ(L-1)
      IDDEPP(1)= IQ(L+2)
      IDDEPP(2)= IQ(L+3)                                                -A8M
      RETURN
 
C--                SUPPRESS LIST OUTPUT
 
   91 IDDEPP(1)= 0
      RETURN
      END
C====================================================================
CDECK  ID>, DEPMSG.
      SUBROUTINE DEPMSG
 
C-    SET UP (WARNING) MESSAGE READY FOR LISTING
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
                                 DIMENSION     IQMSQ(99),IQCC(99)
                                 EQUIVALENCE  (IQMSQ(1), IQCC(3), IQ(6))
C--------------    END CDE                             -----------------  ------
 
C     EQUIVALENCE (LEADCC,LEAD(3))                                      A5,A10
C     EQUIVALENCE (LEADCC,LEAD(5))                                      A8
      EQUIVALENCE (LEADCC,LEAD(1))                                      A4,A6
 
C-    LDPACT.EQ.0 :  SELF-MATERIAL
C-                   JDPACT.EQ.0  READY LAST CONTROL-CARD FOR PRINTING
C-                   JDPACT.NE.0  READY MISSING-SEQUENCE MESSAGE
C-                                NVUTY(11) HAS SEQUENCE-NAME
 
C-    LDPACT.NE.0 :  FOREIGN MATERIAL, NVDEP(13) HAS C/C OF MATERIAL
C-                                     NVDEP(13)-1 IS C/C OF CONTR.-CARD
C-                   JDPACT=1    READY SEQUENCE MESSAGE, IDDEPZ HAS NAME
C-                               MDEPAR.LT.0  ZERO-CARD SEQUENCE
C-                               MDEPAR.GT.0  MISSING SEQ CALLED
C-                   JDPACT=2-5  READY ACTION-NATURE FOR PRINTING
C-                               (POSSIBLY NIL-ACTION, CLASH-WARNING)
 
      DIMENSION    KIMA2(2),KIMA3(2),KIMA4(2),KIMA5(2),KIMA8(2)
 
      EQUIVALENCE    (KIMA2(1),KIMA(3)),   (KIMA3(1),KIMA(5))
     +,              (KIMA4(1),KIMA(6)),   (KIMA5(1),KIMA(10))
     +,              (KIMA6,   KIMA(15)),  (KIMA7,   KIMA(18))
     +,              (KIMACT,  KIMA(16)),  (KIMA8(1),KIMA(19))
      DIMENSION    MSGMIS(3), MSGBPD(5), MSGURF(4)
 
C     DIMENSION    MSGBIF(1), MSGDEL(1), MSGCLA(1), MSGSTA(1)            A8M
      DIMENSION    MSGBIF(2), MSGDEL(2), MSGCLA(2), MSGSTA(2)           -A8M
      DIMENSION    IONE(4), IACT(5)
 
      DATA  MSGMIS /4HMISS,4HING ,4HZ=  /
      DATA  MSGBPD /4H    ,4HBY P,4H=   ,4H    ,4H  D=/
      DATA  MSGURF /4H****,4H    ,4H* U/,4HREF /
 
      DATA  MSGBIF /4HBY I,4HF   /
      DATA  MSGDEL /4HDELE,4HTED /
      DATA  MSGCLA /4HCLAS,4HH LV/
      DATA  MSGSTA /4H****,4H****/
 
      DATA   IONE  /    4H****, 4HDO  , 4HNIL , 4HSKIP/
C     DATA   IACT  /8H    Z = , 4HDEL,, 4HREP,, 4HADB,, 4HADD, /         A8M
      DATA   IACT  /    4H Z= , 4HDEL,, 4HREP,, 4HADB,, 4HADD, /        -A8M
 
 
 
      LDPMAT   = 0
      NVDEP(12)= 1
      CALL VBLANK (KIMA(1),KDNWT)
      IF (LDPACT.NE.0)       GO TO 31
 
C-------           LDPACT=0,  SELF MATERIAL
 
      NVDEP(13)= JCARD - 1
      IF (JDPACT.NE.0)       GO TO 21
 
C--                READY FOR LAST C/C
 
      IDDEPP(1)= 0
      CALL UBUNCH (KARDCC,KIMA(1),NCHCCT)
      NVDEPL(3)= JCARD
      JDPMKT(1)= IQPLUS
      JDPMKT(2)= IQBLAN
      IF   (JCCTYP)          12,15,17
   12 IF (JCCTYP+2)          14,16,13
   13 JDPMKT(1)= IQDOT
   14 RETURN
 
   15 JDPMKT(1)= IQEQU
      RETURN
 
   16 IF (NCCPIF+NCCPZ.EQ.0) RETURN
      GO TO 19
 
   17 IF (NVUTY(10).NE.0)  JDPMKT(1)=IQOPEN
      IF (NVUTY(9) .NE.0)  JDPMKT(2)=IQMINS
   19 LEADCC = IQNUM(1)
      NQUSED = NQUSED + 1
      NVDEPL(5) = 3
      RETURN
 
 
C--                MISSING SEQUENCE
 
   21 KIMA8(1)= NVUTY(11)
      KIMA8(2)= NVUTY(12)                                               -A8M
      JDECKN   = NVWARN(2)
      IDDEPP(1)= MSGSTA(1)
      IDDEPP(2)= MSGSTA(2)                                              -A8M
      IDDEPD(1)= MSGSTA(1)
      IDDEPD(2)= MSGSTA(2)                                              -A8M
      MMLEV = IQBLAN
      MMACT = IQBLAN
 
   24 IF (MDEPAR.EQ.6)       GO TO 71
C     CALL VFILL (KIMA(1), 7,MSGSTA(1))                                  A8M
C     CALL VFILL (KIMA(1),10,MSGSTA(1))                                  A6,A5
      CALL VFILL (KIMA(1),14,MSGSTA(1))                                  A4
      CALL VBLANK (IQUEST(1),10)
      CALL SETNUM (NVWARN(2),IQUEST(11),IQUEST(4))
      IQUEST(9) = IQSTAR
      CALL UBLOW  (MSGMIS(1),IQUEST(11),10)
C     CALL UBUNCH (IQUEST(1),KIMA6,20)                                   A10,A5
      CALL UBUNCH (IQUEST(5),KIMA6,16)                                   A8,A4
C     CALL UBUNCH (IQUEST(3),KIMA6,18)                                   A6
      IDDEPZ(1)= MSGSTA(1)
      IDDEPZ(2)= MSGSTA(2)                                              -A8M
      JDPMKT(1)= IQSTAR
      JDPMKT(2)= IQBLAN
      RETURN
 
 
C-------           LDPACT NON-ZERO, FOREIGN MATERIAL
 
   31 NVDEP(13)= NVDEP(13) - 1
      IF (JDPACT.NE.1)       GO TO 41
 
C--                JDPACT=1, SEQUENCE
 
      KIMA8(1)= IDDEPZ(1)
      KIMA8(2)= IDDEPZ(2)                                               -A8M
      IF (MDEPAR.GE.0)       GO TO 24
      KIMA(1) = IONE(2)
      KIMA7   = IACT(1)
      RETURN
 
C--                JDPACT = 2,3,4,5   ACTION CARD-COUNT PARAMETERS
 
   41 CALL VBLANK (IQUEST(5),14)
      CALL UBLOW (IACT(JDPACT),IQUEST(1),4)
      IQUEST(6)= IQLETT(3)
      IQUEST(7)= IQEQU
      J = IQCC(LDPACT)
      IF (JDPACT.EQ.5)  J=J-1
      CALL SETNUM (J,IQUEST(21),IQUEST(8))
      IF (JDPACT.GE.4)       GO TO 43
      IQUEST(13)= IQMINS
      CALL SETNUM (IQCC(LDPACT+1),IQUEST(21),IQUEST(14))
   43 IQUEST(19)= IQDOT
      CALL ULEFT (IQUEST(1),8,19)
      CALL UBUNCH (IQUEST(1),KIMACT,19)
      IF (MDEPAR.EQ.6)       GO TO 72
      J = JBYT (IQ(LDPACT),10,2)
      IF (J.EQ.3)  J=1
      KIMA(1)= IONE(J+2)
      IF (J.NE.1)            GO TO 61
 
C--                NIL ACTION
 
      KIMA2(1)= MSGDEL(1)
      KIMA2(2)= MSGDEL(2)                                               -A8M
      L = IQ(LDPACT-2)
      IF (L.NE.0)            GO TO 47
      KIMA4(1)= MSGBIF(1)
      KIMA4(2)= MSGBIF(2)                                               -A8M
      RETURN
 
   47 J = IQ(L-1)
      CALL UBLOW  (MSGBPD(1),IQUEST(1),20)
   48 CALL UBLOW  (IQ(J+2),IQUEST(10),8)
C     CALL UBUNCH (IQUEST(1),KIMA4(1),20)                                A10,A5
      CALL UBUNCH (IQUEST(5),KIMA4(1),16)                                A4,A8
C     CALL UBUNCH (IQUEST(3),KIMA4(1),18)                                A6
      KIMA5(1)= IQ(L+1)
      KIMA5(2)= IQ(L+2)                                                 -A8M
      RETURN
 
 
C--                CLASH WARNING
 
   61 J = JBYT (IQ(LDPACT),13,3)
      IF (J.EQ.0)            RETURN
      J = MIN  (J,2)
      NVWARN(J+4) = NVWARN(J+4) + 1
      KIMA2(1)= MSGCLA(1)
      KIMA2(2)= MSGCLA(2)                                               -A8M
      CALL SETNUM (NVWARN(J+4),IQUEST(11),IQUEST(2))
      IQUEST(1) = IQNUM(J+1)
      IQUEST(7) = IQSTAR
      CALL UBUNCH (IQUEST(1),KIMA3(1),7)
      IF   (J.EQ.1)          GO TO 68
      IDDEPZ(1)= MSGSTA(1)
      IDDEPZ(2)= MSGSTA(2)                                              -A8M
   68 KIMA5(1) = MSGSTA(1)
      KIMA5(2) = MSGSTA(2)                                              -A8M
      RETURN
 
C----              UREF, UNSATISFIED REFERENCE
 
   71 KIMA7 = IACT(1)
   72 NVWARN(4) = NVWARN(4) + 1
      CALL UBLOW  (MSGURF(1),IQUEST(1),15)
      CALL SETNUM (NVWARN(4),IQUEST(21),IQUEST(4))
      CALL UBUNCH (IQUEST(1),KIMA(1),15)
      IDDEPZ(1)= MSGSTA(1)
      IDDEPZ(2)= MSGSTA(2)                                              -A8M
      J = LEXP
      L = LEXD
      CALL UBLOW  (MSGBPD(1),IQUEST(1),20)
      IQUEST(5) = IQLETT(20)
      IQUEST(6) = IQLETT(15)
      GO TO 48
      END
C====================================================================
CDECK  ID>, DPEXE.
      SUBROUTINE DPEXE
 
C-    +EXE  OUTPUT FOR A BUNCH OF CARDS, CALLED FROM DEPART
C-                 NEEDS LDPMAT, NVDEP(12)
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LASM,NVDEP(2)), (LUNASM,NVDEP(3))
      CHARACTER    CHIMA*80
      EQUIVALENCE (CHIMA,KIMA)
 
      IF (NVDEP(1).EQ.0)     GO TO 71
   11 LTK   = LDPMAT
      NCD   = NVDEP(12)
      NVDEP(1)= NVDEP(1) + NCD
 
      DO 24  JJ=1,NCD
      CALL KDCOPY (IQ(LTK))
      N  = LNBLNK (CHIMA(1:IQCHAW*NWTK))
      IF (N.NE.0)  THEN
          WRITE (LUNASM, 9024) CHIMA(1:N)
        ELSE
          WRITE (LUNASM, 9024)
        ENDIF
 9024 FORMAT (A)
   24 CONTINUE
      RETURN
 
C----              NEW DECK, START ASM IF VERY FIRST
 
   71 CALL DPEXGO
      GO TO 11
 
      END
C====================================================================
CDECK  ID>, DPEXGO.
      SUBROUTINE DPEXGO
 
C-    DPEXE/DPMIX  READY TO WRITE FIRST CARD OF NEW ROUTINE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
      EQUIVALENCE(LSASM,LADRV(8)),  (LRBIG,LADRV(13)), (LRPAM,LADRV(14))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LASM,NVDEP(2)), (LUNASM,NVDEP(3))
 
 
C--                ACTION  IF FIRST DECK ON THIS STREAM
 
      IF (IQ(LASM+2).GE.0)   GO TO 31
      J = IQ(LASM+1)
      L = IQ(LSASM-J)
      IF (IQ(L+2).GE.0)      GO TO 24
      CALL IOFILE (324,IQ(L+5))
C-                 324 = 4 CARDS, 64 OUTPUT, 256 INITIAL
      IQ(L+2)    = 0
   24 IQ(LASM+2) = 0
      IQ(LASM+5) = IQ(L+5)
 
   31 LUNASM = IQ(LASM+5)
      IQ(LASM+3)= IQ(LASM+3) + 1
C     IQ(LEXP+1)= IQ(LEXP+1) .OR. 4                                      MSKC
      CALL SBIT1 (IQ(LEXP+1),3)                                         -MSK
      L = IQ(LASM-1)
      IF (L.EQ.0)            RETURN
      IF (NVOPER(3).NE.0)    RETURN
 
 
C--                WRITE ROUTINE HEADER CARD IF NEEDED
 
      NCH  = IQ(L+1)
      NCH2 = IQ(L+2)
      IF (NCH.NE.0)  CALL UBLOW (IQ(L+4),MWKX(1),NCH)
      IF (NCH2.LT.0)         GO TO 41
      CALL UBLOW (NVDEP(7),MWKX(NCH+1),8)
      NCH = NCH + 9
   36 NCH = NCH - 1
      IF (MWKX(NCH).EQ.IQBLAN)  GO TO 36
      IF (NCH2.EQ.0)         GO TO 41
      J = L + IQ(L+3)
      CALL UBLOW (IQ(J),MWKX(NCH+1),NCH2)
      NCH = NCH + NCH2
 
   41 CALL UBUNCH (MWKX(1),KIMA(1),NCH)
      N = (NCH-1)/IQCHAW + 1
      CALL XOUTCF (LUNASM,KIMA(1),N)
      NVDEP(1) = 1
      RETURN
 
      END
C====================================================================
CDECK  ID>, DPMIX.
      SUBROUTINE DPMIX
 
C-    +MIX  OUTPUT FOR A BUNCH OF CARDS, CALLED FROM DEPART
C-                 NEEDS  LDPMAT, NVDEP(12-13)
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    NUMVAL(9)
      EQUIVALENCE (NUMVAL(1),IQNUM(2))
      EQUIVALENCE (LASM,NVDEP(2)), (LUNASM,NVDEP(3))
 
      DIMENSION    MMNUM(5),MMBCD(5),MTAILX(9)
      EQUIVALENCE (MMNUM(1),KNUMM(1)), (MMBCD(1),MTAIL(4))
 
      EQUIVALENCE (MTAILX(1),MTAIL(1)), (KIMATL,KIMAPS(1))              -A6
C     EQUIVALENCE (MTAILX(3),MTAIL(1)), (KIMATL,KIMA(14))                A6
 
      DIMENSION    KIMAX(22),KIMAV(29)                                   A4
C     DIMENSION    KIMAX(18),KIMAV(23)                                   A5
C     DIMENSION    KIMAX(15),KIMAV(20)                                   A6
C     DIMENSION    KIMAX(11),KIMAV(15)                                   A8
C     DIMENSION    KIMAX(9), KIMAV(12)                                   A10
      EQUIVALENCE (KIMAX(1), KIMAV(1),  KIMA(1))
 
 
      IF (NVDEP(1).EQ.0)     GO TO 71
   11 NCD   = NVDEP(12)
      LTK   = LDPMAT
      NVDEP(1)= NVDEP(1) + NCD
 
C--                CONSTRUCT TAIL OF FIRST CARD
 
      CALL SETNUM (NVDEP(13),MMNUM(1),MMBCD(1))
      MTAIL(2) = JDPMKT(1)
      MTAIL(3) = JDPMKT(2)
      NCH = 8
      IF (IDDEPP(1).EQ.0)    GO TO 31
      IF (IDDEPZ(1).EQ.0)    GO TO 26
      MTAIL(9) = IQBLAN
      CALL UBLOW (IDDEPZ(1),MTAIL(10),8)
      NCH = 17
 
   26 IF (IDDEPD(1).EQ.IQBLAN)  GO TO 28
      MTAIL(NCH+1)= IQDOT
      CALL UBLOW (IDDEPD(1),MTAIL(NCH+2),8)
      NCH = NCH + 9
 
   28 MTAIL(NCH+1) = IQEQU
      CALL UBLOW (IDDEPP(1),MTAIL(NCH+2),8)
      NCH = NCH + 9
 
C--                WRITE FIRST CARD
 
   31 CALL KDFILL (IQ(LTK))
C     CALL UBLOW (KIMA(14),MTAILX(1),2)                                  A6
C     NCH = NCH + 2                                                      A6
      CALL UBUNCH (MTAILX(1),KIMATL,NCH)
      NW = (NCH+79)/ 4  + 1                                              A4
C     NW = (NCH+79)/ 5  + 1                                              A5
C     NW = (NCH+77)/ 6  + 1                                              A6
C     NW = (NCH+79)/ 8  + 1                                              A8
C     NW = (NCH+79)/ 10 + 1                                              A10
      CALL XOUTCF (LUNASM,KIMAV(1),NW)
      MTAIL(2) = JDPMK(1)
      MTAIL(3) = JDPMK(2)
 
 
C-----             WRITE FURTHER CARDS
 
   41 NCD = NCD - 1
      IF (NCD.EQ.0)          RETURN
      N = MMNUM(5) + 1
      IF (N.EQ.10)           GO TO 51
      MMNUM(5)= N
      MMBCD(5)= NUMVAL(N)
 
   44 CALL KDFILL (IQ(LTK))
C     CALL UBLOW  (KIMA(14),MTAILX(1),2)                                 A6
C     CALL UBUNCH (MTAILX(1),KIMATL,10)                                  A6
      CALL UBUNCH (MTAILX(1),KIMATL,8)                                  -A6
      WRITE (LUNASM,9001) KIMAX
      GO TO 41
 
C--                CARD COUNT CARRY
 
   51 MMNUM(5)= 0
      MMBCD(5)= IQNUM(1)
      N = MMNUM(4) + 1
      IF (N.EQ.10)           GO TO 52
      MMNUM(4)= N
      MMBCD(4)= NUMVAL(N)
      GO TO 44
 
   52 JS = 4
   53 MMNUM(JS)= 0
      MMBCD(JS)= IQNUM(1)
      JS = JS - 1
      N  = MMNUM(JS) + 1
      IF (JS.EQ.1)           GO TO 54                                   -A8
C     IF (JS.EQ.2)           GO TO 54                                    A8
      IF (N.EQ.10)           GO TO 53
   54 MMNUM(JS)= N
      MMBCD(JS)= NUMVAL(N)
      GO TO 44
 
C----              NEW DECK, START ASM IF VERY FIRST
 
   71 CALL DPEXGO
      GO TO 11
 
 9001 FORMAT (29A4)                                                      A4
C9001 FORMAT (23A5)                                                      A5
C9001 FORMAT (19A6,A2)                                                   A6
C9001 FORMAT (14A8,A4)                                                   A8
C9001 FORMAT (11A10,A6)                                                  A10
      END
C====================================================================
CDECK  ID>, DPLIST.
      SUBROUTINE DPLIST
 
C-    +LIST OUTPUT FOR A BUNCH OF CARDS, CALLED FROM DEPART
C-                 NEEDS  LDPMAT, NVDEP(12-13)
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    NUMVAL(9)
      EQUIVALENCE (NUMVAL(1),IQNUM(2))
      DIMENSION    MMNUM(5),MMBCD(5),MARK(3),LTAILS(3),LTAILX(9)
      EQUIVALENCE (MMNUM(1),KNUM(1))
      EQUIVALENCE (MMBCD(1),LEAD(5)),(MARK(1),LEAD(10))
      EQUIVALENCE (MDEC,LTAIL(1)),(LTAILP,LTAIL(7)),(LTAILD,LTAIL(16))
     +,           (LTAILS(1),LTAIL(25)),(LTAILZ,LTAIL(28))
      EQUIVALENCE (LTAILX(1),LTAIL(1)), (KIMATL,KIMAPS(1))              -A6
C     EQUIVALENCE (LTAILX(3),LTAIL(1)), (KIMATL,KIMA(14))                A6
      DIMENSION    KIMAX(23),KIMAV(32)                                   A4
C     DIMENSION    KIMAX(18),KIMAV(25)                                   A5
C     DIMENSION    KIMAX(16),KIMAV(22)                                   A6
C     DIMENSION    KIMAX(11),KIMAV(16)                                   A8
C     DIMENSION    KIMAX(9), KIMAV(13)                                   A10
      EQUIVALENCE (KIMAX(1), KIMAV(1),  KIMAPR(1))
 
 
      CALL DPPAGE
      LTK   = LDPMAT
      NCD   = NVDEP(12)
      NVDEPL(1)= NVDEPL(1) + NCD
 
C--                READY CARD-COUNT FOR FIRST CARD
 
      MARK(2) = JDPMKT(1)
      MARK(1) = JDPMKT(2)
      CALL SETNUM (NVDEP(13),MMNUM(1),MMBCD(1))
C     CALL UBUNCH (LEAD(3),KIMAPR(1),10)                                A5,A10
C     CALL UBUNCH (LEAD(5),KIMAPR(1),8)                                 A8
      CALL UBUNCH (LEAD(1),KIMAPR(1),12)                                A4,A6
      MARK(2) = JDPMK(1)
      MARK(1) = JDPMK(2)
      IF (IDDEPP(1).EQ.0)    GO TO 31
 
C-------           WRITE FIRST CARD WITH TAIL
 
      IF (LDPMAT.NE.0)       CALL KDFILL (IQ(LTK))
      IF (JDECKN.EQ.JDEC)    GO TO 24
      JDEC = JDECKN
      CALL SETNUM (JDEC,KDEC(1),MDEC)
   24 CALL UBLOW (IDDEPP(1),LTAILP,8)
      CALL UBLOW (IDDEPD(1),LTAILD,8)
      LTAILS(1)= MMLEV
      LTAILS(2)= MMACT
      IF (IDDEPZ(1).EQ.0)    GO TO 25
      CALL UBLOW (IDDEPZ(1),LTAILZ,8)
      NCH = 35
      NW  = 32                                                           A4
C     NW  = 25                                                           A5
C     NW  = 22                                                           A6
C     NW  = 16                                                           A8
C     NW  = 13                                                           A10
      GO TO 26
 
   25 NCH = 26
      NW  = 30                                                           A4
C     NW  = 24                                                           A5
C     NW  = 20                                                           A6
C     NW  = 15                                                           A8
C     NW  = 12                                                           A10
   26 CONTINUE
C     CALL UBLOW (KIMA(14),LTAILX(1),2)                                  A6
C     NCH = NCH + 2                                                      A6
      CALL UBUNCH (LTAILX(1),KIMATL,NCH)
      GO TO 48
 
 
C-----             WRITE FIRST CARD WITHOUT TAIL
 
   31 IF (LDPMAT.NE.0)       GO TO 47
      WRITE (IQPRNT,9001) KIMAX
      NQUSED= NQUSED + 1
      RETURN
 
C-------           WRITE FURTHER CARDS
 
   42 N = MMNUM(5) + 1
      IF (N.EQ.10)           GO TO 51
      MMNUM(5)= N
      MMBCD(5)= NUMVAL(N)
C  44 CALL UBUNCH (LEAD(3),KIMAPR(1),10)                                A5,A10
C  44 CALL UBUNCH (LEAD(5),KIMAPR(1),8)                                 A8
   44 CALL UBUNCH (LEAD(1),KIMAPR(1),12)                                A4,A6
      IF (NQUSED.GE.NQLNOR)   CALL DPPAGE
   47 CALL KDCOPY (IQ(LTK))
      NW = NWTK + 3                                                      A4
C     NW = NWTK + 2                                                      A5,A6
C     NW = NWTK + 1                                                      A8M
   48 NQUSED= NQUSED + 1
      CALL XOUTCF (IQPRNT,KIMAV(1),NW)
      NCD = NCD - 1
      IF (NCD.NE.0)          GO TO 42
      RETURN
 
C--                CARD COUNT CARRY
 
   51 MMNUM(5)= 0
      MMBCD(5)= IQNUM(1)
      N = MMNUM(4) + 1
      IF (N.EQ.10)           GO TO 52
      MMNUM(4)= N
      MMBCD(4)= NUMVAL(N)
      GO TO 44
 
   52 JS = 4
   53 MMNUM(JS)= 0
      MMBCD(JS)= IQNUM(1)
      JS = JS - 1
      N  = MMNUM(JS) + 1
      IF (JS.EQ.1)           GO TO 54                                   -A8
C     IF (JS.EQ.2)           GO TO 54                                    A8
      IF (N.EQ.10)           GO TO 53
   54 MMNUM(JS)= N
      MMBCD(JS)= NUMVAL(N)
      GO TO 44
 
 9001 FORMAT (32A4)                                                      A4
C9001 FORMAT (25A5)                                                      A5
C9001 FORMAT (22A6)                                                      A6
C9001 FORMAT (16A8)                                                      A8
C9001 FORMAT (13A10)                                                     A10
      END
C====================================================================
CDECK  ID>, DPPAGE.
      SUBROUTINE DPPAGE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /DPWORK/JDPMKT(2),JDPMK(2),JDECKN,MMLEV,MMACT, LEAD(14)
     +,              MTAIL(36),LTAIL(36), IDDEPP(2),IDDEPD(2),IDDEPZ(2)
     +,              JNUMM,KNUMM(5), JDEC,KDEC(5), JNUM,KNUM(5)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDARRV(1)), (IDP(1),IDARRV(3)), (IDF(1),IDARRV(5))
C--------------    END CDE                             -----------------  ------
 
C     EQUIVALENCE (LEADCC,LEAD(3))                                      A5,A10
C     EQUIVALENCE (LEADCC,LEAD(5))                                      A8
      EQUIVALENCE (LEADCC,LEAD(1))                                      A4,A6
 
 9001 FORMAT                (1H1,I4,61X,3H P=,2A4,3H D=,2A4,1X,I2,
     F21X,4HPAGE,I4/1X)
 9002 FORMAT (1X/1X,I4,A5,A4,2X,50(1H=),3H P=,2A4,3H D=,2A4,4H  1 ,
     F28(1H=)/1X)
 9003 FORMAT   (1H1,I4,A5,A4,2X,50(1H=),3H P=,2A4,3H D=,2A4,4H  1 ,
     F19(1H=),5H PAGE,I4/1X)
 
 
C------            DECK WITH +LIST SELECTION
 
      NLU = NQUSED
      IF (NVDEPL(5).EQ.0)    GO TO 16
      IF (NVDEPL(5).GE.0)    GO TO 11
      NLU = NLU + MAX (NVDEPL(5),NQLNOR-NQLMAX)
      GO TO 12
   11 NLU = NLU + MIN (NVDEPL(5),3)
   12 NVDEPL(5) = 0
   16 IF (NVDEPL(1).EQ.0)    GO TO 21
 
C--                NEW PAGE, NOT FIRST OF CURRENT DECK
 
   18 IF (NLU.LT.NQLNOR)     RETURN
      IF (NQUSED.GT.NQLMAX)  GO TO 29
      NQPAGE(2)= NQPAGE(2) + 1
      WRITE (IQPRNT,9001) NDECKR,IDP,IDD,IQPAGE,NQPAGE(2)
      IQPAGE= IQPAGE + 1
      NQUSED= NQLPTH + 2
      LEADCC= IQBLAN
      RETURN
 
C-------           PAGE 1 FOR DECK WITH +LIST SELECTION
 
   21 IF (MEXDEC(4).EQ.0)            GO TO 41
      IF (MOPTIO(3)+NVDEPL(4).NE.0)  GO TO 24
      IF (NVDEPL(2).GE.12)           GO TO 27
 
C--                PAGE 1 WITHOUT EJECT
 
   24 MARG = 12
   25 IF (NLU+MARG.GE.NQLNOR)  GO TO 27
      WRITE (IQPRNT,9002) NDECKR,IDF,IDP,IDD
      NQUSED= NQUSED + 3
      IQPAGE= 2
      NVDEPL(1)= 1
      RETURN
 
C--                PAGE 1 WITH EJECT
 
   27 IF (NQUSED.GT.NQLMAX)  GO TO 29
      NQPAGE(2) = NQPAGE(2) + 1
      WRITE (IQPRNT,9003) NDECKR,IDF,IDP,IDD,NQPAGE(2)
      NQUSED= NQLPTH + 2
      IQPAGE= 2
      NVDEPL(1)= 1
      RETURN
 
   29 NQUSED = NQUSED - NQLMAX
      NLU    = NLU    - NQLMAX
      GO TO 16
 
C-------           PAGE 1 FOR DECK WITHOUT +LIST, MESSAGE PRINT
 
   41 MARG = 6
      GO TO 25
      END
C====================================================================
CDECK  ID>, CCPROC.
      SUBROUTINE CCPROC
 
C-    FINISH CONTROL-CARD PROCESSING OF CCKRAK FOR PATCHY
 
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
 
 
 
C----              EVALUATE TRUTH-VALUE AND EXE-BITS FOR  IF-PARAMETERS
 
C--   EXE-BITS COMBINATION, E.G. FOR   IF=A,B, IF=C.
C-    FOR YES -    (A.AND.B)  .OR. C
C-    FOR NO  -    (A .OR.B) .AND. C
 
      IF (MOPTIO(25).NE.0)   RETURN
      MTY = 0
      MTN = 15
      MTU = 1
      L   = JCCPIF
      JSEP= MCCPAR(L)
 
 
C--                START NEW AND-GROUP
 
   21 MLY = 15
      MLN = 0
      MLU = 0
 
C--                NEXT PARAMETER
 
   22 IQ(LPAST-1) = LQUSER(7)
C     LCRP= LQFIND   (MCCPAR(L+1),2,KADRV(8),NVUTY(1))                   A8M
      LCRP= LQLONG (2,MCCPAR(L+1),2,KADRV(8),NVUTY(1))                  -A8M
      IF (LCRP.NE.0)         GO TO 24
      NVUTY(6) = -7
      CALL CREAPD (MCCPAR(L+1),1)
 
   24 CALL SBIT1 (IQ(LCRP+1),6)                                         -MSK
C  24 IQ(LCRP+1)= IQ(LCRP+1) .OR. 32                                     MSKC
      M   = IQ(LCRP)
      IF (JBIT (M,5).EQ.0)   JSEP=-JSEP                                 -MSK
C     IF ((M.AND.16).EQ.0)   JSEP=-JSEP                                  MSKC
      IF (JSEP.LT.0)         GO TO 26
 
      MLU = 1
   26 MLY = JBYTET (M,MLY,1,5)                                          -MSK
C  26 MLY = MLY .AND. M                                                  MSKC
      CALL SBYTOR (M,MLN,1,5)                                           -MSK
C     MLN = MLN .OR.  M                                                  MSKC
      L   = L+3
      JSEP= MCCPAR(L)
      IF (IABS(JSEP).EQ.1)   GO TO 22
      CALL SBYTOR (MLY,MTY,1,5)                                         -MSK
C     MTY = MTY .OR.  MLY                                                MSKC
      MTN = JBYTET (MLN,MTN,1,5)                                        -MSK
C     MTN = MTN .AND. MLN                                                MSKC
      MTU = MIN  (MTU,MLU)
      IF (JSEP.NE.0)         GO TO 21
 
C--                FINISHED
 
      IF (MTU.EQ.0)          GO TO 34
      MXCCIF = MTY
      RETURN
 
   34 MXCCIF = MTN
      JCCIFV = 7
      RETURN
      END
C====================================================================
CDECK  ID>, CREAPD.
      SUBROUTINE CREAPD (IDXPP,IDXPD)
 
C-    LOCATE OR CREATE FOR (IDXP,IDXD)   BANKS 'PAT', 'HDEC', 'DECK'
C-                                       AT     LCRP,  LCRH,   LCRD
C-                 IF  IDXP=0  USE EXISTING LCRP
C-                 IF  IDXD=0  NO 'DECK' PLEASE, RETURN LCRD=0
C-                 IF  IDXD=1  NO 'HDECK', NO 'DECK',  RETURN LCRD=0
 
C-    Linkage control :
C-           NVUTY(6)  -ve  create without search
C-                       0  normal search and creation
C-                     +ve  result linked at LEXP
 
      COMMON /NAMES/ NAMEP(4),NAMEH(4),NAMED(4),NAMEOR(4),NAMACT(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      EQUIVALENCE(LPAST,LADRV(1)),  (LPCRA,LADRV(2)), (LDCRAB,LADRV(3))
     +,           (LCRP,NVUTY(3)),   (LCRH,NVUTY(4)),   (LCRD,NVUTY(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    IDXPP(9), IDXPD(9)
C     DIMENSION     IDXP(1),  IDXD(1)                                    A8M
      DIMENSION     IDXP(2),  IDXD(2)                                   -A8M
 
 
      IDXP(1) = IDXPP(1)
      IDXP(2) = IDXPP(2)                                                -A8M
      IDXD(1) = IDXPD(1)
      IDXD(2) = IDXPD(2)                                                -A8M
 
 
C------            FIND OR CREATE PAT-BANK
 
      IF (IDXP(1).EQ.0)      GO TO 41
      L = 0
      K = LEXP-1
      IF (NVUTY(6))          32,21,16
   16 K = KADRV(8)
 
C--                FIND 'FUTURE PAT'-BANK PRE-EXISTING
 
   21 IQ(LPAST-1) = 0
C     LCRP = LQFIND   (IDXP(1),2,KADRV(8),NVUTY(1))                      A8M
      LCRP = LQLONG (2,IDXP(1),2,KADRV(8),NVUTY(1))                     -A8M
      IF (LCRP.EQ.0)         GO TO 31
      IF (NVUTY(6).EQ.0)     GO TO 41
      CALL QSHUNT (NVUTY(1),0,K,0)
      GO TO 38
 
C--                FIND PRE-EXISTING  'PAST PAT'-BANK
 
C-                           LQUSER(7) SUPPORTS 'PAST PAT'-STRUCTURE
C  31 L = LQFIND   (IDXP(1),2,7,NVUTY(1))                                A8M
   31 L = LQLONG (2,IDXP(1),2,7,NVUTY(1))                               -A8M
 
C--                CREATE NEW PAT-BANK
 
   32 NVUTY(7) = L
      CALL LIFTBK (LCRP,K,0,NAMEP(1),7)
      CALL  SBYT  (NVUSEB(2),IQ(LCRP),1,18)
      IQ(LCRP+1) = 0
      IQ(LCRP+2) = IDXP(1)
      IQ(LCRP+3) = IDXP(2)                                              -A8M
      IF (L.EQ.0)            GO TO 38
      CALL MXJOIN (IQ(L),IQ(LCRP))
      IQ(LCRP+1)= IQ(L+1)
      IQ(LCRP-2)= IQ(L-2)
      IQ(LCRP-3)= IQ(L-3)
      IQ(L-2)   = 0
      CALL SBIT0 (IQ(LCRP+1),1)
 
   38 NVUTY(1) = K
      NVUTY(6) = 0
 
 
C----              ENSURE ROLLED-IN HDEC-BANK, UNLESS  IDD=1
 
   41 IF (IDXD(1).EQ.1)      GO TO 57
      LCRH= IQ(LCRP-2)
      IF (LCRH.EQ.0)         GO TO 44
      IF (IQ(LCRH+1).GE.0)   GO TO 51
   44 CALL LIFTBK (LCRH,LCRP,-2,NAMEH(1),0)
      IQ(LCRH+1) = 0
 
C----              LOCATE DEC-BANK, UNLESS  IDD=0 (OR 1)
 
   51 IF (IDXD(1).EQ.0)      GO TO 57
C     LCRD = LQFIND   (IDXD(1),1,LCRH-2,NVUTY(2))                        A8M
      LCRD = LQLONG (2,IDXD(1),1,LCRH-2,NVUTY(2))                       -A8M
      IF (LCRD.NE.0)         RETURN
 
      CALL LIFTBK (LCRD,NVUTY(2),0,NAMED(1),0)
      CALL SBYT (IQ(LCRP),IQ(LCRD),1,18)
      IQ(LCRD+1) = IDXD(1)
      IQ(LCRD+2) = IDXD(2)                                              -A8M
      RETURN
 
   57 LCRD = 0
      RETURN
      END
C====================================================================
CDECK  ID>, CRDECO.
      SUBROUTINE CRDECO
 
C--   CREATE ORIGIN DECK BANK ODEC
 
      COMMON /NAMES/ NAMEP(4),NAMEH(4),NAMED(4),NAMEOR(4),NAMACT(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
 
      CALL LIFTBK (LDECO,0,0,NAMEOR(1),7)
      IQ(LDECO-1) = LEXP
      IQ(LDECO+1) = IDARRV(1)
      IQ(LDECO+2) = IDARRV(2)                                           -A8M
C     IQ(LDECO)   = IQ(LDECO) .OR. NDECKR                                MSKC
      CALL SBYT (NDECKR,IQ(LDECO),1,15)                                 -MSK
      RETURN
      END
C====================================================================
CDECK  ID>, LIFTRH.
      SUBROUTINE LIFTRH (NCH,LRHCP,JHIGH)
 
C-    Create Routine Header bank for the NCH characters long text
C-    given in MWK(1->NCH); the name-escape character is in MWKX(1).
C-    Create the bank low if JHIGH = 0, high if JHIGH > 0
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             --------------
      DIMENSION    LRHCP(9), MMRHC(4)
 
      DATA  MMRHC  /4HRHC ,0,0,2H**/
 
 
      NCH1 = IUFIND (MWKX(1),MWK(1),1,NCH) - 1
      NCH2 = NCH - NCH1 - 1
      LOC  = 0
      MMRHC(4)= 3
      IF (NCH1.NE.0)  MMRHC(4)=MMRHC(4) + (NCH1-1)/IQCHAW + 1
      IF (NCH2.LE.0)         GO TO 16
      LOC = MMRHC(4) + 1
      MMRHC(4) = LOC + (NCH2-1)/IQCHAW
 
   16 CALL LIFTBK (LRHC,0,0,MMRHC(1),JHIGH)
      IQ(LRHC+1) = NCH1
      IQ(LRHC+2) = NCH2
      IQ(LRHC+3) = LOC
      IF (NCH1.NE.0)  CALL UBUNCH (MWK(1),     IQ(LRHC+4),  NCH1)
      IF (NCH2.GT.0)  CALL UBUNCH (MWK(NCH1+2),IQ(LRHC+LOC),NCH2)
      LRHCP(1) = LRHC
      RETURN
      END
C====================================================================
CDECK  ID>, LOCSEQ.
      FUNCTION LOCSEQ (IDPAR,KP,KD,LINK,IFLAG)
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(14),LDPMAT,JDPMAT,LDPACT,JDPACT,NDPLEV,MDEPAR, NVDEPL(6)
     +, MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (L,NVUTY(13)), (KSQLOC,NVUTY(14))
      DIMENSION    IDPAR(9)
 
 
      NVUTY(11) = IDPAR(1)
      NVUTY(12) = IDPAR(2)                                              -A8M
      NVUTY(16) = 0
      IF (IFLAG.LT.0)        GO TO 21
 
C--                GLOBAL SET - IF IFLAG +VE OR 0
 
      CALL LOCSQ2 (KADRV(1))
      IF (L.EQ.0)            GO TO 21
      IF (LINK.NE.0)  IQ(LINK-2)=L
      IQ(KSQLOC)= IQ(L-1)
      IQ(L-1)   = LQUSER(6)
      LQUSER(6) = L
      KSQLOC= 6
   19 LOCSEQ= L
      RETURN
 
C--                PATCH-DIRECTED SET - IF KP NOT ZERO
 
   21 IF (KP.EQ.0)           GO TO 24
      CALL LOCSQ2 (KP)
      IF (L.NE.0)            GO TO 27
 
C--                DECK-DIRECTED SET - IF KD NOT ZERO
 
   24 IF (KD.EQ.0)           GO TO 31
      CALL LOCSQ2 (KD)
      IF (L.EQ.0)            GO TO 31
   27 IF (LINK.EQ.0)         GO TO 19
      IQ(LINK-2)= -L
      GO TO 19
 
C--                MISSING SEQUENCE - PRINT IF IFLAG = 0
 
   31 IF (IFLAG.NE.0)        GO TO 19
      NVWARN(2) = NVWARN(2) + 1
      IF (NVWARN(2).GE.61)   GO TO 19
      LDPACT= LINK
      MDEPAR= 3
      CALL DEPART
      LOCSEQ = 0
      RETURN
      END
C====================================================================
CDECK  ID>, LOCSQ2.
      SUBROUTINE LOCSQ2 (KPAR)
 
C-    SLAVE TO LOCSEQ
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (L,NVUTY(13)), (KSQLOC,NVUTY(14))
 
 
C     DATA  LOCID  /2/                                                   B60M
      DATA  LOCID  /3/                                                  -B60M
 
 
      K = KPAR
      KNIL = 0
   11 CONTINUE
C     L = LQFIND   (NVUTY(11),LOCID,K,KSQLOC)                            A8M
      L = LQLONG (2,NVUTY(11),LOCID,K,KSQLOC)                           -A8M
      IF (NVUTY(15).EQ.0)    RETURN
      IF (L.EQ.0)            RETURN
      IF (NVUTY(16).NE.0)    GO TO 21
   14 IF (JBIT(IQ(L),10) .NE.0)  GO TO 31                               -MSK
C  14 IF ((IQ(L).AND.512).NE.0)  GO TO 31                                MSKC
      RETURN
 
C--                NEW SEQ AFTER NIL-SEQ, DE-LINK & TRANSMIT EXE-BITS
 
   21 CALL SBYTOR (NVUTY(16),IQ(L),1,4)                                 -MSK
C  21 IQ(L) = IQ(L) .OR. (NVUTY(16).AND.15)                              MSKC
      NVUTY(16)= 0
      IF (KNIL.EQ.0)         GO TO 14
      IF (KSQLOC.EQ.K)  KSQLOC=KNIL
C-                           LQUSER(5) SUPPORTS GARBAGE-STRUCTURE
      CALL QSHUNT (KNIL,0,5,0)
      NVUTY(15)= NVUTY(15) - 1
      KNIL  = 0
      GO TO 14
 
C--                NIL-SEQ FOUND, SAVE EXE-BITS, FIND NEXT SEQ
 
   31 NVUTY(16)= IQ(L)
      KNIL= KSQLOC
      K   = L-1
      GO TO 11
      END
C====================================================================
CDECK  ID>, MXJOIN.
      SUBROUTINE MXJOIN (MPATP,MDECP)
 
      DIMENSION    MPATP(9), MDECP(9)
 
 
      MPAT = MPATP(1)
      MDEC = MDECP(1)
      MOR  = MDEC                                                       -MSK
      CALL   SBYTOR (MPAT,MOR, 1,18)                                    -MSK
      MAND = JBYTET (MPAT,MDEC,1,10)                                    -MSK
C     MOR  = MPAT .OR.  MDEC                                             MSKC
C     MAND = MPAT .AND. MDEC                                             MSKC
 
      MINH = JBYT        (MAND,6,5)
C     NEW  = MINH .AND. MOR                                              MSKC
      NEW  = JBYTET (MINH,MOR, 1,5)                                     -MSK
      MUSE = JBYTET (MINH,MOR, 11,4)
      MSEL = JBYTET (MINH,MOR, 15,4)
      CALL   SBYT   (MINH,NEW, 6,5)
      CALL   SBYT   (MUSE,NEW, 11,4)
      CALL   SBYT   (MSEL,NEW, 15,4)
      CALL   SBYT   (NEW, MDECP(1),1,18)
      RETURN
      END
C====================================================================
CDECK  ID>, MXNEW.
      FUNCTION MXNEW (MNEW,MDP)
 
 
      MGATE= JBYTET (MNEW,MDP,6,4)
      MOLD = JBYT (MDP,1,4)                                             -MSK
      MSUM = MOLD                                                       -MSK
      CALL SBYTOR (MGATE,MSUM,1,4)                                      -MSK
C     MOLD = MDP .AND. 15                                                MSKC
C     MSUM = MGATE .OR. MOLD                                             MSKC
      MXNEW= MSUM - MOLD
      RETURN
      END
C====================================================================
CDECK  ID>, MXSET.
      SUBROUTINE MXSET (MTR,MDEC)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    MV(4), MPAK5(2), MTR(9), MDEC(9)
      EQUIVALENCE (MX,IQUEST(11))
 
 
      DATA  MPAK5  /5,6/
 
 
      MXT = MTR(1)
      MXD = MDEC(1)
      CALL UPKBYT (MXD,1,MV(1),3,MPAK5(1))
      MV(4) = JBYT (MXD,15,4)
      IF (IQUEST(9) .NE.0)   GO TO 21
      IF (IQUEST(20).EQ.0)   GO TO 12
 
C--                ACTIVATION
 
      CALL SBYTOR (MX,MV(3),1,5)                                        -MSK
   12 CALL SBYTOR (MX,MV(4),1,5)                                        -MSK
      IF (IQUEST(15).NE.0)   GO TO 13                                   -MSK
      CALL SBYTOR (MX,MV(1),1,5)                                        -MSK
   13 IF (MXT.EQ.0)          GO TO 17                                   -MSK
      IF (MX.LT.16)          GO TO 17                                   -MSK
      CALL SBYTOR (MXT,MV(1),1,5)                                       -MSK
      CALL SBYTOR (MXT,MV(3),1,5)                                       -MSK
      CALL SBYTOR (MXT,MV(4),1,5)                                       -MSK
   17 MV(1) = JBYTET (MV(1),MV(2),1,5)                                  -MSK
      MV(3) = JBYTET (MV(3),MV(2),1,5)                                  -MSK
      MV(4) = JBYTET (MV(4),MV(2),1,5)                                  -MSK
 
C     MV(3) = MV(3) .OR. MX                                              MSKC
C  12 MV(4) = MV(4) .OR. MX                                              MSKC
C     IF (IQUEST(15).NE.0)   GO TO 13                                    MSKC
C     MV(1) = MV(1) .OR. MX                                              MSKC
C  13 IF (MXT.EQ.0)          GO TO 17                                    MSKC
C     IF (MX.LT.16)          GO TO 17                                    MSKC
C     MV(1) = MV(1) .OR. MXT                                             MSKC
C     MV(3) = MV(3) .OR. MXT                                             MSKC
C     MV(4) = MV(4) .OR. MXT                                             MSKC
C  17 MV(1) = MV(1) .AND. MV(2)                                          MSKC
C     MV(3) = MV(3) .AND. MV(2)                                          MSKC
C     MV(4) = MV(4) .AND. MV(2)                                          MSKC
 
      CALL PKBYT (MV(1),MXT,1,3,MPAK5(1))
      CALL SBYT  (MV(4),MXT,15,4)
      CALL SBYT  (MXT,MDEC(1),1,18)
      RETURN
 
C--                INHIBITION
 
   21 MXT   = 127 - MX
C     MV(2) = MV(2) .AND. MXT                                            MSKC
      MV(2) = JBYTET (MXT,MV(2),1,5)                                    -MSK
      GO TO 17
      END
C====================================================================
CDECK  ID>, YBCDEX.
      SUBROUTINE YBCDEX
 
C--        UNPACK BINARY PAM FILE AND PRODUCE CARD IMAGES
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CCHCH/ IFORPL,NOTHCC,MORGCC(6),MREPCC(6)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LUNEW,NVNEW(1))
      EQUIVALENCE (LSVARE,LADRV(9))
      CHARACTER    CHIMA*80
      EQUIVALENCE (CHIMA,KIMA)
 
 
 
      ICHCH = NOTHCC
      IF (IFORPL.NE.0)  ICHCH=7
 
      NPDH   = 0
      LPDH   = IQ(LSVARE-5)
      LUNPDH = IQ(LPDH)
      IF (MOPTIO(24).NE.0)   CALL AUXFIL (324,IQ(LPDH),4HPDH )
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
      IQ(LBUF+1) = 7
      IOTON = 256
 
C-----     START NEW PAM,  READ PAM HEADER RECORD
 
   21 JSV = IOTON
      CALL AUXFIL (0,NVOLD(1),4HPAM )
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 29
      IDOLDV(5) = NVARRI(5)
      IDOLDV(6) = NVARRI(6)                                             -A8M
 
      IOTON = JSV
      CALL AUXFIL (68,NVNEW(1),5HCARDS)
      WRITE (IQPRNT,9022) IDF
 
      IF (MOPTIO(20).NE.0)   GO TO 24
      IF (NVNEW(7).EQ.0)     GO TO 31
      IF (IOMODE(5).NE.0)    GO TO 31
   24 WRITE (LUNEW,9024)
      NRNEW  = 1
      GO TO 31
 
C----              EOI
 
   29 CALL AUXFIL (512,NVOLD(1),0)
      CALL AUXFIL (512,NVNEW(1),0)
      IF (NPDH.EQ.0)         RETURN
      IQ(LPDH+8) = NPDH
      CALL AUXFIL (512,IQ(LPDH),0)
      RETURN
 
 
C-------           READ RECORD BY RECORD AND WRITE CARDS
 
   31 CALL POPIN
      LTK = LINBIN + NVARRI(9)
      NCT = NVARRI(8)
      LOOK= NVARRI(3)
      IF ((MOPTIO(14).NE.0) .AND. (NVARRI(1).EQ.3))   GO TO 49
      IF (NCT.EQ.0)          GO TO 49
      IF (ICHCH.EQ.0)        GO TO 41
 
C----      UNPACK CARD BY CARD, WITH CONTROL-CARD CHAR. CONVERSION
 
      DO 36  I=1,NCT
      J  = JARTPX (IQ(LTK))
      CALL KDCOPY (IQ(LTK))
      N  = LNBLNK (CHIMA(1:IQCHAW*NWTK))
      IF (N.NE.0)  THEN
          WRITE (LUNEW,1000) CHIMA(1:N)
        ELSE
          WRITE (LUNEW,1000)
        ENDIF
 1000 FORMAT (A)
   36 CONTINUE
      GO TO 47
 
C----      UNPACK CARD BY CARD, WITHOUT CONTROL-CARD CHAR. CONVERSION
 
   41 CONTINUE
      IF (MOPTIO(24).EQ.0)   GO TO 43
      IF (NVARRI(1) .EQ.0)   GO TO 43
      LTKSV = LTK
      CALL KDCOPY (IQ(LTK))
      CALL XOUTCF (LUNPDH,KIMA(1),NWTK)
      NPDH = NPDH + 1
      LTK  = LTKSV
 
   43 DO 46  I=1,NCT
      CALL KDCOPY (IQ(LTK))
      N  = LNBLNK (CHIMA(1:IQCHAW*NWTK))
      IF (N.NE.0)  THEN
          WRITE (LUNEW,1000) CHIMA(1:N)
        ELSE
          WRITE (LUNEW,1000)
        ENDIF
   46 CONTINUE
 
   47 NRNEW = NRNEW + NCT
      IF (LTK-LINBIN.NE.IQ(LINBIN)+1)   GO TO 51
   48 IF (LOOK.EQ.0)         GO TO 31
      IF (MOPTIO(19).EQ.0)   GO TO 49
      WRITE (LUNEW,9047)
      NRNEW = NRNEW + 1
   49 IF (LOOK.EQ.3)         GO TO 21
      GO TO 31
 
C--                YTOBIN PACKING INCONSISTENCY
 
   51 WRITE (IQPRNT,9051) NDECKR
      GO TO 48
 
 
C9022 FORMAT (1X/11H ---- FILE ,A8/1X)                                   A8M
 9022 FORMAT (1X/11H ---- FILE ,A6,A4/1X)                               -A8M
 9024 FORMAT (7H+TITLE.)
 9047 FORMAT (5H+EOD.)
 9051 FORMAT (1X,3(/1X,44(1H*)),'   YTOBIN PACKING INCONSISTENCY DETECTE
     FD IN DECK',I6/1X)
      END
C====================================================================
CDECK  ID>, YBINEX.
      SUBROUTINE YBINEX
 
C-         CONVERT CARD-PAM TO COMPACT BINARY FORMAT
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      DATA  MMPAM  /4HPAM /
 
 
C----              INITIALISE
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
      CALL AUXFIL (260,NVOLD(1),5HCARDS)
      NVNEW(6) = MMPAM
 
      MODEPR = IQPLUS
      NDISCD = 0
      NTRUNC = 80 - 8*MOPTIO(20)
      MCCTOU = 7
 
C----              START NEW FILE
 
   10 NCARDP = 0
      JPDNEW = 3
      JCCTYP = 99
 
      CALL KDNEXT (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 96
      IF (NROLD.NE.0)  CALL AUXFIL (0,NVOLD(1),0)
      GO TO 41
 
C----              HUNTING FOR START OF NEW DECK
 
   20 NDISCD = NDISCD + 1
   21 CALL KDNEXT(KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 90
 
      JCCTYP = JARTPX (KDHOLD(1))
      IF (JCCTYP -  MCCTIT)  20,91,22
   22 IF (JCCTYP.GE.MCCEOD)  GO TO 20
 
      CALL CCKRAK (KDHOLD(1))
      IF (JCCBAD.NE.0)       GO TO 70
      IF (JCCTYP.GE.MCCEOD)  GO TO 20
      GO TO 44
 
C----              NORMAL LOOP FOR DECKS
 
   41 CALL PILEUP
      IF (NCHKD)             91,21,44
 
   44 JPDNEW = MCCDEF - JCCTYP
      IF (JPDNEW.NE.3)       GO TO 41
      GO TO 91
 
 
C----      BAD C/C, SKIP THIS CARD
 
   70 JC = NCARDP - NCDECK
      WRITE (IQPRNT,9058) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 20
 
C--        END OF FILE ON LUNPAM
 
   90 IF (NCHKD.EQ. -1)      GO TO 21
   91 IF (NCARDP.EQ.0)       GO TO 96
      NROLD = NCARDP
      IF (NCHKD.GE. -2)      GO TO 10
 
C--                EOI
 
   96 CALL AUXFIL (512,NVOLD(1),0)
      CALL POPREW
      IF (NDISCD+NVWARX(1).NE.0)  WRITE (IQPRNT,9098) NDISCD,NVWARX(1)
      RETURN
 
C9058 FORMAT (3H0P=,A8,   3H D=,A8,   3H C=,I6,16H *** FAULTY C/C ,72A1) A8M
C9058 FORMAT (3H0P=,A6,A2,3H D=,A6,A2,3H C=,I6,16H *** FAULTY C/C ,72A1) A6
C9058 FORMAT (3H0P=,A5,A3,3H D=,A5,A3,3H C=,I6,16H *** FAULTY C/C ,72A1) A5
 9058 FORMAT (3H0P=,2A4,  3H D=,2A4,  3H C=,I6,16H *** FAULTY C/C ,72A1) A4
 9098 FORMAT (1X,3(/1X,20(1H*)),I5,' CARDS BETWEEN DECKS HAVE BEEN IGNOR
     FED,'/21X,I5,' BAD CONTROL CARDS HAVE BEEN SEEN.')
      END
C====================================================================
CDECK  ID>, YTOCEX.
      SUBROUTINE YTOCEX
 
C-     UNPACK BINARY PAM FILE AND PACK TO CETA FILE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             --------------
      EQUIVALENCE (JCCF,JCCPC)
      EQUIVALENCE (LUNEW,NVNEW(1))
      EQUIVALENCE (JMODDK,NVUTY(16))
 
      DIMENSION    NAME(8)
      EQUIVALENCE (NAME(1),IQUEST(1))
 
      DIMENSION    JOPINH(9), NOPINH(3)
 
 
C                   1---------  2----------  3---
C-                   A B  S  X   I  M  1  2   C
      DATA  JOPINH / 1,2,19,24,  9,13,28,29,  3   /
      DATA  NOPINH /         4,           8,  9   /
 
 
 
      CALL CETUP
 
      CALL SBIT0 (MOPTIO(31),3)
      CALL SBIT0 (MOPTIO(31),26)
      CALL SBIT0 (MOPTIO(31),19)
 
      JCCPT  = 0
      CALL SETOPT
 
      INILEV = 1
 
      JPAMCA = 0
      NSECTS = 0
      NSKIP  = 0
      IF (IQREAD.EQ.0)       GO TO 90
 
C-----             READ DATA CARDS
 
      LUNPAM = IQREAD
      NCHKD  = -1
      CALL KDNGO
 
   11 CONTINUE
      WRITE (IQPRNT,9011)
      MCCTOU = 7
 
   12 MOPTSV = MOPTIO(31)
      NCHKD  = -2
      CALL KDNEXT (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 90
      CALL UBLOW  (KDHOLD(1),KARDCC(1),NCHKD)
      WRITE (IQPRNT,9012) INILEV,(KARDCC(J),J=1,NCHKD)
      WRITE (IQPRNT,9011)
 
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JCCTYP.NE.0)       GO TO 14
   13 WRITE (IQPRNT,9013)
      GO TO 12
 
   14 CALL CCKRAK (KDHOLD(1))
 
      IF (JCCTYP.EQ.MCCQUI)  GO TO 92
      IF (JCCTYP.EQ.MCCPAM)  GO TO 31
      IF (JCCTYP.NE.MCCOPT)  GO TO 13
 
C----              HANDLE  +OPTION
 
   19 CALL SETOPT
      IF (INILEV.EQ.0)       GO TO 25
      JFL = 0
      N   = NOPINH(INILEV)
 
      DO 23  J=1,N
      JB   = JOPINH(J)
      JOLD = JBIT (MOPTSV,    JB)
      JNEW = JBIT (MOPTIO(31),JB)
      IF (JNEW.EQ.JOLD)      GO TO 23
      JFL = 7
      CALL SBIT (JOLD,MOPTIO(31),JB)
   23 CONTINUE
      IF (JFL.EQ.0)          GO TO 25
 
      WRITE (IQPRNT,9023) INILEV
 9023 FORMAT (1X/4H ***,16X,'INIT-LEVEL',I2,' IS TOO LATE',
     F' FOR CHANGING THIS OPTION   *****')
      JCCPT = 0
      GO TO 19
 
   25 IF (MOPTIO(3).EQ.0)    GO TO 12
      CALL SBIT0 (MOPTIO(31),3)
      CALL TOSETU
      GO TO 12
 
C--        +PAM, F=FNAME, T=ATTACH,RESUME,HOLD,DETACH, N=NSKIP,NDO
 
   31 JPAMCA = JPAMCA + 1
      CALL TOSETU
      IF (JCCF.EQ.0)         GO TO 35
      NVOLD(3) = MCCPAR(JCCF+1)
 
   35 NVOLD(5) = IOTYPE (MCCPAR(JCCPT+1),4)
      IOTON  = 256 + 2048
      NSKIP  = 0
      MAXEOF = 9999
      IF (NCCPN-1)           43,38,37
   37 NSKIP  = MCCPAR(JCCPN+1)
      JCCPN  = JCCPN + 3
   38 MAXEOF = MCCPAR(JCCPN+1) + NSKIP
 
C-------           START NEW BIG-FILE
 
   42 IOTON   = 256
   43 NVOLD(7)= -7
      INILEV = 3
      MCCTOU = 0
 
C-----     START NEW PAM,  READ PAM HEADER + TITLE RECORD, PRINT TITLE
 
   47 IF (NVOLD(7)+1.GE.MAXEOF)  GO TO 91
      CALL AUXFIL (0,NVOLD(1),4HPAM )
      IQ(LBUF+1) = 7
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 91
 
      CALL POPIN
      LTK = LINBIN + NVARRI(9)
      CALL UBLOW (IQ(LTK),MWKX(1),80)
      WRITE (IQPRNT,9048) MWKX
 
C--                SKIP UNWANTED PAMS
 
      IF (NSKIP.EQ.0)        GO TO 60
      WRITE (IQPRNT,9054)
      IQ(LBUF+1) = -7
      NSKIP      = NSKIP - 1
   54 IF (NVARRI(3).EQ.3)    GO TO 47
      CALL POPIN
      GO TO 54
 
 
C-------           START NEW SECTION
 
   60 NCARDS = 0
      NSECTS = NSECTS + 1
      WRITE (IQPRNT,9060) NSECTS
      JMODDK = 2
      GO TO 68
 
C-----             READ RECORD BY RECORD
 
   62 CALL SETID (IDOLDV(1))
      IF (NVARRI(3).NE.2)    GO TO 64
      IF (LOGLEV.LT.1)       GO TO 63
      CALL UBLOW (NVARRI(5),NAME(1),8)
      WRITE (IQPRNT,9064) NAME
 
   63 JMODPA = 0
   64 CALL POPIN
      LTK = LINBIN + NVARRI(9)
      CALL KDCOPY (IQ(LTK))
      NCHKD  = KDNCHW*NWTK
      JCCTYP = MCCDEF - NVARRI(1)
      CALL CCKRAK (KIMA(1))
      MT     = MCCPAR(JCCPT+1)
      JMODDK = JMODPA
      IF (JBIT(MT,3) .NE.0)  JMODDK=0
      IF (JBIT(MT,1) .NE.0)  JMODDK=1
      IF (JBIT(MT,4) .NE.0)  JMODDK=2
      IF (JBIT(MT,24).NE.0)  JMODDK=3
      IF (JBIT(MT,25).NE.0)  JMODDK=4
      IF (NVARRI(1).EQ.2)  JMODPA=JMODDK
      GO TO 68
   67 CALL POPIN
   68 LTK = LINBIN + NVARRI(9)
      NCT = NVARRI(8)
      IF (NCT.EQ.0)          GO TO 77
      NCARDS = NCARDS + NCT
 
C----      UNPACK CARD BY CARD
 
      DO 72 I=1,NCT
      CALL KDCOPY (IQ(LTK))
C     NCHKD = MIN  (80, KDNCHW * NWTK)                                   UNI
      NCHKD = KDNCHW * NWTK                                             -UNI
      CALL TOCETA (KIMA(1))
   72 CONTINUE
      IF (LTK-LINBIN.NE.IQ(LINBIN)+1)   GO TO 81
 
   77 IF (NVARRI(3).EQ.0)    GO TO 67
      IF (NVARRI(3).NE.3)    GO TO 62
      NCHKD = 0
      CALL TOCETA (IQUEST)
      WRITE (IQPRNT,9079) NCARDS,NVNEW(9)
      NCHKD = -2
      CALL TOCETA (IQUEST)
      GO TO 47
 
C--                YTOBIN PACKING INCONSISTENCY
 
   81 WRITE (IQPRNT,9081) NDECKR
      GO TO 77
 
C----              EOI
 
   90 IF (INILEV.GE.3)       GO TO 92
      NCCPN = -7
      CALL TOSETU
      IQREAD = 0
      GO TO 42
   91 CALL AUXFIL (512,NVOLD(1),0)
      IF (IQREAD.NE.0)       GO TO 11
   92 NCHKD = -3
      CALL TOCETA (IQUEST)
      IOSPEC = MOPTIO(1)
      CALL AUXFIL (512,NVNEW(1),0)
      RETURN
 
 9011 FORMAT (1X)
 9012 FORMAT (10X,'LEV=',I1,3H - ,80A1)
 9013 FORMAT (4H ***,40X,'*** ILLEGAL C/C. IGNORED ***'/1X)
 9048 FORMAT (1X/1X,28(1H-),2X,4(10H---------+)/1X/1X,30X,80A1)
 9054 FORMAT (' SKIP INPUT.'/1X)
 9060 FORMAT (' WRITE SECTION',I4/1X)
 9064 FORMAT (3X,4HP = ,8A1)
 9079 FORMAT  (31X,'YTOCETA PACKED',I6,' CARDS -',I7,
     F' CETA RECORDS DONE.'/1X)
 9081 FORMAT (1X,3(/1X,44(1H*)),'   YTOBIN PACKING INCONSISTENCY DETECTE
     FD IN DECK',I6/1X)
      END
C====================================================================
CDECK  ID>, TOCETA.
      SUBROUTINE TOCETA (KARD)
 
C-    PUT 1 CARD INTO THE CETA BUFFER, WRITE TO TAPE
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      EQUIVALENCE (LORGH,LQPRIV(1)), (LORGI,LQPRIV(2))
     +,           (LXREF,LQPRIV(3)), (LTOCE,LQPRIV(4))
     +,           (LCETA,LQPRIV(7))
      EQUIVALENCE (LSTART,LCESAV(1)), (LEND, LCESAV(2))
     +,           (LSTORE,LCESAV(3)), (LTAKE,LCESAV(4))
C--------------    END CDE                             --------------
      DIMENSION    KARD(80)
      EQUIVALENCE (NCH,NCHKD)
      EQUIVALENCE (LUNEW,NVNEW(1))
      EQUIVALENCE (JMODDK,NVUTY(16))
 
 
 
C--   ACTION REQUEST THRU NCHKD=NCH
 
C-                +VE  STORE NEW CARD OF NCH CHAR.
C-                  0  CLOSE CURRENT CETA RECORD
C-                 -2  WRITE ZERO-RECORD TO END SECTION
C-                 -3  WRITE ZERO-RECORD + EOF TO END FILE
C-                 -4  INITIALIZE  TOCETA
 
      IF   (NCH)   71,40,11
   11 CONTINUE
 
 
C----------------  TRANSLATE 1 CARD   TO   CETA  ------------------
 
      CALL UPKBYT(KARD(1),1,MWK(1),NCH,IPAKKD(1))
   21 NX    = 0
      N     = 0
      JTAKE = 1
      LPUT  = LSTORE
 
C----              DO NEXT CHARACTER
 
   22 IF (JTAKE.GT.NCH)      GO TO 37
      JTAKE = JTAKE + 1
      JINHO = MWK(JTAKE-1)
      JCETA = IQ(LTOCE+JINHO)
      JCETU = IQ(LXREF+JCETA)
      IF (JCETU.EQ.0)        GO TO 31
      IF (JCETU.GE.256)      GO TO 24
      IQ(LPUT) = JCETU
      LPUT = LPUT + 1
      N    = N    + 1
      GO TO 22
 
   24 IF (JCETA.EQ.62)       GO TO 33
 
C--               HANDLE 'TAB' ON DEC MACHINES
 
      IF (JINHO.NE.9)          GO TO 29
      IF (JTAKE.LE.NCH)        GO TO 25
      IF (N.NE.0)              GO TO 37
      NBL = 1
      GO TO 28
 
   25 NBL = 8 - JBYT (N,1,3)
      IF (JMODDK.NE.0)         GO TO 28
      IF      (N.LT.6)         GO TO 261
      IF (N+NBL.LT.68)         GO TO 28
      NBL = NBL + NX
      GO TO 28
 
  261 NX  = 2
      IF (N.EQ.0)              GO TO 262
      IF (IQ(LSTORE).NE.45)    GO TO 268
      IF (IQ(LPUT-1).NE.45)    GO TO 268
  262 JINHO = MWK(JTAKE)
      JCETA = IQ(LTOCE+JINHO)
      IF (JCETA.LT.27)         GO TO 268
      IF (JCETA.GE.37)         GO TO 268
      NX = 3
  268 NBL = NBL - NX
      N   =   N + NX
      IF (NBL.EQ.0)            GO TO 22
   28 CALL VFILL (IQ(LPUT),NBL,45)
      LPUT = LPUT + NBL
      N    = N    + NBL
      GO TO 22
   29 CONTINUE
 
C--                INTERNAL C/CODE  ->  CETA  UP UP X
 
   30 JCETU = JCETU - 1000
      IF (JCETU.LE.0)        GO TO 31
      IQ(LPUT)   = 62
      IQ(LPUT+1) = 62
      IQ(LPUT+2) = JCETU
      LPUT = LPUT + 3
      N    = N    + 1
      GO TO 22
 
   31 JCETU = 57
      GO TO 35
 
C--                INTERNAL  UP UP X  ->  CETA C/CODE
 
   33 JCETU = 62
      IF (MWK(JTAKE)  .NE.JINHO)  GO TO 35
      IF (JTAKE  .EQ. NCH)        GO TO 35
      JINHO = MWK(JTAKE+1)
      JCETA = IQ(LTOCE+JINHO)
      JCETA = IQ(LXREF+JCETA+512)
      IF (JCETA.EQ.0)             GO TO 35
      JTAKE = JTAKE + 2
      JCETU = IQ(LXREF+JCETA)
      IF (JCETU.GE.256)           GO TO 30
   35 IQ(LPUT) = JCETU
      LPUT = LPUT + 1
      N    = N    + 1
      GO TO 22
 
C----              CARD COMPLETE
 
   37 LPUT = LPUT - 1
      IF (LPUT.EQ.LSTORE)    GO TO 39
      IF (IQ(LPUT).EQ.45)    GO TO 37
 
   39 LPUT = LPUT + 1
      IF (LPUT.GE.LEND)      GO TO 40
      IQ(LPUT) = 0
      LSTORE   = LPUT + 1
      RETURN
 
C---------         CLOSE COMPLETED CETA RECORD
 
   40 NREST = LEND+1 - LSTORE
      CALL VZERO (IQ(LSTORE),NREST)
      CALL PKBYT  (IQ(LSTART),IQ(LCETA),1,NCHCEU,IPAKCE(1))
 
C----              WRITE CETA RECORD
 
   41 NRNEW = NRNEW + 1
      NWOUT = NWCEU
 
      IF (MOPTIO(1).EQ.0)    GO TO 56
      WRITE (LUNEW,REC=NRNEW,IOSTAT=ISTAT) (IQ(J+LCETA-1),J=1,NWOUT)
      IF (ISTAT.EQ.0)        GO TO 58
      WRITE (IQPRNT,9843) ISTAT,ISTAT
 9843 FORMAT (1X/' ****** Stop for write error on d/a CETA file,'
     F /' ****** IOSTAT=',Z16,' hex = ',I12,' decimal')
      CALL PABEND
   56 CONTINUE
      CALL XOUTBF (LUNEW,IQ(LCETA),NWOUT)
 
   58 LSTORE = LSTART
      IF (NCH.GT.0)          GO TO 21
      RETURN
 
C------------      SPECIAL MODE ENTRIES      ------------------------
C-                 NCH = -2  WRITE ZERO-RECORD TO END SECTION
C-                       -3  WRITE Z/R + EOF TO END FILE
C-                       -4  INITIALISE  TOCETA
 
   71 LSTART = LCETA + 11
      LEND   = LCETA + 10 + NCHCEU
      LSTORE = LSTART
      IF (NCH.LT.-3)         RETURN
 
      CALL VZERO (IQ(LCETA),NWCEU)
      GO TO 41
 
      END
C====================================================================
CDECK  ID>, TOSETU.
      SUBROUTINE TOSETU
 
C-    DECIDE CETA FORMAT, READY CONVERSION TABLES FOR YTOCETA
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
      EQUIVALENCE (LORGH,LQPRIV(1)), (LORGI,LQPRIV(2))
     +,           (LXREF,LQPRIV(3)), (LTOCE,LQPRIV(4))
     +,           (LCETA,LQPRIV(7))
C--------------    END CDE                             --------------
 
 
      IF (INILEV.GE.2)       GO TO 31
      INILEV = 2
 
      IOSPEC = MOPTIO(1)
      CALL AUXFIL (64+128+256,NVNEW(1),4HCETA)
 
C--------          CHOOSE CETA FORMAT
 
      WRITE (IQPRNT,9010)
 9010 FORMAT (1X/20X,'Ready CETA conversion, set Init-level to 2')
 
      NCHCEU = 3600
      NWCEU  = 5*NWCEBA
      IFLAGX = 0
      IF (MOPTIO(2)+MOPTIO(25).NE.0)  WRITE (IQPRNT,9014)
 9014 FORMAT (20X,'!!!  Obsolete options BACK / Y ignored  !!!!')
 
C--                INIT OF TOCETA
 
      NCHKD = -5
      CALL TOCETA (IQUEST)
 
C----              INITIAL SETUP OF CONVERSION TABLES
 
 
C--                CONVERT TO UPPER CASE IF OPTIONS BACK OR 1
 
      IF (IFLAGX+MOPTIO(28).EQ.0)   GO TO 24
      DO 22  JJ=65,90
   22 IQ(LXREF+JJ) = JJ - 64
      WRITE (IQPRNT,9022)
 9022 FORMAT (1X/20X,'CONVERT LOWER CASE LETTERS TO UPPER.')
 
C--                CONVERT TO LOWER CASE IF OPTION 2
 
   24 IF (MOPTIO(29).EQ.0)          GO TO 26
      DO 25  JJ=1,26
   25 IQ(LXREF+JJ) = JJ + 64
      WRITE (IQPRNT,9025)
 9025 FORMAT (1X/20X,'CONVERT UPPER CASE LETTERS TO LOWER.')
 
C--                SELECT ESCAPE REPRESENTATION IF OPTION BACK
 
   26 DO 28  JJ=64,255
      J = IQ(LXREF+JJ+256)
      IF (J.EQ.0)              GO TO 28
      IF (IFLAGX.NE.0)         GO TO 27
      IQ(LXREF+JJ) = JJ
      GO TO 28
 
   27 IQ(LXREF+JJ) = J + 1000
   28 CONTINUE
 
      IQ(LXREF) = 57
 
      IQ(LXREF+201) = 1201
 
C--------      HANDLE  +OPTION, CONVERT  /,N=I1-C1,... /OR/ .I1C1...
 
   31 IF (NCCPN.LT.0)        GO TO 81
      IF (JCCTYP.NE.MCCOPT)  GO TO 81
      NG = 0
      IF (NCCPN.EQ.0)        GO TO 34
      JT = JCCPN
 
      DO 33  J=1,NCCPN
      MWK(NG+1) = MCCPAR(JT+1)
      MWK(NG+2) = MCCPAR(JT+2)
      JT = JT + 3
   33 NG = NG + 2
      GO TO 40
 
   34 N = NCHCCT+1 - NCHCCD
      IF (N.LT.3)            GO TO 81
      CALL UCOPY  (KARDCC(NCHCCD+1),MWKX(1),N)
      MWKX(N) = IQBLAN
      CALL ULEFT  (MWKX,1,N)
      CALL HOLLCV (MWKX(1),MWK(1),N,1)
      N = N - 1
 
      DO 35  J=1,N,2
      JJ = MWK(J)
      JJ = IQ(LTOCE+JJ)
      IF (JJ.EQ.45)          GO TO 39
      JJ = MWK(J+1)
      MWK(J+1) = IQ(LTOCE+JJ)
      IF (MWK(J+1).EQ.45)    GO TO 39
   35 NG = NG + 2
   39 IF (NG.EQ.0)           GO TO 81
 
C----              UP-DATE  XREF  TABLE
 
   40 DO 49  J=1,NG,2
      NADDC = 0
      NADDH = 0
      JINHO = MWK(J)
      JCETU = MWK(J+1)
 
      IF (JCETU.LT.1000)     GO TO 42
      NADDC = 1000
      JCETU = JCETU - 1000
 
   42 IF (JCETU.LE.0)        GO TO 48
      IF (JCETU.GE.256)      GO TO 48
      IF (NADDC.EQ.0)        GO TO 43
      IF (IQ(LXREF+JCETU+512).EQ.0)  GO TO 48
 
   43 IF (JINHO.LT.1000)     GO TO 44
      NADDH = 1000
      JINHO = JINHO - 1000
 
   44 IF (JINHO.LT.0)        GO TO 48
      IF (JINHO.GT.MXINHO)   GO TO 48
      JCETA = IQ(LTOCE+JINHO)
      IF (NADDH.NE.0)  JCETA=IQ(LXREF+JCETA+512)
      IF (JCETA.NE.0)        GO TO 46
 
C--                CREATE NEW CHARACTER
 
      IF (NADDH.NE.0)        GO TO 48
      JCETA = JCETU
      IF (IQ(LORGI+JCETA).EQ.-1)  GO TO 45
      JCETA = IUCOMP (-1,IQ(LORGI+96),100)
      IF (JCETA.EQ.0)        GO TO 48
      JCETA = JCETA + 95
 
   45 IQ(LORGI+JCETA) = JINHO
      IQ(LTOCE+JINHO) = JCETA
 
C--                SET  XREF  ENTRY
 
   46 IQ(LXREF+JCETA) = JCETU + NADDC
 
      JINHO = JINHO + NADDH
      JCETU = JCETU + NADDC
      WRITE (IQPRNT,9046)  JINHO,JCETU
      GO TO 49
 
   48 JINHO = JINHO + NADDH
      JCETU = JCETU + NADDC
      WRITE (IQPRNT,9048)  JINHO,JCETU
   49 CONTINUE
      WRITE (IQPRNT,9049)
 
   81 CALL LOGLV  (MOPTIO(31),0,0)
      RETURN
 
 9046 FORMAT (24X,'INTERNAL',I5,'  GIVES CETA',I5)
 9048 FORMAT (4H ***/4H ***,20X,'INTERNAL',I5,'     TO CETA',I5,
     F'  IS IMPOSSIBLE.',24X,'*******')
 9049 FORMAT (1X)
      END
C====================================================================
CDECK  ID>, YFRCEX.
      SUBROUTINE YFRCEX
 
C-    CONVERT CETA FILE TO COMPACT BINARY
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------
      EQUIVALENCE (JCCF,JCCPC)
      DIMENSION    JOPINH(13), NOPINH(3)
 
 
C                   1---------------  2----------------  3---
C-                   A B  S  U  X  Y   F  I  M  T  1  2   C
      DATA  JOPINH / 1,2,19,21,24,25,  6, 9,13,20,28,29,  3   /
      DATA  NOPINH /               6,                12,  13  /
 
      DATA  MMPAM  / 4HPAM  /
 
 
      CALL CETUP
      IOTON = 256
C-                                 256 INIT
 
      CALL SBIT0 (MOPTIO(31),3)
      CALL SBIT0 (MOPTIO(31),6)
      CALL SBIT0 (MOPTIO(31),26)
      CALL SBIT0 (MOPTIO(31),21)
      CALL SBIT0 (MOPTIO(31),19)
      CALL SBIT0 (MOPTIO(31),25)
 
      JCCPT  = 0
      CALL SETOPT
 
      INILEV = 1
 
      NVNEW(6)= MMPAM
      MODEPR = IQPLUS
      NDISCD = 0
      JPAMCA = 0
      NSECT  = 0
      NSKIP  = 0
      NTAKE  = 9999
 
      IF (IQREAD.EQ.0)       GO TO 90
 
C-----             READ DATA CARDS
 
      LUNPAM = IQREAD
      NCHKD  = -1
      CALL KDNGO
 
   11 CONTINUE
      WRITE (IQPRNT,9011)
      MCCTOU = 7
 
   12 MOPTSV = MOPTIO(31)
      NCHKD  = -2
      CALL KDNEXT (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 90
      CALL UBLOW  (KDHOLD(1),KARDCC(1),NCHKD)
      WRITE (IQPRNT,9012) INILEV,(KARDCC(J),J=1,NCHKD)
      WRITE (IQPRNT,9011)
 
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JCCTYP.NE.0)       GO TO 14
   13 WRITE (IQPRNT,9013)
      GO TO 12
 
   14 CALL CCKRAK (KDHOLD(1))
 
      IF (JCCTYP.EQ.MCCQUI)  GO TO 91
      IF (JCCTYP.EQ.MCCPAM)  GO TO 31
      IF (JCCTYP.NE.MCCOPT)  GO TO 13
 
C----              HANDLE  +OPTION
 
   19 CALL SETOPT
      IF (INILEV.EQ.0)       GO TO 25
      JFL = 0
      N   = NOPINH(INILEV)
 
      DO 23  J=1,N
      JB   = JOPINH(J)
      JOLD = JBIT (MOPTSV,    JB)
      JNEW = JBIT (MOPTIO(31),JB)
      IF (JNEW.EQ.JOLD)      GO TO 23
      JFL = 7
      CALL SBIT (JOLD,MOPTIO(31),JB)
   23 CONTINUE
      IF (JFL.EQ.0)          GO TO 25
 
      WRITE (IQPRNT,9023) INILEV
 9023 FORMAT (1X/4H ***,16X,'INIT-LEVEL',I2,' IS TOO LATE',
     F' FOR CHANGING THIS OPTION   *****')
      JCCPT = 0
      GO TO 19
 
   25 IF (MOPTIO(3).EQ.0)    GO TO 27
      CALL SBIT0 (MOPTIO(31),3)
      CALL FRSETU
 
   27 IF (MOPTIO(6).EQ.0)    GO TO 12
      CALL SBIT0 (MOPTIO(31),6)
 
      IOSPEC = MOPTIO(1)
      CALL AUXFIL (128,NVOLD(1),4HCETA)
      NCHKD = -4
      CALL FRCETA (IQUEST)
      GO TO 11
 
C--              +PAM, F=FNAME, T=ATT,RESUME,EOF,HOLD, N=NSKIP,NDO
 
   31 CALL FRSETU
      NSKIP = 0
      NTAKE = 9999
      IF (NCCPN.EQ.0)        GO TO 33
      IF (NCCPN.EQ.1)        GO TO 32
      NSKIP = MCCPAR(JCCPN+1)
      JCCPN = JCCPN + 3
   32 NTAKE = MCCPAR(JCCPN+1)
   33 J     = IOTYPE(MCCPAR(JCCPT+1),4)
      IF (JCCF.EQ.0)         GO TO 38
      IF (JPAMCA.EQ.0)       GO TO 36
      CALL POPREW
      NRTNEW = -1
 
   36 NVNEW(3) = MCCPAR(JCCF+1)
      NVNEW(5) = J
      CALL AUXFIL (64+256+2048,NVNEW(1),0)
      JCCPT = 0
 
   38 IF (JCCPT.NE.0)  NVNEW(5)=J
      JPAMCA = JPAMCA + 1
 
C------------      START NEW BIG-FILE OUTPUT
 
   41 CONTINUE
   42 CONTINUE
      INILEV = 3
      MCCTOU = 0
 
C----              START NEW PAM-FILE = CETA-SECTION
 
   47 NCARDP = 0
      JPDNEW = 3
      NSECT = NSECT + 1
      WRITE (IQPRNT,9047) NSECT
 
      NCHKD = 0
      CALL FRCETA (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 91
      IF (NSKIP.EQ.0)        GO TO 71
      NSKIP = NSKIP - 1
      WRITE (IQPRNT,9049) (MWK(J),J=1,NCHKD)
      NCHKD = -3
      CALL FRCETA (IQUEST)
      GO TO 47
 
C----              HUNTING FOR START OF NEW DECK
 
   61 NDISCD = NDISCD + 1
   62 CALL FRCETA (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 78
 
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JCCTYP - MCCTIT)   61,78,64
   64 IF (JCCTYP.GE.MCCEOD)  GO TO 61
 
      CALL CCKRAK (KDHOLD(1))
      IF (JCCBAD.NE.0)       GO TO 67
      IF (JCCTYP.GE.MCCEOD)  GO TO 61
      GO TO 74
 
C--                BAD C/C, SKIP THIS CARD
 
   67 JC = NCARDP - NCDECK
      WRITE (IQPRNT,9067) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 61
 
C----              NORMAL LOOP FOR DECKS
 
   71 CALL PILECT
      IF (NCHKD)             78,62,74
 
   74 JPDNEW = MCCDEF - JCCTYP
      GO TO 71
 
C--                END OF CETA-SECTION
 
   78 WRITE (IQPRNT,9078) NCARDP
      NTAKE = NTAKE - 1
      IF (NTAKE.GT.0)        GO TO 47
      GO TO 11
 
C--                EOI
 
   90 IF (INILEV.GE.3)       GO TO 91
      NCCPN = -7
      CALL FRSETU
      GO TO 41
 
   91 CONTINUE
      IOSPEC = MOPTIO(1)
      CALL AUXFIL (512,NVOLD(1),0)
      CALL POPREW
      IF (NDISCD+NVWARX(1).NE.0)  WRITE (IQPRNT,9098) NDISCD,NVWARX(1)
      RETURN
 
 9011 FORMAT (1X)
 9012 FORMAT (10X,'LEV=',I1,3H - ,80A1)
 9013 FORMAT (4H ***,40X,'*** ILLEGAL C/C. IGNORED ***'/1X)
 9047 FORMAT (1X/14H START SECTION,I4,/1X)
 9049 FORMAT (14H SKIP  SECTION,9X,4H--- ,80A1)
C9067 FORMAT (3H0P=,A8,   3H D=,A8,   3H C=,I6,16H *** FAULTY C/C ,72A1) A8M
C9067 FORMAT (3H0P=,A6,A2,3H D=,A6,A2,3H C=,I6,16H *** FAULTY C/C ,72A1) A6
C9067 FORMAT (3H0P=,A5,A3,3H D=,A5,A3,3H C=,I6,16H *** FAULTY C/C ,72A1) A5
 9067 FORMAT (3H0P=,2A4,  3H D=,2A4,  3H C=,I6,16H *** FAULTY C/C ,72A1) A4
 9078 FORMAT (35X,I7,12H CARDS READ./1X/1X,53(1H-))
 9098 FORMAT (1X,3(/1X,20(1H*)),I5,' CARDS BETWEEN DECKS HAVE BEEN IGNOR
     FED,'/21X,I5,' BAD CONTROL CARDS HAVE BEEN SEEN.')
      END
C====================================================================
CDECK  ID>, FRCETA.
      SUBROUTINE FRCETA (KARD)
 
C-    READ 1 CARD FROM CETA BUFFER, READ FROM TAPE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      EQUIVALENCE (LORGH,LQPRIV(1)), (LORGI,LQPRIV(2))
     +,           (LXREF,LQPRIV(3)), (LTOCE,LQPRIV(4))
     +,           (LCETA,LQPRIV(7))
      EQUIVALENCE (LSTART,LCESAV(1)), (LEND, LCESAV(2))
     +,           (LSTORE,LCESAV(3)), (LTAKE,LCESAV(4))
C--------------    END CDE                             --------------
      EQUIVALENCE (LUNOLD,NVOLD(1))
      EQUIVALENCE (NCH,NCHKD)
      DIMENSION    KARD(80)
 
      DATA    NERR /0/,   NEOF /0/
 
C--   ACTION REQUEST THRU  NCHKD=NCH
 
C-              OTHER  DELIVER NEXT CARD
C-                 -3  SKIP CURRENT CETA-SECTION
C-                 -4  SKIP TO NEXT FILE MARK ON CETA TAPE
C-                 -5  INITIALISE  FRCETA
C-                     MEASURE RECORD SIZE IF U-OPTION
 
 
C--   STATUS REPLY THRU  NCHKD
 
C-                +VE  LENGTH OF CARD DELIVERED
C-                 -2  END OF CETA-SECTION
 
 
      IF (NCH.LT.-2)         GO TO 71
 
 
C----------------  TRANSLATE 1 CARD  FROM  CETA  ------------------
 
      IF (IQ(LTAKE).EQ.0)    GO TO 51
   21 NCH = 0
 
C----              DO NEXT CHARACTER
 
   22 LTAKE = LTAKE + 1
      JCETA = IQ(LTAKE-1)
      IF (JCETA.EQ.0)        GO TO 37
      JCETU = IQ(LXREF+JCETA)
      IF (JCETU.GE.256)      GO TO 24
      NCH      = NCH + 1
      MWK(NCH) = IQ(LORGH+JCETU)
      GO TO 22
 
   24 IF (JCETA.EQ.62)       GO TO 33
 
C--                CETA C/CODE  ->  INTERNAL  UP UP X
 
   30 JCETU = MAX (JCETU-1000,0)
      IF (JCETU.EQ.0)        GO TO 35
      MWK(NCH+1) = IQ(LORGH+62)
      MWK(NCH+2) = IQ(LORGH+62)
      MWK(NCH+3) = IQ(LORGH+JCETU)
      NCH = NCH + 3
      GO TO 22
 
C--                CETA  UP UP X  ->  INTERNAL C/CODE
 
   33 JCETU = 62
      IF (IQ(LTAKE)  .NE.JCETA)  GO TO 35
      JCETA = IQ(LTAKE+1)
      JCETA = IQ(LXREF+JCETA+512)
      IF (JCETA.EQ.0)            GO TO 35
      LTAKE = LTAKE + 2
      JCETU = IQ(LXREF+JCETA)
      IF (JCETU.GE.256)          GO TO 30
   35 NCH      = NCH + 1
      MWK(NCH) = IQ(LORGH+JCETU)
      GO TO 22
 
C----              CARD COMPLETE
 
   37 NCARDP = NCARDP + 1
      NWKD   = 1
      IF (NCH.LT.KDNCHW)     GO TO 39
      IF (NCH.GE.150)        GO TO 62
      NWKD   = KDNWT
      IF (NCH.GE.77)         GO TO 39
      NWKD = (NCH-1)/4 + 1
      IF (NCH.NE. 4*NWKD)    GO TO 39
 
      NWKD     = NWKD + 1
      NCH      = NCH  + 1
      MWK(NCH) = IQBLAN
 
   39 CALL UBUNCH (MWK(1),KARD(1),NCH)
      IF (NWKD.EQ.KDNWT)     RETURN
      CALL SBYT (KDMARK,KARD(NWKD),KDPOST,KDBITS)
      RETURN
 
 
C------------      READING NEXT CETA RECORD  ------------------------
 
C--                READ ERROR
 
   42 NROLD = NROLD + 1
      NERR  = NERR  + 1
      WRITE (IQPRNT,9042) NROLD
      IF (NERR.LT.7)         GO TO 51
      GO TO 69
 
C--                EOF
 
   44 IF (NCH.EQ.-4)         GO TO 45
      NEOF = 7
      WRITE (IQPRNT,9044)
   45 IQ(LTAKE) = 0
      NCH = -2
      RETURN
 
   46 IF(NEOF.EQ.-1)         GO TO 59
      GO TO 45
 
C--                SPECIAL READING MODES
 
   47 IF   (NCH+4)           75,51,48
   48 IF (IQ(LREAD).EQ.0)    GO TO 45
 
C----              READ NEXT CETA RECORD
 
   51 IF (NEOF.NE.0)         GO TO 46
 
      LREAD  = LCETA + 3612 - NWCEU
      NWCEIN = NWCEU
      JREC   = NROLD + 1
 
      IF (MOPTIO(1).EQ.0)    GO TO 56
      READ (LUNOLD,REC=JREC,IOSTAT=ISTAT) (IQ(J+LREAD-1),J=1,NWCEIN)
      IF (ISTAT.EQ.0)        GO TO 58
      WRITE (IQPRNT,9054) ISTAT,ISTAT
 9054 FORMAT (1X/' ****** Stop for read error on d/a CETA file,'
     F /' ****** IOSTAT=',Z16,' hex = ',I12,' decimal')
      CALL PABEND
   56 CONTINUE
      CALL XINBF (LUNOLD,IQ(LREAD),NWCEIN)
      IF   (NWCEIN.EQ.0)          GO TO 44
      IF   (NWCEIN.LT.0)          GO TO 42
 
   58 NROLD = NROLD + 1
      NERR  = 0
      IF (NCH.LT.-2)         GO TO 47
 
C--                UNPACK CETA RECORD
 
   59 IF (NWCEIN.NE.NWCEU)   GO TO 61
      LTAKE = LCETA
      NEOF  = 0
      CALL UPKBYT (IQ(LREAD),1,IQ(LTAKE),NCHCEU,IPAKCE(1))
      IQ(LTAKE+NCHCEU)   = 0
      IQ(LTAKE+NCHCEU+1) = 0
      IF (IQ(LTAKE).NE.0)    GO TO 21
      NCH = -2
      RETURN
 
C----              CETA FORMAT TROUBLE
 
   61 WRITE (IQPRNT,9061) NWCEIN,NWCEU
 9061 FORMAT (1X/' *** CETA RECORD WITH',I5,' SHOULD HAVE',I5,' WORDS')
      GO TO 69
 
   62 WRITE (IQPRNT,9062) NCH
 9062 FORMAT (1X/' *** CETA LINE OF',I5,' CHARACTERS SEEN !')
 
   69 WRITE (IQPRNT,9069)
 9069 FORMAT (1X/' *** PROBABLY NOT A CETA TAPE.')
      CALL PABEND
 
C------------      SPECIAL MODE ENTRIES      ------------------------
C-                 NCH = -3  SKIP CURRENT CETA-SECTION
C-                       -4  SKIP TO NEXT FILE MARK ON CETA TAPE
C-                       -5  INITIALISE  FRCETA
 
   71 LTAKE = LCETA
      IQ(LTAKE) = 0
      IF (NCH.GE.-4)         GO TO 51
 
   75 CONTINUE
   99 RETURN
 
 9042 FORMAT (1X/1X,20(1H*),'   READ ERROR WITH CETA-RECORD',I6,
     F', RECORD SKIPPED.  VERY DANGEROUS  *******'/1X)
 9044 FORMAT (1X/1X,20(1H*),'   UNEXPECTED EOF.'/1X)
      END
C====================================================================
CDECK  ID>, FRSETU.
      SUBROUTINE FRSETU
 
C-    DECIDE CETA FORMAT, READY CONVERSION TABLES FOR YFRCETA
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
      EQUIVALENCE (LORGH,LQPRIV(1)), (LORGI,LQPRIV(2))
     +,           (LXREF,LQPRIV(3)), (LTOCE,LQPRIV(4))
     +,           (LCETA,LQPRIV(7))
C--------------    END CDE                             --------------
 
 
      IF (INILEV-2)          10,31,89
   10 INILEV = 2
 
      IOSPEC = MOPTIO(1)
      CALL AUXFIL (128,NVOLD(1),4HCETA)
 
C--------          CHOOSE CETA FORMAT
 
      WRITE (IQPRNT,9010)
 9010 FORMAT (1X/20X,'Ready CETA conversion, set Init-level to 2')
 
      NCHCEU = 3600
      NWCEU  = 5*NWCEBA
      IF (MOPTIO(21).NE.0)  WRITE (IQPRNT,9013)
 9013 FORMAT (20X,'OPTION U - NOT POSSIBLE.')
 
C--                HANDLE OPTIONS  BACK, XTEND, SIX
 
      IF (MOPTIO(2)+MOPTIO(25).NE.0)  WRITE (IQPRNT,9014)
 9014 FORMAT (20X,'!!!  Obsolete options BACK / Y ignored  !!!!')
      IF (MOPTIO(20).NE.0)  WRITE (IQPRNT,9017)
 9017 FORMAT (20X,'Option T - True control-codes go to PAM file.')
 
C--                INIT OF FRCETA
 
      NCHKD = -5
      CALL FRCETA (IQUEST)
 
C----------------  COMPLETE SETUP OF CONVERSION TABLES
 
C--                CONVERT TO UPPER CASE IF OPTION 1
 
      IF (MOPTIO(28).EQ.0)          GO TO 24
      DO 22  JJ=65,90
   22 IQ(LXREF+JJ) = JJ - 64
      WRITE (IQPRNT,9022)
 9022 FORMAT (1X/20X,'CONVERT LOWER CASE LETTERS TO UPPER.')
 
C--                CONVERT TO LOWER CASE IF OPTION 2
 
   24 IF (MOPTIO(29).EQ.0)          GO TO 26
      DO 25  JJ=1,26
   25 IQ(LXREF+JJ) = JJ + 64
      WRITE (IQPRNT,9025)
 9025 FORMAT (1X/20X,'CONVERT UPPER CASE LETTERS TO LOWER.')
   26 CONTINUE
      JSUB = 193
      IF (MOPTIO(20).NE.0)  JSUB=512
C--                SELECT ESCAPE REPRES. IF 6-BIT OR IF NOT OPTION TRUE
 
      DO 28  JJ=64,255
      J = IQ(LXREF+JJ+256)
      IF (J.EQ.0)              GO TO 28
      IF (IQ(LORGI+JJ).EQ.-1)  GO TO 27
      IF   (JJ.GE.JSUB)        GO TO 27
      IQ(LXREF+JJ) = JJ
      GO TO 28
 
   27 IQ(LXREF+JJ) = J + 1000
   28 CONTINUE
 
      IQ(LORGH) = IQ(LORGH+57)
 
 
C------------  HANDLE  +OPTION, CONVERT  /,N=C1-I1,... /OR/ .C1I1...
 
   31 IF (NCCPN.LT.0)        GO TO 81
      IF (JCCTYP.NE.MCCOPT)  GO TO 81
      NG = 0
      IF (NCCPN.EQ.0)        GO TO 34
      JT = JCCPN
 
      DO 33  J=1,NCCPN
      MWK(NG+1) = MCCPAR(JT+1)
      MWK(NG+2) = MCCPAR(JT+2)
      JT = JT + 3
   33 NG = NG + 2
      GO TO 40
 
   34 N = NCHCCT+1 - NCHCCD
      IF (N.LT.3)            GO TO 81
      CALL UCOPY  (KARDCC(NCHCCD+1),MWKX(1),N)
      MWKX(N) = IQBLAN
      CALL ULEFT  (MWKX,1,N)
      CALL HOLLCV (MWKX(1),MWK(1),N,1)
      N = N - 1
 
      DO 35  J=1,N,2
      JJ = MWK(J)
      MWK(J) = IQ(LTOCE+JJ)
      IF (MWK(J).EQ.45)      GO TO 39
      JJ = MWK(J+1)
      JJ = IQ(LTOCE+JJ)
      IF (JJ.EQ.45)          GO TO 39
   35 NG = NG + 2
   39 IF (NG.EQ.0)           GO TO 81
 
C----              UP-DATE  XREF  TABLE
 
   40 DO 49  J=1,NG,2
      NADDH = 0
      JINHO = MWK(J+1)
      JCETA = MWK(J)
 
      IF (JCETA.LE.0)        GO TO 48
      IF (JCETA.GE.256)      GO TO 48
 
      IF (JINHO.LT.1000)     GO TO 44
      NADDH = 1000
      JINHO = JINHO - 1000
 
   44 IF (JINHO.LT.0)        GO TO 48
      IF (JINHO.GT.MXINHO)   GO TO 48
      IF (JINHO.EQ.KDMARK)   GO TO 48
      JCETU = IQ(LTOCE+JINHO)
      IF (JCETU.NE.0)        GO TO 46
 
C--                CREATE NEW CHARACTER
 
      IF (NADDH.NE.0)        GO TO 48
      JCETU = JCETA
      IF (IQ(LORGI+JCETU).EQ.-1)  GO TO 45
      JCETU = IUCOMP (-1,IQ(LORGI+96),100)
      IF (JCETU.EQ.0)        GO TO 48
      JCETU = JCETU + 95
 
   45 IQ(LORGI+JCETU) = JINHO
      IQ(LTOCE+JINHO) = JCETU
 
C--                SET  XREF  ENTRY
 
   46 IQ(LXREF+JCETA) = JCETU + NADDH
 
      JINHO = JINHO + NADDH
      WRITE (IQPRNT,9046)  JCETA,JINHO
      GO TO 49
 
   48 JINHO = JINHO + NADDH
      WRITE (IQPRNT,9048)  JCETA,JINHO
   49 CONTINUE
      WRITE (IQPRNT,9049)
 
C----              COMPLETE HOLLERITH REPRESENTATION
 
   81 J = IUCOMP (KDMARK,IQ(LORGI+1),255)
      IF (J.EQ.0)            GO TO 83
      IQ(LORGI+J) = KDSUB
      GO TO 81
 
   83 CALL HOLLCV (IQ(LORGI+1),IQ(LORGH+1),255,0)
   89 CALL LOGLV  (MOPTIO(31),0,0)
      RETURN
 
 9046 FORMAT (24X,4HCETA,I5,'  GIVES INTERNAL',I5)
 9048 FORMAT (4H ***/4H ***,20X,4HCETA,I5,'     TO INTERNAL',I5,
     F'  IS IMPOSSIBLE.',24X,'*******')
 9049 FORMAT (1X)
      END
C====================================================================
CDECK  ID>, CETUP.
      SUBROUTINE CETUP
 
C-    SET UP CETA CONVERSION TABLES
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
      EQUIVALENCE (LORGH,LQPRIV(1)), (LORGI,LQPRIV(2))
     +,           (LXREF,LQPRIV(3)), (LTOCE,LQPRIV(4))
     +,           (LCETA,LQPRIV(7))
C--------------    END CDE                             --------------
 
      DIMENSION    MMORGH(4),MMORGI(4),MMTOCE(4),MMXREF(4),MMCETA(4)
      DIMENSION    INICET(13)
 
      DATA  MMORGH / 4HORGH, 0, 0, 260 /
      DATA  MMORGI / 4HORGI, 0, 0, 260 /
      DATA  MMXREF / 4HXREF, 0, 0, 772 /
      DATA  MMTOCE / 4HTOCE, 0, 0, 516 /
      DATA  MMCETA / 4HCETA, 0, 0,3800 /
 
      DATA  INICET /180,  8,4,0,0,0,       8,4,0,0,0,   1,255/
 
C-               NWCEBA   IPAKCE           IPAKKD  JPOSA1 MXINHO
 
C----              INITIALIZE /COMCET/
 
      CALL VZERO (INILEV,17)
      CALL UCOPY (INICET,NWCEBA,13)
      NCHCEU = 3600
      NWCEU  = 5*NWCEBA
 
C--                LIFT CETA BUFFER
 
      CALL LIFTBK (LCETA,0,0,MMCETA(1),0)
      CALL VZERO  (IQ(LCETA+1),MMCETA(4))
      LCETA = LCETA + 1
 
C----              LIFT TABLE BANKS
 
      CALL LIFTBK (LORGH,0,0,MMORGH,7)
      LORGH = LORGH + 2
 
      CALL LIFTBK (LORGI,0,0,MMORGI,7)
      CALL VFILL  (IQ(LORGI+1),MMORGI(4),-1)
      LORGI = LORGI + 2
 
      CALL LIFTBK (LXREF,0,0,MMXREF,7)
      CALL VZERO  (IQ(LXREF+1),MMXREF(4))
      LXREF = LXREF + 2
 
      CALL LIFTBK (LTOCE,0,0,MMTOCE,7)
      CALL VZERO  (IQ(LTOCE+1),MMTOCE(4))
      LTOCE = LTOCE + 2
 
C--------------    READY ORGH + ORGI TABLES    ----------------------
 
C----              SET BASIC CHARACTERS AS INTEGERS IN CETA ORDER
 
      CALL UCTOH1 (
     +'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/()$= ,.#''!:"_]&@?[>< ^;'
     +,                      IQ(LORGH+1),63)
 
      CALL HOLLCV (IQ(LORGH+1),IQ(LORGI+1),63,1)
 
C--                IMMEDIATE CORRECTIONS
 
 
C----              SMALL LETTERS
 
      DO 24 J=1,26
   24 IQ(LORGI+J+64) = IQ(LORGI+J) + 32
 
 
C----              MISSING ASCII CHARACTERS
 
      IQ(LORGI+61) =  92
      IQ(LORGI+64) =  37
      IQ(LORGI+91) = 123
      IQ(LORGI+92) = 124
      IQ(LORGI+93) = 125
      IQ(LORGI+94) = 126
      IQ(LORGI+95) =  96
 
 
C----              CONTROL-CODES
 
      DO 28 J=1,31
   28 IQ(LORGI+J+192) = J
      IQ(LORGI+224)   = 127
 
 
 
C---------------   READY  TOCE + XREF  TABLES   ---------------------
 
C--       TOCE TABLE
C--       XREF PART 1 : CETA VALUES THEMSELVES
 
      DO 43 JJ=1,255
      J     = 256 - JJ
      JINHO = IQ(LORGI+J)
      IF (JINHO.EQ.-1)       GO TO 43
      IQ(LXREF+J)     = J
      IQ(LTOCE+JINHO) = J
   43 CONTINUE
 
C--       XREF PART 2 : ASSOCIATED   UP UP N  SYMBOL
 
      LX2 = LXREF + 256
 
      IQ(LX2+64) = 61
      IQ(LX2+91) = 60
      IQ(LX2+92) = 55
      IQ(LX2+93) = 59
      IQ(LX2+94) = 56
      IQ(LX2+95) = 63
 
      DO 47 J=1,36
   47 IQ(LX2+J+192) = J
 
C--       XREF PART 3 : INVERSE CETA POINTERS
 
      LX3 = LXREF + 512
 
      DO 49 JJ=64,255
      J = IQ(LX2+JJ)
   49 IQ(LX3+J) = JJ
      IQ(LX3)   = 0
 
C--       MARK THE ESCAPE CHARACTER  UP UP
 
      IQ(LXREF+62) = 1062
 
      RETURN
      END
C====================================================================
CDECK  ID>, HOLLCV.
      SUBROUTINE HOLLCV (MINV,MEXV,NP,IDIR)
 
C-    CONVERT HOLLERITH CHARACTERS
C-    IDIR = 0  INTEGER  TO  HOLL. A1 WITH BLANK FILL
C-           1  HOLL. A1 TO  INTEGER  WITH ZERO FILL
 
      COMMON /COMCET/INILEV,NWCEIN,NCHCEU,NWCEU
     +,              NWCEBA,IPAKCE(5),IPAKKD(5),JPOSA1,MXINHO
     +,              LCESAV(4)
C--------------    END CDE                             --------------
      DIMENSION    MINV(9), MEXV(9), NP(9)
 
      EQUIVALENCE (JPOS, JPOSA1)
      EQUIVALENCE (NBITS,IPAKKD(1))
 
 
      DATA  MM     / 4H     /
 
 
      NCH = NP(1)
      IF (IDIR.NE.0)         GO TO 21
 
C--                INTEGER TO HOLLERITH
 
      DO 19 J=1,NCH
      CALL SBYT (MINV(J),MM,JPOS,NBITS)
   19 MEXV(J) = MM
      RETURN
 
C--                HOLLERITH TO INTEGER
 
   21 DO 29 J=1,NCH
   29 MEXV(J) = JBYT (MINV(J),JPOS,NBITS)
      RETURN
      END
C====================================================================
CDECK  ID>, YCOMEX.
      SUBROUTINE YCOMEX
 
C-    YCOMPAR, COMPARE 2 PAM-FILES FOR IDENTICAL CONTENT
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,            NAME1(8),NAME2(8),LASTP(8),LASTD(8)
C--------------    END CDE                             -----------------  ------
      DIMENSION    JTYPV(3)
      DATA  JTYPV  /4HDECK,4HPAT ,4HPAM /
      DATA  MMNEW  /4HNEW /, MMOLD/4HOLD /
 
C-    LBUF+16    1ST WORD, 1ST CARD
C-        +17    NO. OF CARD-WORDS
C-        +21/29 COPY OF FILE DESCRIPTION VECTOR
 
      NVNEW(6) = MMNEW
      NVOLD(6) = MMOLD
      CALL UCOPY (NVNEW(1),IQ(LBUF+21), 9)
      CALL UCOPY (NVOLD(1),IQ(LLAST+21),9)
      IQ(LBUF-1)  = LLAST
      IQ(LLAST-1) = LBUF
      IQ(LBUF+1)  = 7
      IQ(LLAST+1) = 7
      LBUFOR = LBUF
      IOTON  = 256
      NFAILM = 10
 
 
C------            READ FILE-IDENT RECORDS
 
   31 LBUF   = LBUFOR
      JSV    = IOTON
   32 CALL UCOPY  (IQ(LBUF+21),NVOLD(1),9)
      IOTON  = JSV
      CALL AUXFIL (0,NVOLD(1),0)
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 91
      CALL UCOPY (NVOLD(1),IQ(LBUF+21),9)
      LBUF = IQ(LBUF-1)
      IF (LBUF.NE.LBUFOR)    GO TO 32
      LASTP(1) = 0
      LASTD(1) = 0
      GO TO 54
 
C-------           RECOVER FAILURE, RE-START AT NEXT UNIT
 
   41 WRITE (IQPRNT,9041) JTYPV(JPDOLD)
 
      LBUF = LBUFOR
   43 CALL UCOPY (IQ(LBUF+21),NVOLD(1),9)
   44 IF (IQ(LBUF+7).GE.JPDOLD)  GO TO 46
      CALL POPIN
      GO TO 44
 
   46 CALL UCOPY (NVOLD(1),IQ(LBUF+21),9)
      LBUF = IQ(LBUF-1)
      IF (LBUF.NE.LBUFOR)    GO TO 43
 
C-------           START NEXT RECORD
 
   51 NPDSUM = IQ(LBUF+7) + IQ(LLAST+7)
      IF (NPDSUM.EQ.0)                 GO TO 54
      IF (NPDSUM.EQ.6)                 GO TO 31
      JFAULT = 1
      IF (IQ(LBUF+7) .NE.IQ(LLAST+7))  GO TO 61
      IF (IQ(LBUF+9) .NE.IQ(LLAST+9))  GO TO 61
      IF (IQ(LBUF+10).NE.IQ(LLAST+10)) GO TO 61                         -A8M
 
      IF (IQ(LBUF+7).EQ.1)   GO TO 52
      LASTD(1) = 0
      CALL UBLOW (IQ(LLAST+9),LASTP(1),8)
      IF (LOGLEV.LT.1)       GO TO 54
      WRITE (IQPRNT,9051) LASTP
      LASTP(1) = 0
      GO TO 54
   52 CALL UBLOW (IQ(LLAST+9),LASTD(1),8)
      IF (LOGLEV.LT.3)       GO TO 54
      WRITE (IQPRNT,9052) LASTD
      LASTD(1) = 0
 
 
C--                READ NEXT RECORDS
 
   54 LBUF = LBUFOR
   55 CALL UCOPY (IQ(LBUF+21),NVOLD(1),9)
      CALL POPIN
      IQ(LBUF+16) = LINBIN     + NVARRI(9)
      IQ(LBUF+17) = IQ(LINBIN) - NVARRI(9) + 1
 
C--                PRINT TITLE FOR FIRST TITLE RECORD
 
      IF (NROLD.NE.2)        GO TO 57
      IF (LBUF.EQ.LLAST)     GO TO 57
      L = IQ(LBUF+16)
      CALL KDCOPY (IQ(L))
      J = NVOLD(7) + 1
      WRITE (IQPRNT,9056) J
      WRITE (IQPRNT,9073) IDEOF(1),(KIMA(J),J=1,NWTK)
   57 CALL UCOPY (NVOLD(1),IQ(LBUF+21),9)
      LBUF = IQ(LBUF-1)
      IF (LBUF.NE.LBUFOR)    GO TO 55
 
C--                VERIFY COMMON CONTENT
 
      JFAULT= 2
      NFAILR= 0
      INSEQ = 0
      NWXX  = MIN  (IQ(LBUF+17),IQ(LLAST+17))
      LLGO  = IQ(LLAST+16)
      LBGO  = IQ(LBUF+16)
      JCGO  = JCARD
      JWGO  = 1
 
   58 LL = LLGO
      LB = LBGO
      DO 59 J=JWGO,NWXX
      IF (IQ(LL).NE.IQ(LB))  GO TO 61
      LL = LL+1
   59 LB = LB+1
      JCARD = JCARD + IQ(LLAST+12)
      IF (IQ(LBUF+17).EQ.IQ(LLAST+17))  GO TO 51
      JFAULT = 3
 
 
C----------        FAILURES
 
C--                PRINT DELAYED PATCH/DECK
 
   61 IF (LASTP(1).EQ.0)     GO TO 62
      WRITE (IQPRNT,9051) LASTP
      LASTP(1) = 0
   62 IF (LASTD(1).EQ.0)     GO TO 63
      WRITE (IQPRNT,9052) LASTD
      LASTD(1) = 0
   63 NVWARX(1) = NVWARX(1) + 1
      GO TO (85,66,81), JFAULT
 
C--                CARD-CONTENT MIS-MATCH
 
   66 NFAILR = NFAILR + 1
      IF (NFAILR.GE.NFAILM)  GO TO 75
      JCF = JCGO
      L   = LLGO
      GO TO 68
 
   67 JCF = JCF + 1
      L   = L   + N
   68 N = KDSTEP (IQ(L),1)
      IF (L+N.LE.LL)         GO TO 67
      IF (JCF.NE.JCGO)  INSEQ=0
      IF (JCF.EQ.JCGO)  INSEQ=INSEQ+1
 
      WRITE (IQPRNT,9071) NVWARX(1),JCF
 
      LTK = LBGO + (L-LLGO)
      CALL KDCOPY (IQ(LTK))
      WRITE (IQPRNT,9073) NVNEW(6),(KIMA(J),J=1,NWTK)
      JWGO = JWGO + (LTK-LBGO)
      LBGO = LTK
      N    = NWTK
 
      LTK = L
      CALL KDCOPY (IQ(LTK))
      WRITE (IQPRNT,9073) NVOLD(6),(KIMA(J),J=1,NWTK)
      LLGO = LTK
      JCGO = JCF + 1
      IF (MOPTIO(20).EQ.0)   GO TO 75
      IF (JWGO.GT.NWXX)      GO TO 75
      IF (N.NE.NWTK)         GO TO 75
      IF (INSEQ.LT.5)        GO TO 58
 
   75 JPDOLD = 1
      GO TO 41
 
 
C--                RECORD LENGTH MIS-MATCH
 
   81 JC = JCARD + (IQ(LBUF+12)-IQ(LLAST+12))
      WRITE (IQPRNT,9081) NVWARX(1),JC,JCARD
      JPDOLD = 1
      GO TO 41
 
C--                PATCH/DECK MIS-MATCH
 
   85 CALL UBLOW (IQ(LBUF+9),NAME1(1),8)
      CALL UBLOW (IQ(LLAST+9),NAME2(1),8)
      WRITE (IQPRNT,9085) NVWARX(1),IQ(LBUF+7),NAME1,IQ(LLAST+7),NAME2
 
      JPDOLD = MAX  (IQ(LLAST+7),IQ(LBUF+7))
      IF (IQ(LLAST+7).EQ.IQ(LBUF+7))  JPDOLD=JPDOLD+1
      JPDOLD = MIN  (JPDOLD,3)
      GO TO 41
 
C----              END OF INFORMATION
 
   91 CALL AUXFIL (512,NVOLD(1),0)
      LBUF = IQ(LBUF-1)
      CALL AUXFIL (512,IQ(LBUF+21),0)
      WRITE (IQPRNT,9092) NVWARX(1)
      IF (IQTYPE.EQ.0)       GO TO 94
      IF (IQTYPE.EQ.IQPRNT)  GO TO 94
      WRITE(IQTYPE,9093) NVWARX(1)
   94 CONTINUE
 
      RETURN
 
 9041 FORMAT (1X/' ---------',20X,'SKIP TO NEXT ',A4,'  -----'/1X)
 9051 FORMAT (8X,2HP=,8A1,4H  D=)
 9052 FORMAT (20X,2HD=,8A1)
 9056 FORMAT (1X/23X,8HPAM-FILE,I4)
 9071 FORMAT (1X/1X,I5,4H ***,17X,2HC=,I6)
C9073 FORMAT (36X,A4,8A10)                                               A10
C9073 FORMAT (36X,A4,10A8)                                               A8
C9073 FORMAT (36X,A4,14A6)                                               A6
C9073 FORMAT (36X,A4,16A5)                                               A5
 9073 FORMAT (36X,A4,20A4)                                               A4
 9081 FORMAT (1X/I6,4H ***,20X,'RECORD LENGTH MIS-MATCH,  NEW/OLD C=',
     F2I7)
 9085 FORMAT (1X/1X,I5,4H ***,20X,'PATCH/DECK MIS-MATCH  NEW=',
     FI2,1X,8A1,'  OLD=',I2,1X,8A1)
 9092 FORMAT (1X/24X,20(1H-),I6,' FAILURES.')
 9093 FORMAT (1X,4H----,I6,' FAILURES.')
      END
C====================================================================
CDECK  ID>, YEDTEX.
      SUBROUTINE YEDTEX
 
C-    STEERING ROUTINE FOR YEDIT
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON /EDTEXT/NEDVEC,MEDVEC(22),MEDDF(22), JEDDEF,JEDREP
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      COMMON /MODTT/ NMODTT,JMODTT(6),TEXTTT(10)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (JCCF,JCCPC)
      DIMENSION    MEDTXV(48), NEXT(9), NAMLUN(8)
      EQUIVALENCE (NEXT(1),IQUEST(1))
 
 
      DATA  MEDTXV / 47, 22
     +,          4H+EOD,4H+END,4H+QUI,4H+OPT,4H+HAL,4H+NEX,4H+MAT,4H+REW
     +,          4H+STR,4H+DEF,4H+DEC,4H+PAT,4H+TIT,4H+ADB,4H+ADD,4H+REP
     +,          4H+DEL,4H+COP,4H+XCO,4H+SKI,4H+GET,4H+XSK
     +,               0,     4,     4,     4,     2,     1,     7,     1
     +,               1,     0,     2,     1,     0,     2,     2,     2
     +,               2,     2,     2,     2,     2,     2,  9,15/
      DATA  NAMLUN /4HOLD1,4HOLD2,4HOLD3,4HNEW1,4HNEW2,4HNEW3
     +,             4HOLD ,4HNEW  /
      DATA  NDRIVE /0/
 
 
C--                READY  /EDTEXT/
 
      CALL UCOPY (MEDTXV(2),NEDVEC,MEDTXV(1))
      NTRUNC = 80 - 8*MOPTIO(20)
      MCCTOU = 7
 
      IF (IQREAD.EQ.0)       GO TO 81
      LUNPAM = IQREAD
      CALL KDNGO
      NCHKD  = -1
 
C--------          CRACK NEXT C/C TO YEDIT
 
   21 CALL KDNEXT (KDHOLD(1))
      JCCTYP = 99
   22 LOGLEV = LOGLVG
      IF    (NCHKD)          80,21,24
 
   24 JCCPRE= JEDTYP (KDHOLD(1))
      IF   (JCCPRE)          96,21,25
   25 CALL YEDKRK
      JPDNEW = JCCPRE - JEDDEF
      N      = NCHCCD
      IF ((JPDNEW.LT.0).OR.(JPDNEW.GE.4))  N=NCHCCT
      WRITE (IQPRNT,9024) (KARDCC(J),J=1,N)
      IF (JCCBAD.NE.0)       GO TO 97
 
C--                COPY   F/P/D/N - PARAMETERS
 
      CALL VZERO (NVCCP(1),8)
      IF (JCCPZ.EQ.0)        GO TO 26
      NVCCP(5) = MCCPAR(JCCPZ+1)
      NVCCP(6) = MCCPAR(JCCPZ+2)                                        -A8M
   26 IF (JCCPP.EQ.0)        GO TO 27
      NVCCP(3) = MCCPAR(JCCPP+1)
      NVCCP(4) = MCCPAR(JCCPP+2)                                        -A8M
   27 IF (JCCPD.EQ.0)        GO TO 28
      NVCCP(1) = MCCPAR(JCCPD+1)
      NVCCP(2) = MCCPAR(JCCPD+2)                                        -A8M
      IF (MCCPAR(JCCPD+3).NE.-1)   GO TO 28
      NVCCP(7) = MCCPAR(JCCPD+4)
      NVCCP(8) = MCCPAR(JCCPD+5)                                        -A8M
   28 NVCCP(9) = MCCPAR(JCCPN+1)
      NTYP     = MCCPAR(JCCPT+1)
      NLEV     = MCCPAR(JCCPC+1)
      IF (NVOLD(7).GT.MAXEOF)   GO TO 49
      IF (JPDNEW.GE.0)       GO TO 31
      IF (JPDNEW.LT.-2)      GO TO 51
      JLUN = IUCOMP (NVCCP(3),NAMLUN(1),8)
      IF (JLUN.EQ.7)  JLUN=JOLD
      IF (JLUN.EQ.8)  JLUN=JNEW+3
      IF (JLUN.EQ.0)         GO TO 97
      GO TO 52
 
 
C--------          ACTION FOR        +DECK, +PATCH, +TITLE
 
   31 IF (JPDNEW.GE.4)       GO TO 41
      IF (NDRIVE.NE.0)       GO TO 35
 
C--                AUTO-REPLACE DECK WAITING,  POSITION OLD
 
      N = 2*(JPDNEW-1)
      IF (N.NE.0)  CALL UCOPY (IDEOF(1),NVCCP(1),N)
      NDRIVE= 1
      MVOLDN= 1
      CALL YEDRIV
 
C--                DRIVE UPDATE DECK FROM INPUT TO  NEW
 
   35 NDRIVE= NDRIVE - 1
      MODEPR= IQPLUS
      LOGLEV = 3
      CALL PILEUP
      GO TO 22
 
C----    ACTION FOR  +ADB,+ADD,+REPL,+DEL,+COPY,+XCOPY,+SKIP,+GET,+XSKIP
 
   41 CALL LOGLV (NTYP,JCCPC,NLEV)
      JLSV = JBYT (NTYP,28,3)
      IF (JLSV.EQ.0)           GO TO 43
      JSW  = MIN  (JLSV,3)
      JLSV = JOLD
      IF (JBIT(NTYP,24).EQ.0)  GO TO 42
      JSW  = JSW  + 3
      JLSV = JNEW + 3
   42 CALL YEDXCH (JSW)
   43 NDRIVE   = 0
      MVOLDN   = JCCPRE - JEDREP
      IF (MVOLDN.GT.0)       GO TO 44
      NDRIVE   = MAX (1,NVCCP(9))
      MVOLDN   = 1 - MVOLDN
   44 CALL YEDRIV
      IF (JLSV.NE.0)  CALL YEDXCH (JLSV)
   46 IF (MOPTIO(14)+JBIT(NTYP,14).EQ.0)  GO TO 21
   47 NEXT(1) = JPDOLD
      J = 2*JPDOLD - 1
      CALL UBLOW (IDOLDV(J),NEXT(2),8)
      WRITE (IQPRNT,9047) NEXT
      GO TO 21
 
C----              NVOLD(7).GT.MAXEOF,  DRIVE REMAINING DECKS
 
   49 IF (JCCPRE.LT.4)       GO TO 51
      IF (JCCPRE.EQ.7)       GO TO 60
      IF (JPDNEW.LT.0)       GO TO 21
      IF (JPDNEW.GE.4)       GO TO 21
      GO TO 35
 
 
C--------          OTHER C/C
 
   51 IF (JCCPRE.GE.4)       GO TO 52
      IF (JCCPT+JCCPC.EQ.0)  GO TO 52
      CALL SETOPT
      CALL LOGLV (MOPTIO(31),-JCCPC,NLEV)
      LOGLVG = LOGLEV
      NTRUNC = 80 - 8*MOPTIO(20)
   52 NDRIVE = 0
      GO TO (81, 84, 53, 21, 47, 59, 61, 71), JCCPRE
C-          END QUI OPT HAL NEX MAT REW STR
 
C--                +OPT, CCH. STRING    SET CONTOL-CHAR SUBSTITUTION
 
   53 IF (MOPTIO(3).EQ.0)    GO TO 56
      CALL VZERO (NCHCH(1),4)
      N = MIN  (14,NCHCCT-NCHCCD)
      IF (N.LT.2)            GO TO 54
      CALL ULEFT  (KARDCC(1),NCHCCD,NCHCCT)
      CALL UBUNCH (KARDCC(NCHCCD+1),NCHCH(1),N)
   54 CALL INCHCH
      GO TO 21
 
C--                +OPT, MODIF, C=C1-C2,C3-C4,C5-C6.TEXT
C--                SET PARAMETERS FOR TITLE-CARD MODIFICATION
 
   56 IF (MOPTIO(13).EQ.0)   GO TO 21
      CALL SBIT0 (MOPTIO(31),13)
      NMODTT = MIN  (NCCPC,3)
      IF (NMODTT.EQ.0)       GO TO 21
 
      CALL UBLANK (KARDCC(2),NCHCCT,79)
      JS  = 0
      NCH = 0
   57 JS = JS + 1
      JP = MCCPAR(JCCPC+1)
      N  = MCCPAR(JCCPC+2)
      N  = MAX  (N-JP,0) + 1
      JMODTT(JS)   = JP
      JMODTT(JS+3) = N
      NCH   = NCH + N
      JCCPC = JCCPC + 3
      IF (JS.NE.NMODTT)      GO TO 57
 
C     NCH = MIN  (NCH,80)                                                A8M
      NCH = MIN  (NCH,40)                                               -A8M
      CALL UBUNCH (KARDCC(NCHCCD+1),TEXTTT(1),NCH)
      GO TO 21
 
C--                +MATCH, N=NOLD
 
   59 CALL LOGLV (NTYP,JCCPC,NLEV)
      CALL YEDMAT
      GO TO 46
 
 
C----              +REWIND, STR=OLD2.
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
   60 IF (JCCPP.NE.0)        GO TO 21
      JLUN = JOLD
   61 IOTON  = 512 + 1024
      IOTOFF = 47
      LOGLEV = 0
      IF (JLUN.GE.4)         GO TO 62
 
C--                INPUT FILE 'OLD X'
 
      JLSV = JOLD
      CALL YEDXCH (JLUN)
      IF (NRTOLD+NROLD.LE.0) IOTON=256
      CALL AUXFIL (0,NVOLD(1),0)
      GO TO 66
 
C--                OUTPUT FILE 'NEW X'
 
   62 JLSV = JNEW+3
      CALL YEDXCH (JLUN)
      IF (NRTNEW+NRNEW.LE.0) GO TO 63
      CALL POPREW
      GO TO 66
 
   63 IOTON = 256
      CALL AUXFIL (64,NVNEW(1),0)
   66 CALL YEDXCH (JLSV)
      GO TO 21
 
 
C------            +STREAM, S=OLD2, F=FILE, T=ATT,RES,EOF,HOLD,DET,N=N.
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
   71 MTYP = -999
      IF (JCCPT.NE.0)   MTYP=IOTYPE (NTYP,4)
      CALL YEDXCH (JLUN)
      IF (JLUN.GE.4)         GO TO 76
 
C----              CONNECT INPUT STREAM 'OLD X'  (MAY-BE FINISH PRESENT)
 
      IF (JCCF.EQ.0)         GO TO 73
      IF (NRTOLD+NROLD.LE.0) GO TO 72
      CALL AUXFIL (512,NVOLD(1),0)
 
   72 NRTOLD  = -1
      NVOLD(3)= MCCPAR(JCCF+1)
      MAXEOF  = 999
      IF (NVCCP(9).NE.0)   MAXEOF=NVCCP(9)
      IF (MTYP.GE.0)       NVOLD(5)= MTYP
      CALL AUXFIL (256+2048,NVOLD(1),0)
      GO TO 21
 
C--                SAME FILE
 
   73 IF (NVCCP(9).NE.0)  MAXEOF=NVCCP(9)
      IF (MTYP.LT.0)         GO TO 21
      NVOLD(5)= MTYP
      GO TO 21
 
C----              CONNECT OUTPUT STREAM 'NEW X' (MAY-BE FINISH PRESENT)
 
   76 IF (JCCF.EQ.0)         GO TO 79
      IF (NRTNEW+NRNEW.LE.0) GO TO 77
      CALL POPREW
 
   77 NRTNEW  = -1
      NVNEW(3)= MCCPAR(JCCF+1)
      IF (MTYP.GE.0)      NVNEW(5)= MTYP
      CALL AUXFIL (64+256+2048,NVNEW(1),0)
      GO TO 21
 
C--                SAME FILE
 
   79 IF (MTYP.LT.0)         GO TO 21
C     NVNEW(5)= MTYP .OR. 64                                             MSKC
      NVNEW(5)= MTYP                                                    -MSK
      CALL SBIT1 (NVNEW(5),7)                                           -MSK
      GO TO 21
 
 
C------            EOF,   +END, T=HOLD, EOF, DETACH
 
   80 WRITE (IQPRNT,9080)
 
   81 MVOLD1  = 0
   82 IF (NVOLD(7).GE.MAXEOF)   GO TO 84
      CALL YEDARR
      GO TO 82
 
C--                +QUIT, HOLD,EOF,DETACH
 
   84 LOGLEV = 0
      DO 88 JLUN=1,3
      CALL YEDXCH (JLUN)
      CALL YEDXCH (JLUN+3)
      IF (NRTNEW.GE.0)  CALL POPREW
      IF (NRTOLD.GE.0)  CALL AUXFIL (512,NVOLD(1),0)
   88 CONTINUE
      RETURN
 
C----              STOP ON FAULTY C/C
 
   96 CALL UBLOW (KDHOLD(1),KARDCC(1),NCHKD)
      WRITE (IQPRNT,9024) (KARDCC(J),J=1,NCHKD)
   97 WRITE (IQPRNT,9097)
      IF (IPROMU.NE.0)       GO TO 21
      CALL PABEND
      STOP
 
 9024 FORMAT (1X/4H ...,32X,4H... ,80A1)
 9047 FORMAT (1X,I1,1X,8A1,' - IS NEXT.'/1X)
 9080 FORMAT (1X/4H ...,32X,'... STOP BY EOF ON INPUT.')
 9097 FORMAT (1X/' *** THIS LAST CONTROL-CARD IS FAULTY.')
      END
C====================================================================
CDECK  ID>, YEDRIV.
      SUBROUTINE YEDRIV
 
C-    MOVE  OLD  FORWARD, COPYING OR SKIPPING
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
C-         +DEL, +COPY, +XCOPY, +SKIP, +GET, +XSKIP
C-            1      2       3      4     5       6
 
      MVOLD1 = 0
      IF (MVOLDN.LT.4)       GO TO 14
      MVOLD1 = -1
      MVOLDN = MVOLDN - 3
 
C--                GET FILE-NAME IF UNKNOWN
 
   14 IF (NROLD.EQ.0)  CALL YEDARR
 
C--                SUBSTITUTE CURRENT PATCH/FILE FOR BLANK P=/F=
 
      IF (NVCCP(3).NE.IQBLAN)  GO TO 16
      NVCCP(3) = IDOLDV(3)
      NVCCP(4) = IDOLDV(4)                                              -A8M
   16 IF (NVCCP(5).NE.IQBLAN)  GO TO 27
      NVCCP(5) = IDOLDV(5)
      NVCCP(6) = IDOLDV(6)                                              -A8M
      GO TO 27
 
 
C-         +DEL, +COPY, +XCOPY, +SKIP, +GET, +XSKIP
C-            1      2       3      4     5       6
 
C-------           XCOPY / XSKIP PHASE
 
   24 CALL YEDARR
   27 IF (NVOLD(7).GT.MAXEOF)  RETURN
      IF (JEDCHK(IDOLDV(1),NVCCP(1)).NE.0)   GO TO 24
 
      IF (MVOLDN.GE.3)       RETURN
      MVOLD1 = MVOLDN - 2
 
C-------           SUCESSOR PHASE
 
   31 IF (NVCCP(7).NE.0)     GO TO 35
      IF (NVCCP(1).NE.0)     GO TO 32
      IF (NVCCP(3).NE.0)     GO TO 34
      IF (NVCCP(5).NE.0)     GO TO 41
 
C--                +AAA, D=DDD   OR   +AAA.
 
   32 CALL YEDARR
      RETURN
 
C--                +AAA, P=PPP   OR   +AAA, D=DDD-EEE
 
   34 CALL YEDARR
      IF (NVOLD(7).GT.MAXEOF)     RETURN
      IF (JPDOLD.GE.2)            RETURN
   35 IF (IDOLDV(1).NE.NVCCP(7))  GO TO 34
      IF (IDOLDV(2).NE.NVCCP(8))  GO TO 34                              -A8M
      GO TO 32
 
C--                +AAA, F=FFF
 
   41 CALL YEDARR
      IF (NVOLD(7).GT.MAXEOF)   RETURN
      IF (JPDOLD.NE.3)       GO TO 41
      RETURN
      END
C====================================================================
CDECK  ID>, YEDARR.
      SUBROUTINE YEDARR
 
C-    COPY 1 DECK FROM OLD TO NEW     FOR MVOLD1=0
C-    SKIP 1 DECK FROM OLD            FOR MVOLD1=-1
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
 
 9037 FORMAT (40X,'TRYING TO READ BEYOND EOI OR FILE',I4,' ON ',A4/
     F40X,'COLLECT TRAILING DECKS ONLY.')
C9042 FORMAT (5X,2H- ,A8, 6X,4H- D=)                                     A8M
C9042 FORMAT (5X,2H- ,2A6, 6H  - D=)                                     A6
C9042 FORMAT (5X,2H- ,2A5,4X,4H- D=)                                     A5
 9042 FORMAT (5X,2H- ,2A4,6X,4H- D=)                                     A4
C9043 FORMAT (21X,4H-   ,A8)                                             A8M
C9043 FORMAT (21X,4H-   ,2A6)                                            A6
C9043 FORMAT (21X,4H-   ,2A5)                                            A5
 9043 FORMAT (21X,4H-   ,2A4)                                            A4
 
 
C-------           COPY NEXT DECK
 
   21 IF (NROLD.EQ.0)        GO TO 31
      IF   (MVOLD1)          41,22,39
   22 IQ(LBUF+3)= IDOLDV(7)
      IQ(LBUF+4)= IDOLDV(8)                                             -A8M
      MODEPR = IQLETT(JOLD)
      IF (JOLD.EQ.1)  MODEPR=IQDOT
 
   27 IQ(LBUF+1) = 7
      CALL POPIN
      IF (NVARRI(3).NE.0)    GO TO 71
      CALL POPOFF
      GO TO 27
 
C----              START OF NEW FILE, GET FILE-IDENT
 
   31 IF (NVOLD(7).GE.MAXEOF)   GO TO 37
   32 CALL UCOPY (IDEOF(1),IDOLDV(1),9)
      IF (NVOLD(7).GE.MAXEOF)   RETURN
      IF (NRTOLD.GE.0)       GO TO 34
      CALL AUXFIL (256,NVOLD(1),0)
 
C--                READ FILE-NAME  RECORD
 
   34 CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 36
      IDOLDV(5) = NVARRI(5)
      IDOLDV(6) = NVARRI(6)                                             -A8M
      RETURN
 
C--                EOI READ
 
   36 MAXEOF = NVOLD(7)
      RETURN
 
C----              PASSING EOI OR DECLARED MAXIMUM
 
   37 WRITE (IQPRNT,9037) NVOLD(7),NVOLD(6)
      IF (MOPTIO(11).NE.0)   CALL PABEND
      NVOLD(7) = NVOLD(7) + 1
   39 RETURN
 
 
C-------           SKIP NEXT DECK
 
   41 IF (JPDOLD-2)          43,42,51
   42 IF (LOGLEV.LT.2)       GO TO 46
      WRITE (IQPRNT,9042) IDP
      GO TO 46
   43 IF (LOGLEV.LT.4)       GO TO 46
      WRITE (IQPRNT,9043) IDD
 
   46 IQ(LBUF+1) = -7
      CALL POPIN
      GO TO 72
 
C--                SKIP PENDING  EOF/TITLE, BUT SAVE IT IN CASE
 
   51 IQ(LBUF+1) = 7
      CALL POPIN
      MODEPR= IQMINS
      CALL PRTITL
      IF (IQ(LLAST+1).GE.-1) GO TO 56
      IQ(LBUF+1)= -1
      LDO  = LBUF
      LBUF = LLAST
      LLAST= LDO
   56 IF (NVARRI(3).EQ.0)    GO TO 46
      GO TO 72
 
C------            READY FOR NEXT DECK WAITING
 
   71 IQ(LBUF+1)= 0
      CALL POPOFF
   72 CALL SETID (IDOLDV(1))
      IF (JPDOLD.NE.3)       RETURN
 
C--                END FILE, ACCOUNT AND GET FILE-NAME OF NEXT
 
      CALL AUXFIL (0,NVOLD(1),0)
      GO TO 32
      END
C====================================================================
CDECK  ID>, YEDXCH.
      SUBROUTINE YEDXCH (JLUNP)
 
C-    SWOP ACTIVE UNITS  NEW  OR  OLD
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    JLUNP(9)
      EQUIVALENCE (LSVARE,LADRV(9))
 
 
      JLUN = JLUNP(1)
      NWSV = IQ(LSVARE+1)
      IF  (JLUN.GE.4)        GO TO 31
 
      IF (JLUN.EQ.JOLD)      RETURN
      L = IQ(LSVARE-JOLD)
      CALL UCOPY (NVOLD(1),IQ(L),NWSV)
      L = IQ(LSVARE-JLUN)
      CALL UCOPY (IQ(L),NVOLD(1),NWSV)
      NWSV = NVOLD(6)
      GO TO 37
 
   31 IF (JLUN.EQ.JNEW+3)    RETURN
      LLASTN= LLAST
      L = IQ(LSVARE-JNEW-3)
      CALL UCOPY (NVNEW(1),IQ(L),NWSV)
      L = IQ(LSVARE-JLUN)
      CALL UCOPY (IQ(L),NVNEW(1),NWSV)
      LLAST = LLASTN
      JNEW  = JLUN - 3
      NWSV  = NVNEW(6)
   37 IF (LOGLEV.LT.1)       RETURN
      WRITE (IQPRNT,9037) NWSV
      RETURN
 
 9037 FORMAT (9H ACTIVE ',A4,1H')
      END
C====================================================================
CDECK  ID>, JEDCHK.
      FUNCTION JEDCHK (IDHAVE,IDTILL)
 
C-    COMPARE  D/P/F NAMES TO BE IDENTICAL
 
      DIMENSION    IDHAVE(6),IDTILL(6)
 
 
      JEDCHK = -7
      IF (IDTILL(1).EQ.0)          GO TO 16
      IF (IDTILL(1).NE.IDHAVE(1))  RETURN
      IF (IDTILL(2).NE.IDHAVE(2))  RETURN                               -A8M
 
   16 IF (IDTILL(3).EQ.0)          GO TO 17
      IF (IDTILL(3).NE.IDHAVE(3))  RETURN
      IF (IDTILL(4).NE.IDHAVE(4))  RETURN                               -A8M
 
   17 IF (IDTILL(5).EQ.0)          GO TO 19
      IF (IDTILL(5).NE.IDHAVE(5))  RETURN
      IF (IDTILL(6).NE.IDHAVE(6))  RETURN                               -A8M
   19 JEDCHK = 0
      RETURN
      END
C====================================================================
CDECK  ID>, JEDTYP.
      FUNCTION JEDTYP (ITP)
 
C-                                               NEAR-COPY OF  JARTPX
C-    FIND C/C-TYPE, CHECK FOR C/C-CHARACTER SUBSTITUTION
C-    EVEN IN CASE OF SUBSTITUTION, DO NOT CHANGE OLD CARD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /EDTEXT/NEDVEC,MEDVEC(22),MEDDF(22), JEDDEF,JEDREP
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCHCH/ IFORPL,NOTHCC,MORGCC(6),MREPCC(6)
C--------------    END CDE                             --------------
      DIMENSION    MM(4), ITP(9)
 
      IT     = ITP(1)
      JEDTYP = -1
      CALL UBLOW (IT,MM,4)
      IF (MM(1).EQ.IQPLUS)   GO TO 21
      IF (NOTHCC.EQ.0)       RETURN
 
C--                CHECK OTHER CONTROL CHAR
 
      J = IUCOMP (MM(1),MORGCC(1),NOTHCC)
      IF (J.EQ.0)            RETURN
 
C--                IF SO, GO TO CHECK LEGAL PATCHY C/C
 
      NEWCC = MREPCC(J)
      MM(1) = IQPLUS
      JCCLOW = 0
      CALL CCTOUP (MM(2),3)
      GO TO 23
 
C----              SEEN CONTROL-CHAR   '+'
 
   21 NEWCC = 0
      JCCLOW = 0
      CALL CCTOUP (MM(2),3)
      IF (JCCLOW.EQ.0)       GO TO 24
   23 CALL UBUNCH (MM(1),IT,4)
   24 JTYP = IUCOMP (IT,MEDVEC,NEDVEC)
      IF (JTYP.EQ.0)         RETURN
      IF (NEWCC.NE.0)        GO TO 31
   27 JEDTYP = JTYP - 1
      RETURN
 
C----              SUBSTITUTE REPLACEMENT CHAR.
 
   31 IF (NEWCC.EQ.IQPLUS)   GO TO 27
      RETURN
      END
C====================================================================
CDECK  ID>, YEDKRK.
      SUBROUTINE YEDKRK
 
C-                                               NEAR-COPY OF  CCKRAK
C-    ANALYSE CONTROL-CARD INTO PARAMETER-LIST & INDEX
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /EDTEXT/NEDVEC,MEDVEC(22),MEDDF(22), JEDDEF,JEDREP
C--------------    END CDE                             -----------------  ------
 
      DIMENSION    M(80), NAME(8)
      DIMENSION    JVECT(7), NVECT(7), MSEPS(7), MSEPS2(7)
      EQUIVALENCE (JVECT(1),JCCPP), (NVECT(1),NCCPP),  (M(1),KARDCC(1))
      EQUIVALENCE (LSEP,JCCWK(1)),(JSEPI,JCCWK(2)),(NEGNUM,JCCWK(3))
     +,                                            (IFSEEN,JCCWK(4))
 
 
      DATA  MSEPS  /1HP,1HD,1HZ,1HT,1HI,1HC,1HN/
      DATA  MSEPS2 /1HS,1HR,1HF,1HX,1HY,1HL,1HN/
      DATA  NSEPS  /7/
 
C--                BLOW CARD AND FIND USEFUL LENGTH
 
      CALL UBLOW (KDHOLD(1),M(1),NCHKD+1)
      NCHCCT = MIN  (NCHKD,72) + 1
   11 NCHCCT = NCHCCT - 1
      IF (M(NCHCCT).EQ.IQBLAN) GO TO 11
 
   12 NCH = IUFIND(IQDOT,M(1),1,NCHCCT)
      IF (NCHCCT-NCH)          14,15,13
   13 IF (M(NCH+1).NE.IQCOMA)  GO TO 15
      M(NCH) = IQBLAN
      GO TO 12
 
   14 CONTINUE
   15 NCHCCD = NCH
      CALL CCTOUP (M(1),NCH-1)
      IF (JCCLOW.EQ.0)       GO TO 16
      N = IQCHAW * ( (JCCLOW-1)/IQCHAW + 1)
      IF (N.GE.NCHKD-IQCHAW+2)  N = MIN  (NCHKD+1,80)
      CALL UBUNCH (M(1),KDHOLD(1),N)
   16 M(NCH) = IQDOT
   18 NCH = NCH-1
      IF (M(NCH).EQ.IQBLAN)  GO TO 18
      CALL VZERO (NCCPAR,22)
      L = IUFIND (IQCOMA,M(1),4,NCH)
      IF (L.GE.NCH)          RETURN
      NBUNCH= 8
      LOC   = 4
 
C-----------       READ NEXT PARAMETER
 
   31 MCCPAR(LOC) = 1
   32 JPARA = 0
      GO TO 34
 
   33 JPARA = 7
   34 CALL VBLANK (NAME,8)
      N  = 0
   35 IF (L.EQ.NCH)          GO TO 38
      LA = L + 1
 
      DO 37 L=LA,NCH
      MC = M(L)
      IF  (MC.EQ.IQBLAN)     GO TO 37
      IF  (MC.EQ.IQEQU)      GO TO 41
      IF  (MC.EQ.IQCOMA)     GO TO 61
      IF  (MC.EQ.IQMINS)     GO TO 46
      IF (N.GE.8)            GO TO 37
      N = N+1
      NAME(N) = MC
   37 CONTINUE
   38 L = NCH + 1
      GO TO 61
 
C----              NAMED SEPARATOR READ
 
   41 IF (JPARA.NE.0)        GO TO 96
      JSEP  =              IUCOMP(NAME(1),MSEPS(1), NSEPS)
      IF (JSEP.EQ.0)  JSEP=IUCOMP(NAME(1),MSEPS2(1),NSEPS)
      IF (JSEP.EQ.0)         GO TO 96
      IF (JVECT(JSEP).NE.0)  GO TO 43
      IF (IFSEEN.NE.0)       GO TO 96
      JVECT(JSEP) = LOC
      LSEP  = JSEP
      NEGNUM= 0
      NBUNCH= 8
      IF (JSEP.EQ.4)  NBUNCH=1
      IF (JSEP.EQ.5)  IFSEEN=7
   42 MCCPAR(LOC) = JSEP + 1
      GO TO 33
 
C--                SAME SEPARATOR AGAIN
 
   43 IF (JSEP.NE.LSEP)      GO TO 96
      IF (JSEP.NE.5)         GO TO 33
      GO TO 42
 
C--                ACT ON '-'
 
   46 CONTINUE
 
C-----------       DIGEST PARAMETER JUST READ
 
   61 IF (LSEP.NE.0)         GO TO 71
      LSEP = MEDDF(JCCPRE+1)
      IF (LSEP.EQ.0)         GO TO 96
      IF (LSEP.EQ.4)         NBUNCH=1
      JVECT(LSEP) = LOC
      MCCPAR(LOC) = LSEP + 1
 
C-----             NORMAL PARAMETER PROCESSING
 
   71 JSEP  = LSEP
   73 IF (JSEP.LT.6)         GO TO 81
 
C--                STORE NUMERIC PARAMETER VALUE
 
      NUM = 0
      J   = 0
   77 J = J + 1
      I = IUCOMP (NAME(J),IQNUM,10)
      IF (I.EQ.0)            GO TO 96
      NUM = 10*NUM + (I-1)
      IF (J.LT.N)            GO TO 77
      IF (MCCPAR(LOC).LT.0)  GO TO 79
      MCCPAR(LOC+1) = NUM
      MCCPAR(LOC+2) = NUM
      NEGNUM= 7
      GO TO 84
 
   79 IF (NEGNUM.EQ.0)       GO TO 96
      MCCPAR(LOC-1) = NUM
      NEGNUM= 0
      GO TO 86
 
C--                STORE ALPHAMERIC PARAMETER VALUE
 
   81 CALL UBUNCH (NAME(1),MCCPAR(LOC+1),NBUNCH)
   84 NCCPAR= NCCPAR + 1
      NVECT(JSEP) = NVECT(JSEP) + 1
      LOC = LOC + 3
   86 IF (M(L).NE.IQMINS)    GO TO 87
      MCCPAR(LOC)= -1
      GO TO 33
   87 IF (L.LT.NCH)          GO TO 31
 
C------            ANALYSIS FINISHED, RESOLVE  +DEF, P/D/Z=
 
      IF (JCCPRE.EQ.JEDDEF)  GO TO 96
 
   91 CONTINUE
      MCCPAR(LOC) = 0
      JCCEND = LOC
 
C--                COMPRESS VALUES FOR  TYPE=...
 
      IF (NCCPT.EQ.0)        RETURN
      L = JCCPT
      N = NCCPT
      MM= 0
   92 J = IUCOMP (MCCPAR(L+1),IQLETT(1),30)
      IF (J.EQ.0)            GO TO 93
      CALL SBIT1 (MM,J)
   93 L = L + 3
      N = N - 1
      IF (N.NE.0)            GO TO 92
      MCCPAR(JCCPT+1)= MM
      RETURN
 
C--                FAULT
 
   96 JCCBAD= 7
      RETURN
      END
C====================================================================
CDECK  ID>, YEDMAT.
      SUBROUTINE YEDMAT
 
C-    COPY  JOLD  WITH REPLACEMENT FROM  N=NOLD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LBUFM,LADRV(8))
 
 
      JFINE = 0
      IF (NVCCP(9).EQ.0)  NVCCP(9)=2
      JMATCH = MIN  (NVCCP(9),3)
      IF (JMATCH.EQ.JOLD)    GO TO 91
      IF (LBUFM.NE.0)        GO TO 14
      LBUFM  = LBUF
      NBUFCI = 1
      CALL CREBUF
 
 
C--                SKIP INITIAL TITLE ON JMATCH
 
   14 JMAIN  = JOLD
      CALL YEDXCH (JMATCH)
      CALL VZERO (NVCCP(1),9)
      IF (NROLD.NE.0)        GO TO 31
   15 MVOLDN = 1
      CALL YEDRIV
      IF (NVOLD(7).GE.MAXEOF)   GO TO 86
      IF (JPDOLD.GE.3)          GO TO 15
 
C----              READY NEXT DECK ON JMATCH
 
   31 IQ(LBUF+3) = IDOLDV(7)
      IQ(LBUF+4) = IDOLDV(8)                                            -A8M
      IQ(LBUF+1) = 7
      CALL POPIN
 
      LTK = IQ(LBUF-2) + IQ(LBUF+13)
      CALL KDCOPY (IQ(LTK))
      NCHKD  = IQCHAW*NWTK
      JCCTYP = MCCDEF - IQ(LBUF+5)
      CALL CCKRAK (KIMA(1))
 
      CALL VBLANK (IQUEST(1),26)
      NVCCP(1) = IQBLAN
      NVCCP(2) = IQBLAN                                                 -A8M
      NVCCP(3) = 0
      NVCCP(4) = 0                                                      -A8M
      NVCCP(5) = 0
      NVCCP(6) = 0                                                      -A8M
 
      DO 36 J=1,3
      JCC = JCCPD
      JD  = 1
      JP  = 1
      IF (J.EQ.1)            GO TO 35
      JCC = JCCPP
      JD  = 3
      JP  = 10
      IF (J.EQ.2)            GO TO 35
      JCC = JCCPZ
      JD  = 5
      JP  = 19
   35 IF (JCC.EQ.0)          GO TO 36
      N  = JP + 7
      NVCCP(JD)   = MCCPAR(JCC+1)
      NVCCP(JD+1) = MCCPAR(JCC+2)                                       -A8M
      CALL UBLOW (MCCPAR(JCC+1),IQUEST(JP),8)
   36 CONTINUE
      WRITE (IQPRNT,9036) (IQUEST(J),J=1,N)
 
 
C----              COPY JMAIN TO NEW UNTIL MATCHING DECK
 
      J     = LBUF
      LBUF  = LBUFM
      LBUFM = J
      CALL YEDXCH (JMAIN)
 
      MVOLDN = 1
      CALL YEDRIV
      IF (NVOLD(7).LT.MAXEOF)   GO TO 46
      JFINE = -7
      WRITE (IQPRNT,9044) JMATCH
 
   46 J     = LBUF
      LBUF  = LBUFM
      LBUFM = J
      CALL YEDXCH (JMATCH)
      CALL UCOPY (IQ(LBUF+5),NVARRI(1),9)
 
C----              COPY MATCHING DECK FROM JMATCH TO NEW
 
      MODEPR = IQPLUS
   54 IF (JFINE.NE.0)        GO TO 55
      IQ(LBUF+1) = 0
      CALL POPOFF
   55 IF (NVARRI(3).NE.0)    GO TO 57
      IQ(LBUF+1) = 7
      CALL POPIN
      GO TO 54
 
   57 CALL SETID (IDOLDV(1))
      IF (JFINE.NE.0)        GO TO 89
      IF (NVARRI(3).LT.3)    GO TO 31
      CALL AUXFIL (0,NVOLD(1),0)
      WRITE (IQPRNT,9057)
      GO TO 89
 
C----              EXITS
 
   86 WRITE (IQPRNT,9086) JOLD
   89 CALL YEDXCH (JMAIN)
      RETURN
 
   91 WRITE (IQPRNT,9091) JOLD
      CALL PABEND
 
 9036 FORMAT (40X,'MATCH FOR  D=',9A1,2HP=,9A1,2HF=,8A1)
 9044 FORMAT (1X/40X,'MATCHING DECK NOT FOUND'/
     F40X,'SKIP PENDING DECK ON OLD',I1,' AND STOP MATCHING.')
 9057 FORMAT (40X,'MATCHING NORMAL STOP FOR EOF.')
 9086 FORMAT (40X,'MATCHING ABNORMAL STOP FOR EOI ON OLD',I1)
 9091 FORMAT (1X/' *** OLD',I1,' BOTH FOR MAIN- AND MATCH-STREAM.')
      END
C====================================================================
CDECK  ID>, YIXEX.
      SUBROUTINE YIXEX
 
C--   YINDEX, CREATE INDEX OF MULTI PAM FILE
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
 
 
      DIMENSION    MMPAT(4), MMDEC(4), MMSEQ(4)
C     DIMENSION    MSEQSP(4)                                             A8M
C     DIMENSION    MSEQSP(4), MSEQS2(4)                                  A6
      DIMENSION    MSEQSP(3), MSEQS2(4)                                 -A6M
      DIMENSION    IFLGV(2)
 
 
C     DATA         MMPAT/4HPAT ,1,1,2/,  MMDEC/4HDECK,2,1,2/             A8M
      DATA         MMPAT/4HPAT ,1,1,3/,  MMDEC/4HDECK,2,1,3/            -A8M
C     DATA         MMSEQ/4HSEQ ,2,1,1/                                   A8M
      DATA         MMSEQ/4HSEQ ,2,1,2/                                  -A8M
C     DATA         NSEQSP/4/                                             A6M
      DATA         NSEQSP/3/                                            -A6M
C     DATA         MSEQSP/6HQCARD1,6HQCARDL,7HQNOLIST,6HQEJECT/          A8M
C     DATA         MSEQSP/6HQCARD1,6HQCARDL,6HQNOLIS ,6HQEJECT/          A6
C     DATA         MSEQS2/4H      ,4H      ,4HT      ,4H      /          A6
C     DATA         MSEQSP/5HQCARD ,         5HQNOLI  ,5HQEJEC /          A5
C     DATA         MSEQS2/4H1     ,4HL     ,4HST     ,4HT     /          A5
      DATA         MSEQSP/4HQCAR  ,         4HQNOL   ,4HQEJE  /          A4
      DATA         MSEQS2/4HD1    ,4HDL    ,4HIST    ,4HCT    /          A4
      DATA         IFLGV /4H    ,4H IF /
 
 
      MOPTIO(25) = MAX  (MOPTIO(24),MOPTIO(25))
      MOPTIO(26) = MAX  (MOPTIO(25),MOPTIO(26))
      LDECKU = 0
 
      IQ(LBUF+1) = 7
      IQ(LBUF+2) = 7
      IOTON = 256
 
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
 
C-----     START NEW PAM,  READ PAM HEADER RECORD
 
   31 CALL AUXFIL (0,NVOLD(1),4HPAM )
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 71
 
      CALL UCOPY (IDEOF(1),IDOLDV(1),9)
      IDOLDV(5) = NVARRI(5)
      IDOLDV(6) = NVARRI(6)                                             -A8M
      CALL POPIN
      LTK = IABS (IQ(LARX))
      CALL KDCOPY (IQ(LTK))
      WRITE (IQPRNT,9032) IDF,NDECKR,(KIMA(J),J=1,NWTK)
      WRITE (IQPRNT,9000)
      GO TO 35
 
C-----             START NEXT RECORD
 
   34 IF (NVARRI(3).EQ.0)    GO TO 41
      IF (NVARRI(3).GE.3)    GO TO 31
      CALL SETID (IDOLDV(1))
      CALL POPIN
      IF (NVARRI(1).EQ.1)    GO TO 37
      NEWPAT = NDECKR
      IF (LOGLEV.LT.1)       GO TO 36
      WRITE (IQPRNT,9034) IDP,NDECKR
   35 NEWPAT = 0
   36 NEWDEC = 0
      CALL LIFTBK (LPATU,1,0,MMPAT(1),7)
      IQ(LPATU+1) = NDECKR
      IQ(LPATU+2) = IDOLDV(3)
      IQ(LPATU+3) = IDOLDV(4)                                           -A8M
      J = 4
      GO TO 38
 
   37 J      = 2
      NEWDEC = NDECKR
      IF (LOGLEV.LT.2)       GO TO 38
      WRITE (IQPRNT,9037) NDECKR,IDD
   38 IF (MOPTIO(25).NE.0)   GO TO 39
      CALL LIFTBK (LDECKU,J,0,MMDEC(1),7)
      IQ(LDECKU-2) = LPATU
      IQ(LDECKU+1) = NDECKR
      IQ(LDECKU+2) = IDOLDV(1)
      IQ(LDECKU+3) = IDOLDV(2)                                          -A8M
   39 LTK    = IQ(LARX)
      GO TO 421
 
 
C----              PROCESS RECORD
 
   41 CALL POPIN
   42 LTK = -IQ(LARX)
  421 IF (LTK.LT.0)          GO TO 67
      CALL KDCOPY (IQ(LTK))
      NCHKD = IQCHAW * NWTK
      JCCTYP= JARTYP (KIMA(1))
      IF (JCCTYP.EQ.0)       GO TO 67
      CALL CCKRAK(KIMA(1))
      LISTCC= 0
      IF (JCCTYP.GE.2)       GO TO 49
      IF (JCCTYP.EQ.1)       GO TO 47
      IF (JCCTYP.EQ.-1)      GO TO 45
      IF (JCCTYP.EQ.-2)      GO TO 44
      IF (JCCTYP.GE.MCCEOD)  GO TO 43
      IF (NCCPZ+NCCPT+NCCPIF.EQ.0)   GO TO 57
 
C--                C/C OTHER THEN +SELF, +SEQ, +KEEP, ACTION
 
   43 IF (MOPTIO(3).EQ.0)    GO TO 57
      GO TO 51
 
C--                +SELF, Z=...
 
   44 IF (NCCPZ.EQ.0)        GO TO 57
      IF (MOPTIO(19).EQ.0)   GO TO 57
      GO TO 51
 
C--                +SEQ, Z=...   SPECIAL: +SEQ,QCARD1,R=RNAME
 
   45 IF (JCCPD.NE.0)        GO TO 461
      IF (MOPTIO(19).EQ.0)   GO TO 57
      IF (NCCPZ.GE.2)        GO TO 51
      IF (NCCPZ.EQ.0)        GO TO 57
      IDNEWV(1) = MCCPAR(JCCPZ+1)
      IDNEWV(2) = MCCPAR(JCCPZ+2)                                       -A8M
      J = IUCOMP (IDNEWV(1),MSEQSP(1),NSEQSP)
      IF (J.EQ.0)            GO TO 51
C     IF (IDNEWV(2).NE.MSEQS2(J))       GO TO 51                         A6
C     IF (J.NE.1)            GO TO 57                                    A6M
 
      IF (J.EQ.1)            GO TO 46                                   -A6M
      IF (IDNEWV(2).NE.MSEQS2(J+1))     GO TO 51                        -A6M
      GO TO 57                                                          -A6M
   46 IF (IDNEWV(2).EQ.MSEQS2(2))       GO TO 57                        -A6M
      IF (IDNEWV(2).NE.MSEQS2(1))       GO TO 51                        -A6M
      GO TO 57
 
  461 IF (LOGLEV.LT.2)       GO TO 57
      GO TO 51
 
C--                +KEEP,...    +DEF,Z=...
 
   47 IF (JCCPT.EQ.0)        GO TO 48
      IF (JBIT(MCCPAR(JCCPT+1),4).NE.0)  GO TO 57                       -MSK
C     IF ((MCCPAR(JCCPT+1).AND.8).NE.0)  GO TO 57                        MSKC
   48 IF (MOPTIO(26).NE.0)   GO TO 481
      CALL LIFTBK (L,3,0,MMSEQ(1),0)
      IQ(L-2) = LDECKU
      IQ(L+1) = MCCPAR(JCCPZ+1)
      IQ(L+2) = MCCPAR(JCCPZ+2)                                         -A8M
  481 IF (MOPTIO(11).EQ.0)   GO TO 57
      GO TO 51
 
C--                ACTION CARDS,  +ADB,... ETC
 
   49 IF (MOPTIO(1)+MOPTIO(3).EQ.0)     GO TO 57
      IF (JCCPC.EQ.0)        GO TO 43
      IF (MOPTIO(1).EQ.0)    GO TO 57
      IF (NCCPP+NCCPD.EQ.0)  GO TO 57
 
C----              HANDLE IF= PARAMETERS
 
   51 LISTCC = 7
   57 IF (JCCPIF.EQ.0)       GO TO 61
      LISTCC = LISTCC + MOPTIO(9)
 
      LIF = JCCPIF
      NIF = NCCPIF
C  54 LP = LQFIND   (MCCPAR(LIF+1),2,1,J)                                A8M
   54 LP = LQLONG (2,MCCPAR(LIF+1),2,1,J)                               -A8M
      IF (LP.NE.0)           GO TO 56
      CALL LIFTBK (LP,1,0,MMPAT(1),7)
      IQ(LP+1) = -11111
      IQ(LP+2) = MCCPAR(LIF+1)
      IQ(LP+3) = MCCPAR(LIF+2)                                          -A8M
   56 CALL SBIT1 (IQ(LP),1)                                             -MSK
C  56 IQ(LP) = IQ(LP) .OR. 1                                             MSKC
      LIF = LIF + 3
      NIF = NIF - 1
      IF (NIF.GT.0)          GO TO 54
 
C----              LIST SELECTED C/C
 
   61 IF (LISTCC.EQ.0)       GO TO 67
      IF (LOGLEV.GE.2)       GO TO 64
      IF (NEWPAT.EQ.0)       GO TO 62
      WRITE (IQPRNT,9034) IDP,NEWPAT
      NEWPAT = 0
   62 IF (NEWDEC.EQ.0)       GO TO 64
      WRITE (IQPRNT,9037) NEWDEC,IDD
      NEWDEC = 0
   64 WRITE (IQPRNT,9062) JCARD,(KIMA(J),J=1,NWTK)
   67 JCARD = IQ(LARX+1)
      LARX  = LARX + 2
      IF (LARX.LT.LARXE)     GO TO 42
      GO TO 34
 
 
C-------           EOI OF PAM
 
   71 IF (LQUSER(1).EQ.0)    RETURN
      CALL AUXFIL (512,NVOLD(1),0)
      DO 72  J=1,3
   72 MOPTIO(J+23) = MAX  (MOPTIO(J+23),1-LQUSER(J))
      NQUSED = NQLNOR
 
C----              PRINT PATCH INDEX
 
      IF (MOPTIO(24).NE.0)   GO TO 75
      CALL QTOPSY (1)
C     CALL QSORTH   (2, 1)                                               A8M
      CALL QSORVH (2,2, 1)                                              -A8M
      NQUSED = NQLPTH + 3
      WRITE (IQPRNT,9072)
      LP = LQUSER(1)
   73 IDOLDV(3)= IQ(LP+2)
      IDOLDV(4)= IQ(LP+3)                                               -A8M
      IF ((IDP(1).EQ.IDEOF(3)).AND.(IDP(2).EQ.IDEOF(4))) GO TO 74       -A8M
C     IF  (IDP   .EQ.IDEOF(3))     GO TO 74                              A8M
      J = JBIT (IQ(LP),1)                                               -MSK
C     J = IQ(LP) .AND. 1                                                 MSKC
      IFLG = IFLGV(J+1)
      IF (IQ(LP+1).GE.0)           GO TO 731
      LN = IQ(LP-1)
      IF (LN.EQ.0)                 GO TO 731
      IF (IQ(LN+2).NE.IQ(LP+2))    GO TO 731
      IF (IQ(LN+3).NE.IQ(LP+3))    GO TO 731                            -A8M
      LP = LN
  731 NDECKR = IQ(LP+1)
      WRITE (IQPRNT,9074) IFLG,NDECKR,IDP
      NQUSED = NQUSED + 1
   74 LP = IQ(LP-1)
      IF (LP.NE.0)           GO TO 73
      NQUSED = MOD (NQUSED,NQLMAX)
 
 
C----              PRINT DECK INDEX
 
   75 IF (MOPTIO(25).NE.0)   GO TO 81
      CALL QTOPSY (2)
C     CALL QSORTH   (2, 2)                                               A8M
      CALL QSORVH (2,2, 2)                                              -A8M
      J      = 0
      NQUSED = NQUSED + 1
      IF (NQUSED+10.LT.NQLNOR) GO TO 78
      J      = 1
      NQUSED = NQLPTH
   78 NQUSED = NQUSED + 3
      WRITE (IQPRNT,9075) J
      LD = LQUSER(2)
   76 LP = IQ(LD-2)
      NDECKR   = IQ(LD+1)
      IDOLDV(1)= IQ(LD+2)
      IDOLDV(2)= IQ(LD+3)                                               -A8M
      IDOLDV(3)= IQ(LP+2)
      IDOLDV(4)= IQ(LP+3)                                               -A8M
      IF (IDOLDV(1).EQ.IQBLAN)   GO TO 77
      WRITE (IQPRNT,9076) NDECKR,IDP,IDD
      NQUSED = NQUSED + 1
 
C--                CHECK DUPLICATE DECK
 
      LN = LD
  763 LN = IQ(LN-1)
      IF (LN.EQ.0)                GO TO 77
      IF (IQ(LN+2).NE.IDOLDV(1))  GO TO 77
      IF (IQ(LN+3).NE.IDOLDV(2))  GO TO 77                              -A8M
      IF (IQ(LN-2).NE.LP)    GO TO 763
      WRITE (IQPRNT,9077) IDP,IDD
      WRITE (IQPRNT,9078)
      NQUSED = NQUSED + 2
   77 LD = IQ(LD-1)
      IF (LD.NE.0)           GO TO 76
      NQUSED = MOD (NQUSED,NQLMAX)
 
C----              PRINT SEQ INDEX
 
   81 IF (MOPTIO(26).NE.0)   RETURN
      CALL QTOPSY (3)
C     CALL QSORTH   (1, 3)                                               A8M
      CALL QSORVH (1,2, 3)                                              -A8M
      J      = 0
      NQUSED = NQUSED + 1
      IF (NQUSED+10.LT.NQLNOR) GO TO 83
      J      = 1
      NQUSED = NQLPTH
   83 NQUSED = NQUSED + 3
      WRITE (IQPRNT,9081) J
      L = LQUSER(3)
   82 LD       = IQ(L-2)
      LP       = IQ(LD-2)
      NDECKR   = IQ(LD+1)
      IDOLDV(1)= IQ(LD+2)
      IDOLDV(2)= IQ(LD+3)                                               -A8M
      IDOLDV(3)= IQ(LP+2)
      IDOLDV(4)= IQ(LP+3)                                               -A8M
      IDOLDV(5)= IQ(L+1)
      IDOLDV(6)= IQ(L+2)                                                -A8M
      WRITE (IQPRNT,9082) NDECKR,IDP,IDD,IDF
   86 L = IQ(L-1)
      IF (L.NE.0)            GO TO 82
      RETURN
 
 9000 FORMAT (1X)
 9001 FORMAT (1H1)
C9032 FORMAT (1X/3H F=,A10,    5H-----,I6,6H .--- ,8A10)                 A10
C9032 FORMAT (1X/3H F=,A8,   7H  -----,I6,6H .--- ,10A8)                 A8
C9032 FORMAT (1X/3H F=,A6,A2,7H  -----,I6,6H .--- ,14A6)                 A6
C9032 FORMAT (1X/3H F=,2A5,    5H-----,I6,6H .--- ,16A5)                 A5
 9032 FORMAT (1X/3H F=,2A4,  7H  -----,I6,6H .--- ,20A4)                 A4
C9034 FORMAT (7X,3HP= ,A8,   I6,6H . D= )                                A8M
C9034 FORMAT (7X,3HP= ,A6,A2,I6,6H . D= )                                A6
C9034 FORMAT (7X,3HP= ,A5,A3,I6,6H . D= )                                A5
 9034 FORMAT (7X,3HP= ,2A4,  I6,6H . D= )                                A4
C9037 FORMAT (18X,I6,6H . D= ,A8)                                        A8M
C9037 FORMAT (18X,I6,6H . D= ,2A6)                                       A6
C9037 FORMAT (18X,I6,6H . D= ,2A5)                                       A5
 9037 FORMAT (18X,I6,6H . D= ,2A4)                                       A4
C9062 FORMAT (30X,I7,3H - ,8A10)                                         A10
C9062 FORMAT (30X,I7,3H - ,10A8)                                         A8
C9062 FORMAT (30X,I7,3H - ,13A6,A2)                                      A6
C9062 FORMAT (30X,I7,3H - ,16A5)                                         A5
 9062 FORMAT (30X,I7,3H - ,20A4)                                         A4
 9072 FORMAT (20H1   INDEX OF PATCHES /4X,8(1H-),1X,7(1H-)/1X)
C9074 FORMAT (A4,I6,3H = ,A8,1H.)                                        A8M
C9074 FORMAT (A4,I6,3H = ,A6,A2,1H.)                                     A6
C9074 FORMAT (A4,I6,3H = ,A5,A3,1H.)                                     A5
 9074 FORMAT (A4,I6,3H = ,2A4,1H.)                                       A4
 9075 FORMAT (I1,11X,15HINDEX OF  DECKS/12X,8(1H-),2X,5(1H-)/1X)
C9076 FORMAT (3X,I6,3H = ,A8,2H. ,A8)                                    A8M
C9076 FORMAT (3X,I6,3H = ,A6,A2,2H. ,2A6)                                A6
C9076 FORMAT (3X,I6,3H = ,A5,A3,2H. ,2A5)                                A5
 9076 FORMAT (3X,I6,3H = ,2A4,  2H. ,2A4)                                A4
C9077 FORMAT (31X,'***** DUPLICATE ',A8,   1H., A8,' NOT ALLOWED')       A8M
C9077 FORMAT (31X,'***** DUPLICATE ',A6,A2,1H.,A6,A3,'NOT ALLOWED')      A6
C9077 FORMAT (31X,'***** DUPLICATE ',A5,A3,1H.,2A5,'NOT ALLOWED')        A5
 9077 FORMAT (31X,'***** DUPLICATE ',2A4,  1H.,2A4,' NOT ALLOWED')       A4
 9078 FORMAT (31X,15(1H*))
 9081 FORMAT (I1,22X,24HINDEX OF  SEQUENCE  DEF./23X,8(1H-),2X,8(1H-)
     F/1X)
C9082 FORMAT (3X,I6,3H = ,A8,1H.,A8,4H Z= ,A8)                           A8M
C9082 FORMAT (3X,I6,3H = ,A6,A2,1H.,A6,A2,4H Z= ,2A6)                    A6
C9082 FORMAT (3X,I6,3H = ,A5,A3,1H.,A5,A3,4H Z= ,2A5)                    A5
 9082 FORMAT (3X,I6,3H = ,2A4,  1H.,2A4,  4H Z= ,2A4)                    A4
      END
C====================================================================
CDECK  ID>, YLISEX.
      SUBROUTINE YLISEX
 
C-    YLIST, LIST CARD IMAGES OF COMPACT BINARY FILE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
     +, MARKW(5),LASTP(2),NEWP(2),LASTD(2),NEWD(2)
     +, MODEPR,NEXTCC,NUINCA,NUINCB
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MARK(4)
      EQUIVALENCE (MARK(1),MARKW(2))
 
C     DIMENSION    NSEQEJ(1)                                             A8M
      DIMENSION    NSEQEJ(2)                                            -A8M
      DIMENSION    LPPAGE(4)
      DATA  NSEQEJ /4HQEJE,4HCT  /
 
      DATA  LPPAGE / 56, 62, 84, 110 /
C--                SET LINES PER PAGE IF OPTION-SELECTED
 
      DO 16  J=1,4
      IF (MOPTIO(J+26).NE.0)  GO TO 17
   16 CONTINUE
      GO TO 18
 
   17 NQLNOR = LPPAGE(J)
      NQLMAX = NQLNOR
      NQLPTH = 0
   18 CONTINUE
      JCWYL  = -7
      NQUSED = 12
 
 
      IQ(LBUF+1) = 7
      IQ(LBUF+2) = 7
      IOTON = 256
 
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
C-----     START NEW PAM,  READ PAM HEADER RECORD
 
   21 CALL AUXFIL (0,NVOLD(1),4HPAM )
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 29
 
      CALL UCOPY (IDEOF(1),IDOLDV(1),9)
      IDOLDV(5) = NVARRI(5)
      IDOLDV(6) = NVARRI(6)                                             -A8M
      IF (JCWYL.GE.0)  NQUSED = NQLNOR
      JCARD  = 0
      CALL YLISPG
      JCARD  = 1
      JCWYL  = 1
      MODEPR = IQMINS
      GO TO 36
 
C--                E O I
 
   29 CALL AUXFIL (512,NVOLD(1),0)
      N = NQLMAX - NQLPTH
      WRITE (IQPRNT,9027) N,LPPAGE
 
      IF (NVWARX(1)+NVWARX(2).EQ.0)     RETURN
      WRITE (IQPRNT,9029)  (NVWARX(J),J=1,2)
      RETURN
 
 
C----              READ RECORD BY RECORD AND LIST CARDS
 
   31 IF (NVARRI(3).EQ.0)    GO TO 36
      NVCCP(1) = JCARD
      IF (NVARRI(3).GE.3)    GO TO 21
      CALL SETID (IDOLDV(1))
 
   36 CALL POPIN
      IF (NVARRI(1).EQ.0)    GO TO 52
      IF (NVARRI(1).EQ.3)    GO TO 52
 
C--                ANALYZE P/D CARD
 
      LTK    = IQ(LARX)
      CALL KDCOPY (IQ(LTK))
      NCHKD = IQCHAW * NWTK
      JCCTYP= MCCDEF - NVARRI(1)
      CALL CCKRAK (KIMA(1))
      CALL YLISPG
      IF (MOPTIO(23).EQ.0)   GO TO 37
      WRITE (IQPRNT,9043) JCWYL,JCARD,IQPLUS,(KIMA(J),J=1,NWTK)
      GO TO 38
 
   37 WRITE (IQPRNT,9047) JCARD,IQPLUS,(KIMA(J),J=1,NWTK)
   38 MODEPR = IQMINS
      JCARD  = JCARD + 1
      JCWYL  = JCWYL + 1
      NQUSED = NQUSED + 1
      IF (JCCBAD.NE.0)       GO TO 79
 
C--                LIST CARD-GROUP WITH WYLBUR LINES
 
   41 NEXTCC = IQ(LARX+1)
      IF (MOPTIO(23).EQ.0)   GO TO 46
   42 IF (JCARD.EQ.NEXTCC)   GO TO 51
      CALL KDCOPY (IQ(LTK))
      IF (NQUSED.GE.NQLNOR)  GO TO 44
   43 WRITE (IQPRNT,9043) JCWYL,JCARD,MODEPR,(KIMA(J),J=1,NWTK)
      JCARD  = JCARD + 1
      JCWYL  = JCWYL + 1
      NQUSED = NQUSED + 1
      GO TO 42
 
   44 CALL YLISPG
      IF (MOPTIO(23).NE.0)   GO TO 43
      GO TO 47
 
C--                LIST CARD-GROUP WITHOUT WYLBUR LINES
 
   46 IF (JCARD.EQ.NEXTCC)   GO TO 51
      CALL KDCOPY (IQ(LTK))
      IF (NQUSED.GE.NQLNOR)  GO TO 44
   47 WRITE (IQPRNT,9047) JCARD,MODEPR,(KIMA(J),J=1,NWTK)
      JCARD  = JCARD + 1
      NQUSED = NQUSED + 1
      GO TO 46
 
C--                YTOBIN PACKING INCONSISTENCY
 
   50 WRITE (IQPRNT,9050)
      NVWARX(2) = NVWARX(2) + 1
      NQUSED    = NQUSED + 3
      LTK = - IQ(LARX+2)
 
C--                NEW C/C GROUP
 
   51 IF (LTK+IQ(LARX+2) .NE.0)    GO TO 50
      LARX = LARX + 2
      IF (LARX.GE.LARXE)     GO TO 31
   52 LTK  = IQ(LARX)
      IF (LTK.GE.0)          GO TO 41
 
C----              ANALYSE C/C
 
      LTK = -IQ(LARX)
      CALL KDCOPY (IQ(LTK))
      NCHKD  = IQCHAW*NWTK
      JCCTYP = JARTYP (KIMA(1))
      CALL CCKRAK (KIMA(1))
      MARK(1) = IQBLAN
      MARK(2) = JCARD
      MARK(3) = IQBLAN
      MARK(4) = IQPLUS
      NUINCB  = 1
      IF (JCCTYP+1)          54,57,61
 
C--                +SELF, ALL OTHER C/C
 
   54 MODEPR = IQMINS
      IF (JCCTYP.EQ.-2)      GO TO 71
      GO TO 73
 
C--                +CDE / +SEQ,   HANDLE Z=QEJECT
 
   57 MARK(3)= IQDOT
      MARK(4)= MODEPR
      IF (MCCPAR(JCCPZ+1).NE.NSEQEJ(1))  GO TO 73
      IF (MCCPAR(JCCPZ+2).NE.NSEQEJ(2))  GO TO 73                       -A8M
      IF (NQUSED.LT.10)                  GO TO 73
      IF (JCCBAD.NE.0)                   GO TO 73
      NUINCA = NQLMAX - NQUSED
      IF (NUINCA.EQ.0)                   GO TO 81
      IF (NUINCA.LT.10)                  GO TO 75
      IF (MOPTIO(5)+MOPTIO(19).NE.2)     GO TO 73
      IF (JCCPN.EQ.0)                    GO TO 75
      IF (NQUSED+MCCPAR(JCCPN+1).GE.NQLNOR)       GO TO 75
      GO TO 73
 
C--                +KEEP / +DEL / +REPL / +ADD / +ADB
 
   61 MODEPR = IQDOT
      IF (JCCTYP.EQ.1)       GO TO 72
      IF (NCCPC .NE.0)       GO TO 62
      IF (JCCTYP.EQ.2)       GO TO 54
      JCCBAD = 7
 
   62 JCCPD   = MAX  (1,JCCPD)
      NEWD(1) = MCCPAR(JCCPD+1)
      NEWD(2) = MCCPAR(JCCPD+2)                                         -A8M
      IF (JCCPP.EQ.0)           GO TO 65
      NEWP(1) = MCCPAR(JCCPP+1)
      NEWP(2) = MCCPAR(JCCPP+2)                                         -A8M
      IF (NVUTY(17).EQ.0)       GO TO 68
      IF (NEWP(1).NE.LASTP(1))  GO TO 68
      IF (NEWP(2).NE.LASTP(2))  GO TO 68                                -A8M
      GO TO 66
 
   64 JCCBAD = 7
      GO TO 72
 
 
   65 IF (NVUTY(17).EQ.0)    GO TO 64
      IF (JCCPD.EQ.1)        GO TO 72
   66 CONTINUE
      IF (NEWD(2).NE.LASTD(2))   GO TO 68                               -A8M
      IF (NEWD(1).EQ.LASTD(1))   GO TO 72
 
   68 NVUTY(17)= NEWP(1)
      LASTP(1) = NEWP(1)
      LASTP(2) = NEWP(2)                                                -A8M
      LASTD(1) = NEWD(1)
      LASTD(2) = NEWD(2)                                                -A8M
 
C--                PRINT CURRENT C/C
 
   71 MARK(3)= IQMINS
   72 NUINCB = 4
      NQUSED = NQUSED + 1
      MARK(1)= IQNUM(1)
 
   73 NUINCA = 1
      IF (NQUSED+NUINCB.GE.NQLNOR)  GO TO 81
   75 IF (MOPTIO(23).EQ.0)   GO TO 77
      MARKW(1) = MARKW(2)
      MARKW(2) = JCWYL
      WRITE (IQPRNT,9076)  MARKW, (KIMA(J),J=1,NWTK)
      GO TO 78
 
   77 WRITE (IQPRNT,9077)  MARK,  (KIMA(J),J=1,NWTK)
   78 JCARD  = JCARD  + 1
      JCWYL  = JCWYL  + 1
      NQUSED = NQUSED + NUINCA
      IF (JCCBAD.EQ.0)       GO TO 41
 
   79 WRITE (IQPRNT,9079)
      NQUSED = NQUSED + 1
      NVWARX(1) = NVWARX(1) + 1
      GO TO 41
 
C--                PAGE EJECT
 
   81 CALL YLISPG
      MARK(1) = IQBLAN
      NUINCA  = 1
      GO TO 75
 
 9027 FORMAT (1X/1X,14(1H-)/' LINES PER PAGE'/' ACTIVE:',I7/
     F1X/' THE OPTIONS  0,  1,  2,  3'/' SELECT:',3X,4I4)
 9029 FORMAT (1X,3(/1X,44(1H*)),I6,' FAULTY CONTROL CARDS SEEN'/
     F45X,I6,' PACKING INCONSISTENCIES.')
 9050 FORMAT (1X/20X,18(1H*),
     F'  YTOBIN PACKING INCONSISTENCY DETECTED IN LAST CARD GROUP   '
     F,18(1H*)/1X)
C9043 FORMAT (4X,I6,1H.,I6,1X,A2,8A10)                                   A10
C9043 FORMAT (8X,I6,1H.,I6,1X,A2,10A8)                                   A8
C9043 FORMAT (2X,I6,1H.,I6,1X,A2,14A6)                                   A6
C9043 FORMAT (4X,I6,1H.,I6,1X,A2,16A5)                                   A5
 9043 FORMAT (4X,I6,1H.,I6,1X,A2,20A4)                                   A4
C9047 FORMAT (1X,I6,1X,A2,8A10)                                          A10
C9047 FORMAT (7X,I6,1X,A2,10A8)                                          A8
C9047 FORMAT (3X,I6,1X,A2,14A6)                                          A6
C9047 FORMAT (1X,I6,1X,A2,16A5)                                          A5
 9047 FORMAT (3X,I6,1X,A2,20A4)                                          A4
C9076 FORMAT (A4,I6,1H.,I6,A1,A2,8A10)                                   A10
C9076 FORMAT (A8,I6,1H.,I6,A1,A2,10A8)                                   A8
C9076 FORMAT (A2,I6,1H.,I6,A1,A2,14A6)                                   A6
C9076 FORMAT (A4,I6,1H.,I6,A1,A2,16A5)                                   A5
 9076 FORMAT (A4,I6,1H.,I6,A1,A2,20A4)                                   A4
C9077 FORMAT (A1,I6,A1,A2,8A10)                                          A10
C9077 FORMAT (A7,I6,A1,A2,10A8)                                          A8
C9077 FORMAT (A3,I6,A1,A2,14A6)                                          A6
C9077 FORMAT (A1,I6,A1,A2,16A5)                                          A5
 9077 FORMAT (A3,I6,A1,A2,20A4)                                          A4
 9079 FORMAT (1X,40(1H*),20X,'ABOVE C/C IS FAULTY')
      END
C====================================================================
CDECK  ID>, YLISPG.
      SUBROUTINE YLISPG
 
C-    PRINT  PAGE / DECK  HEADER LINE
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
 
 
 9001 FORMAT                (1H1,I4,61X,3H P=,2A4,3H D=,2A4,1X,I2,
     F21X,4HPAGE,I4/1X)
 9002 FORMAT (1X/1X,I4,A5,A4,2X,50(1H=),3H P=,2A4,3H D=,2A4,4H  1 ,
     F28(1H=)/1X)
 9003 FORMAT   (1H1,I4,A5,A4,2X,50(1H=),3H P=,2A4,3H D=,2A4,4H  1 ,
     F19(1H=),5H PAGE,I4/1X)
 
 
C--------          NEW PAGE, NOT FIRST OF CURRENT DECK
 
      IF (JCARD.EQ.0)        GO TO 31
      NQPAGE(2) = NQPAGE(2) + 1
      WRITE (IQPRNT,9001) NDECKR,IDP,IDD,IQPAGE,NQPAGE(2)
      IQPAGE = IQPAGE + 1
      NQUSED = NQLPTH + 2
      RETURN
 
C--------          START OF NEW DECK, PAGE OPTION ON
 
   31 IF (MOPTIO(19).EQ.0)     GO TO 41
      IF (JBIT(MCCPAR(JCCPT+1),10) .NE.0)  GO TO 70                     -MSK
C     IF ((MCCPAR(JCCPT+1).AND.512).NE.0)  GO TO 70                      MSKC
      IF (NVARRI(1).NE.1)      GO TO 74
      IF (NVCCP(1) .GE.6)      GO TO 74
      IF (NQUSED.GE.NQLPTH+7)  GO TO 74
      IF (JBIT(MCCPAR(JCCPT+1),5) .EQ.0)   GO TO 71                     -MSK
C     IF ((MCCPAR(JCCPT+1).AND.16).EQ.0)   GO TO 71                      MSKC
      GO TO 74
 
C--------          START OF NEW DECK, PAGE OPTION OFF
 
   41 CONTINUE
 
C--                PAGE 1 WITHOUT EJECT
 
   70 IF (NQUSED+6.GE.NQLNOR)  GO TO 74
   71 WRITE (IQPRNT,9002) NDECKR,IDF,IDP,IDD
      NQUSED = NQUSED + 3
      IQPAGE = 2
      RETURN
 
C--                PAGE 1 WITH EJECT
 
   74 NQPAGE(2) = NQPAGE(2) + 1
      WRITE (IQPRNT,9003) NDECKR,IDF,IDP,IDD,NQPAGE(2)
      NQUSED = NQLPTH + 2
      IQPAGE = 2
      RETURN
      END
C====================================================================
CDECK  ID>, YSEREX.
      SUBROUTINE YSEREX
 
C-    YSEARCH, SEARCH COMPACT PAM-FILE FOR SPECIFIED TEXT-STRINGS
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,    LASTEX, MCONTI
     +,    NINDX,NTOTCC,NCHOVF,NSPLIT,LUNSCR, LIMITF,MINSER
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDOLDV(1)), (IDP(1),IDOLDV(3)), (IDF(1),IDOLDV(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MPR(30)
      EQUIVALENCE (LINDX,LQMAIN), (LUNEW,NVNEW(1)), (MPR(1),MWK(1))
 
 
C---  INDX-BANK    INDEX TO ALL FIRST LETTERS
 
C-                         - J  CHAIN OF TEXT-BANKS, THIS LETTER
C-                 LINDX   + 0  (STATUS)
C-                         + J  FIRST LETTER OF STRING
 
 
C---  TEXT-BANK    DESCRIBES 1 STRING TO BE SEARCHED
 
C-                         - 3  IF CONDITION-BANK : NEXT SUCH
C-                         - 2  ATTACHED CONDITION BANK
C-                         - 1  NEXT TEXT-BANK WITH SAME START LETTER
C-                 LTEXT   + 0  (STATUS)
C-                         + 1  NCHREP  +VE LENGTH REPLACEMENT STRING
C-                                        0 REPORT, BUT NO REPLACEMENT
C-                                       -N SPLIT-OUTPUT STREAM N
C-                                     -255 BY-PASS
C-                                     -511 CONDITION-BANK
C-                         + 2  NCHSER-1, SEARCH STRING HAS NCHSER CHAR.
C-                         + 3  NCHSKI, SKIP CHAR. AFTER SEARCH-STRING
C-                         + 4  NFIX +VE: FIXED POSITION STRING
C-                         + 5  JCARD OF LAST SATISFACTION, IF CONDITIO.
C-                         + 6  SEARCH-STRING WITHOUT FIRST CHAR.
C-                                      FORMAT  A1
C-                 + NCHSER +5  REPLACEMENT-STRING (IF ANY)
C-                              COMPACT FORMAT  ( A10 ON CDC )
 
C---  SPLI-BANK    LINEAR CHAIN OF POINTERS TO ALL SPLIT-OUTPUT STRINGS
 
C-                         - 2  POINTER TO TEXT-BANK
C-                         - 1  NEXT SPLI-BANK
C-                 LSPLI   + 0  (STATUS)
C-                         + 1  FIRST LETTER OF STRING
 
 
C-    LQMAIN       HOLD  INDX-BANK
C-    LQUSER(7)    STRING CONDITION TEXT-BANKS VIA LINK 3
C-    LQUSER(6)    HOLD LINEAR SPLI-STRUCTURE
 
 
      DIMENSION    MMINDX(4), MMTEXT(4), MMSPLI(4), NNREPL(6)
      DATA  MMINDX /4HINDX,60,0,60/
      DATA  MMTEXT /4HTEXT, 2,1,2H**/
      DATA  MMSPLI /4HSPLI, 2,1,1/
      DATA  NNREPL /1H+,1H-,1H*,1H&,1H!,1H? /
      DATA  NCHSKI /0/,  NCHFL /10/,  NCFULL /80/
      DATA  LCOND  /0/, NFIX /0/, KFIX /7/, MREPL /0/, NAPDON /0/
      DATA  NOPERS /0/
 
 
C------            INITIALISE
 
      CALL LIFTBK (LINDX,0,0,MMINDX(1),0)
      LUNSCR = LUNVN(3)
      NSPLIT = -1
      NINDX  = 0
      LIMITF = 0
      MINSER = 80
      MCONTI = 0
      MCCTOU = -7
 
      MCCDF(NCCDFI+MCCPAM)= 4
 
      LUNPAM = IQREAD
      NCHKD  = -1
      CALL KDNGO
 
C------    READ DATA CARDS FOR SEARCH, BUILD SEARCH-DIRECTORY
 
   11 CALL KDNEXT (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 41
      CALL UBLOW  (KDHOLD(1),KARDCC(1),NCHKD)
 
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JCCTYP.EQ.MCCPAM)  GO TO 14
      IF (JCCTYP.NE.MCCOPT)  GO TO 20
   14 WRITE (IQPRNT,9011)  (KARDCC(J),J=1,NCHKD)
      CALL CCKRAK (KDHOLD(1))
 
      IF (JCCBAD.NE.0)       GO TO 18
      IF (JCCPT.EQ.0)        GO TO 15
      CALL SETOPT
      CALL LOGLV (MOPTIO(31),0,0)
      LOGLVG = LOGLEV
   15 IF (JCCTYP.NE.MCCOPT)  GO TO 40
      NAPDON = 0
 
 
C--                +OPTION, ACTION, N=CHAR
 
      NPARC = MCCPAR(JCCPC+1)
      NPARN = MCCPAR(JCCPN+1)
      JCLR  = 1
      IF (MOPTIO(1).EQ.0)    GO TO 151
      J     = MIN  (6,NPARN)
      J     = MAX  (1,J)
      MREPL = NNREPL(J)
      MCONTI= NPARC
      GO TO 17
 
C--                +OPT, IF  (,FIX, COL=N)
 
  151 IF (MOPTIO(9).EQ.0)    GO TO 153
      IF (MOPTIO(14).EQ.0)   GO TO 154
  153 LCOND = 0
      CALL SBIT0 (MOPTIO(31),14)
      MOPTIO(14) = 0
 
C--                +OPT, FIX, COL=N
 
  154 IF (MOPTIO(6).EQ.0)    GO TO 156
      JCLR = 6
      NFIX = NPARC
      GO TO 17
 
C--                +OPT, BYPASS,JOIN,SPLIT, C=COL, N=NCHSKIP
 
  156 IF (NCCPN.NE.0)  NCHSKI=NPARN
      IF (NCCPC.EQ.0)        GO TO 19
      N = MIN  (NPARC,81)
      IF (N.GE.2)  NCHFL=N-1
      IF (NCCPC.EQ.1)        GO TO 19
      NCFULL = MIN  (MCCPAR(JCCPC+4),80)
      NCFULL = MAX  (NCFULL,NCHFL)
      GO TO 19
 
   17 CALL SBIT0 (MOPTIO(31),JCLR)
      MOPTIO(JCLR) = 0
      GO TO 11
 
   18 WRITE (IQPRNT,9018)
   19 GO TO 11
 
 
C----              PRINT SEARCH CARD WITH ASSOCIATED FLAGS
 
   20 IF (NAPDON.NE.0)       GO TO 202
      NAPDON = 7
      CALL VBLANK (MWK,80)
      DO 201  J=1,80,NCHFL
      N = J
  201 MWK(N) = IQAPO
      IF (MOPTIO(19).EQ.0)  N=NCHFL+1
      WRITE (IQPRNT,9020) (MWK(J),J=1,N)
 
  202 CALL VBLANK (MPR(1),30)
      CALL SETNUM (NCHSKI,IQUEST(1),MPR(2))
      MPR(11) = IQDOT
      MPR(17) = IQDOT
      MPR(23) = IQDOT
      MPR(29) = IQMINS
      MMTEXT(2) = 2
 
      NCHKD  = MIN  (NCHKD,NCFULL)
      MJOIN  = MIN  (MOPTIO(10),-(NSPLIT+1))
      NWREP  = 0
      NCHREP = 0
      IF (MOPTIO(9).EQ.0)    GO TO 205
      IF (LCOND.NE.0)        GO TO 204
      CALL UCTOH1 ('SET ACCEPT IF',MPR(9),13)
      MMTEXT(2) = 3
      NCHREP = -511
      GO TO 207
 
  203 MOPTIO(2) = 1
      CALL SBIT1 (MOPTIO(31),2)
      WRITE (IQPRNT,9022) NQBITW
      GO TO 205
 
  204 CALL UBLOW (5HIF OK,MPR(9),5)
  205 IF (MOPTIO(2).EQ.0)    GO TO 206
      CALL UBLOW  (6HBYPASS,MPR(16),6)
      NCHREP = -255
      GO TO 207
 
  206 IF (NFIX.EQ.0)  LIMITF=80
      IF (MOPTIO(19).EQ.0)   GO TO 207
      N = - (NSPLIT+MJOIN)
      IF (N.GT.NQBITW)       GO TO 203
      CALL SETNUM (N,IQUEST(1),MPR(17))
      CALL UBLOW  (5HSPLIT,MPR(15),5)
 
  207 IF (NFIX.EQ.0)         GO TO 209
      CALL SETNUM (NFIX,IQUEST(1),MPR(23))
      CALL UBLOW  (3HFIX,MPR(23),3)
      LIMITF = MAX  (LIMITF,NFIX)
  209 WRITE (IQPRNT,9021) MPR,(KARDCC(J),J=1,NCHKD)
 
 
C----              ANALYSE SEARCH-CARD
 
C--                DISCARD TRAILING BLANKS IN BOTH FIELDS
 
   22 J = MIN  (NCHFL,NCHKD)
   23 IF (KARDCC(J).NE.IQBLAN)  GO TO 24
      J = J - 1
      IF (J.NE.0)            GO TO 23
      GO TO 11
 
   24 IF (KARDCC(J).EQ.IQDOLL)  J=J-1
      NCHSER = MAX  (J,1)
 
      IF (NCHREP.LE.-255)    GO TO 31
      NOPERS = NOPERS + 1
      NF2 = 0
      IF (NCHKD.LE.NCHFL)    GO TO 28
      J = NCHKD
   26 IF (KARDCC(J).NE.IQBLAN)  GO TO 27
      J = J-1
      IF (J.NE.NCHFL)        GO TO 26
      GO TO 28
 
   27 IF (KARDCC(J).EQ.IQDOLL)  J=J-1
      NF2    = J - NCHFL
   28 NCHREP = NSPLIT + MJOIN
      IF (MOPTIO(19).NE.0)   GO TO 31
      NCHREP = NF2
      IF (NCHREP.EQ.0)       GO TO 31
      NWREP  = (NCHREP-1)/IQCHAW+1
 
C--        CHECK FIRST LETTER IS IN INDEX
 
   31 IFIRST = KARDCC(1)
      IF (NINDX.EQ.0)        GO TO 33
      J = IUCOMP (IFIRST,IQ(LINDX+1),NINDX)
      IF (J.NE.0)            GO TO 34
   33 NINDX = NINDX + 1
      IQ(LINDX+NINDX) = IFIRST
      J = NINDX
 
 
C--                CREATE TEXT-BANK,
C--                LINKED INTO TEXT-CHAIN FOR THIS FIRST LETTER
 
   34 K = KQLAST (LINDX-J)
      MMTEXT(4) = 4 + NCHSER + NWREP
      CALL LIFTBK (L,K,0,MMTEXT(1),0)
      IQ(L-2) = LCOND
      IQ(L+1) = NCHREP
      IQ(L+2) = NCHSER - 1
      IQ(L+3) = NCHSKI
      IQ(L+4) = NFIX
      CALL UCOPY (KARDCC(2),IQ(L+6),NCHSER-1)
      IF (NCHREP.LE.-255)    GO TO 351
      MINSER = MIN  (MINSER,NCHSER-1)
      IF  (NCHREP)           36,11,35
   35 CALL UBUNCH (KARDCC(NCHFL+1),IQ(L+NCHSER+5),NCHREP)
      GO TO 11
 
C--             CONDITION STRING
 
  351 IF (NCHREP.NE.-511)    GO TO 11
      IQ(KFIX) = L
      IQ(L+5)  = -7
      KFIX  = L-3
      LCOND = L
      NFIX  = 0
      GO TO 11
 
C--                SPLIT-OUTPUT STRING
 
   36 CALL LIFTBK (LM,6,0,MMSPLI,0)
      IQ(LM-2) = L
      IQ(LM+1) = IFIRST
      NSPLIT   = NSPLIT - 1  + MJOIN
      IF (NF2.EQ.0)          GO TO 11
      MJOIN = 1
      NCHKD = NCHKD - NCHFL
      CALL UCOPY (KARDCC(NCHFL+1),KARDCC(1),NCHKD)
      GO TO 22
 
 
C----      END OF DATA CARDS ON INPUT
 
   40 N = MCCPAR(JCCPN+1)
      IF (N.NE.0)  MAXEOF=N
   41 IF (NOPERS.EQ.0)       GO TO 84
      WRITE (IQPRNT,9011)
      CALL AUXFIL (324,NVNEW(1),5HCARDS)
C-                 324 =  4 CARDS, 64 OUTPUT, 256 INIT
 
      IQ(LBUF+1) = 7
      NVOLD(7)   = -1
      IOTON = 256
 
C---------         SEARCH PACKED PAM-FILE
 
C--                READ FILE-NAME RECORD
 
   47 IF (NVOLD(7)+1.GE.MAXEOF)   GO TO 91
      CALL AUXFIL (0,NVOLD(1),4HPAM )
      CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 90
      CALL UCOPY (IDEOF(1),IDOLDV(1),9)
      IDOLDV(5) = NVARRI(5)
      IDOLDV(6) = NVARRI(6)                                             -A8M
      NEWPAT    = NDECKR
      WRITE (IQPRNT,9042) IDF,NDECKR
      IF (LQUSER(6).NE.0)    CALL YSERBF
      IF (MOPTIO(20).EQ.0)   GO TO 49
   48 CALL POPIN
      IF (NVARRI(3).EQ.0)    GO TO 48
      GO TO 66
 
   49 IF (MOPTIO(3).EQ.0)    GO TO 60
      WRITE (LUNEW,8042)
      NRNEW  = NRNEW + 1
 
 
C--                READ NEXT RECORD
 
   60 NEWDEC = 7
      LASTEX = -7
   61 CALL POPIN
      LTK    = LINBIN + NVARRI(9)
      NTOTCC = JCARD  + NVARRI(8)
 
C--                PROCESS CURRENT RECORD
 
      JCARD = JCARD - 1
   62 CALL YSFIND
      IF (NCHOVF.LT.0)       GO TO 66
      IF (MREPL.NE.0)  WRITE (LUNEW,9061) MREPL,IDP,IDD,JCARD
      IF (NEWPAT.EQ.0)       GO TO 63
      WRITE (IQPRNT,9068) IDP,NEWPAT
      NEWPAT = 0
   63 IF (NEWDEC.EQ.0)       GO TO 64
      NEWDEC = 0
      WRITE (IQPRNT,9062)  NDECKR,IDD,JCARD,(KARDCC(J),J=1,NCHCCT)
      GO TO 65
 
   64 WRITE (IQPRNT,9063)             JCARD,(KARDCC(J),J=1,NCHCCT)
   65 WRITE (LUNEW, 8062)                   (KARDCC(J),J=1,NCHCCT)
      LASTEX = JCARD
      NRNEW  = NRNEW + 1
      IF (NCHOVF.EQ.0)       GO TO 62
      WRITE (IQPRNT,9065) (MWK(J),J=73,NCHOVF)
      GO TO 62
 
C--                RECORD FINISHED, CHECK NEXT IS P/D
 
   66 IF (NVARRI(3).EQ.0)    GO TO 61
      L = LQUSER(7)
   67 IF (L.EQ.0)            GO TO 68
      IQ(L+5) = -7
      L = IQ(L-3)
      GO TO 67
   68 IF (NVARRI(3).GE.3)    GO TO 47
      CALL SETID (IDOLDV(1))
      IF (JPDOLD.EQ.1)       GO TO 69
      NEWPAT = NDECKR + 1
      IF (LOGLEV.LT.1)       GO TO 69
      WRITE (IQPRNT,9068) IDP,NEWPAT
      NEWPAT = 0
 
   69 IF (LQUSER(6).EQ.0)    GO TO 60
      CALL YSERBF
      GO TO 60
 
 
C--                NO SEARCH CARDS
 
   84 WRITE (IQPRNT,9084)
      CALL PABEND
 
C--        END OF INFORMATION ON PAM
 
   90 CONTINUE
   91 CALL AUXFIL (512,NVOLD(1),0)
      CALL AUXFIL (512,NVNEW(1),0)
 
      IF (IQ(6).EQ.0)        RETURN
      JPDOLD = 4
      CALL YSERBF
      RETURN
 
 8042 FORMAT ('+TITLE.')
 8062 FORMAT (80A1)
 9011 FORMAT (1X/1X,80A1)
 9018 FORMAT (1X/1X,40(1H*),'  FAULTY CONTROL CARD IGNORED.')
 9020 FORMAT (7H NCHSKI,23X,81A1)
 9021 FORMAT (110A1)
 9022 FORMAT (1X/' *** ONLY UP TO',I4,
     F' SPLIT-OUTPUT STRINGS CAN BE HANDLED, SET BYPASS.'/1X)
C9042 FORMAT (1X/1X,19(1H-)/1X/2H ',A8,I9)                               A8M
C9042 FORMAT (1X/1X,19(1H-)/1X/2H ',2A6,I5)                              A6
C9042 FORMAT (1X/1X,19(1H-)/1X/2H ',2A5,I7)                              A5
 9042 FORMAT (1X/1X,19(1H-)/1X/2H ',2A4,I9)                              A4
C9061 FORMAT (A1,6HREPL, ,A8,   2H, ,A8,   1H,,I7)                       A8M
C9061 FORMAT (A1,6HREPL, ,A6,A2,2H, ,A6,A2,1H,,I7)                       A6
C9061 FORMAT (A1,6HREPL, ,A5,A3,2H, ,A5,A3,1H,,I7)                       A5
 9061 FORMAT (A1,6HREPL, ,2A4,  2H, ,2A4,  1H,,I7)                       A4
C9062 FORMAT (13X,I6,3H D=,A8,   I6,3H - ,72A1,1H.,8A1)                  A8M
C9062 FORMAT (13X,I6,3H D=,A6,A2,I6,3H - ,72A1,1H.,8A1)                  A6
C9062 FORMAT (13X,I6,3H D=,A5,A3,I6,3H - ,72A1,1H.,8A1)                  A5
 9062 FORMAT (13X,I6,3H D=,2A4,  I6,3H - ,72A1,1H.,8A1)                  A4
 9063 FORMAT (30X,I6,3H - ,72A1,1H.,8A1)
 9065 FORMAT (29X,10HOVERFLOW ',80A1)
C9068 FORMAT (3X,2HP=,A8,I6)                                             A8M
C9068 FORMAT (3X,2HP=,A6,A2,I6)                                          A6
C9068 FORMAT (3X,2HP=,A5,A3,I6)                                          A5
 9068 FORMAT (3X,2HP=,2A4,I6)                                            A4
 9084 FORMAT (1X/' *** NO REAL OPERATION REQUESTED.')
      END
C====================================================================
CDECK  ID>, YSFIND.
      SUBROUTINE YSFIND
 
C-    TEXT-SEARCHING, PROCESS CARDS UNTIL NEXT ACTIVE CARD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,    LASTEX, MCONTI
     +,    NINDX,NTOTCC,NCHOVF,NSPLIT,LUNSCR, LIMITF,MINSER
C--------------    END CDE                             -----------------  ------
 
      EQUIVALENCE (LINDX,LQMAIN), (LUNEW,NVNEW(1))
 
 
 
 
      NCHOVF = -7
      IFLMON = 0
      IFLSPL = 0
      NSPLIT = 0
      GO TO 11
 
C--                WRITE LAST CARD IF COPY-OPTION
 
   10 IF (MOPTIO(3).EQ.0)    GO TO 11
      CALL UBUNCH (KARDCC(1),MWK(1),NCH)
      CALL XOUTCF (LUNEW,MWK(1),NWTK)
      NRNEW  = NRNEW + 1
 
C--                READY NEXT CARD
 
   11 JCARD = JCARD + 1
      IF (JCARD.GE.NTOTCC)   RETURN
      LE = LTK + KDNWT1 - 1
      DO 12 L=LTK,LE
      IF (AND(IQ(L),Z'FF000000').EQ.0)    GO TO 14
   12 CONTINUE
      NWTK = KDNWT
      NCH  = 80
      GO TO 15
 
   14 NWTK = L - LTK + 1
      NCH  = NWTK * IQCHAW - 1
 
   15 CALL UBLOW (IQ(LTK),KARDCC(1),NCH)
      NCHCCT = NCH
      LTK    = LTK + NWTK
 
C--                CHECK CONTINUATION CARD
 
      IF (MCONTI.EQ.0)           GO TO 17
      IF (LASTEX+1.NE.JCARD)     GO TO 17
      IF (KARDCC(6).EQ.IQBLAN)   GO TO 17
      DO 16 J=1,5
      IF (KARDCC(J).NE.IQBLAN)   GO TO 17
   16 CONTINUE
      IFLMON = 7
   17 CONTINUE
 
C----              ANALYSE EACH CHARACTER
 
      NRUN = MIN  (NCH,72)
      LIMIT= MIN  (NRUN-MINSER,LIMITF)
      JRUN = 0
      NGET = 0
      NPUT = 0
 
C--                CHECK START CHARACTER IS IN INDEX-BANK
 
   21 IF (JRUN.GE.LIMIT)     GO TO 61
      JRUN = JRUN + 1
 
      JFIRST = IUCOMP (KARDCC(JRUN),IQ(LINDX+1),NINDX)
      IF (JFIRST.EQ.0)       GO TO 21
      LTEXT = IQ(LINDX - JFIRST)
      GO TO 27
 
C--                CONDITION PROCESSING
 
   23 IF (IQ(LCOND+5).EQ.JCARD) GO TO 272
      GO TO 24
 
  232 IF (NFIX.EQ.JRUN)      GO TO 271
 
C--                COMPARE FOR TEXT-STRINGS STARTING WITH THIS CHAR.
 
   24 LTEXT = IQ(LTEXT-1)
      IF (LTEXT.EQ.0)        GO TO 21
 
   27 NFIX = IQ(LTEXT+4)
      IF   (NFIX.NE.0)       GO TO 232
  271 LCOND = IQ(LTEXT-2)
      IF (LCOND.NE.0)        GO TO 23
  272 JN     = JRUN
      NCHSER = IQ(LTEXT+2)
      IF (NCHSER.EQ.0)       GO TO 41
      IF (NCHSER+JRUN.GT.NRUN)  GO TO 24
      NF = LTEXT + 6
      NL = NF+NCHSER-1
      DO 28 J = NF,NL
      JN = JN + 1
      IF (KARDCC(JN).NE.IQ(J))  GO TO 24
   28 CONTINUE
 
C--                STRING FOUND, REPLACE UNLESS  NCHREP=0 OR -VE
 
   41 JN     = MIN  (JN+IQ(LTEXT+3),NRUN)
      NCHREP = IQ(LTEXT+1)
      IF  (NCHREP)           46,43,42
   42 N = JRUN - NGET - 1
      CALL UCOPY (KARDCC(NGET+1),MWK(NPUT+1),N)
      NGET  = JN
      NPUT  = NPUT + N
      CALL UBLOW (IQ(LTEXT+NCHSER+6),MWK(NPUT+1),NCHREP)
      NPUT  = NPUT + NCHREP
   43 IFLMON= 7
      JRUN  = JN
      GO TO 21
 
C--                CONDITION SATISFIED
 
   45 IQ(LTEXT+5) = JCARD
      GO TO 21
 
C--                -VE NCHREP,  CONDITION, BYPASS OR SPLIT STRING
 
   46 JRUN = JN
      IF (NCHREP.EQ.-255)    GO TO 21
      IF (NCHREP.EQ.-511)    GO TO 45
      CALL SBIT1 (NSPLIT,-NCHREP)
      IFLSPL= 7
      GO TO 21
 
 
C--        END OF CARD. CHECK REPLACEMENTS, COPY REMAINING CHARACTERS
 
   61 IF (IFLMON+IFLSPL.EQ.0)    GO TO 10
      IF (IFLSPL.EQ.0)           GO TO 63
      CALL YSERBF
      IFLSPL = 0
      NSPLIT = 0
 
   63 IF (IFLMON.EQ.0)       GO TO 10
      NCHOVF = 0
      IF (NPUT.EQ.0)         RETURN
      IF (NGET.GE.NRUN)      GO TO 71
      N = NRUN - NGET
      CALL UCOPY (KARDCC(NGET+1),MWK(NPUT+1),N)
      NPUT = NPUT + N
 
C--        CARD WITH TAG
 
   71 IF (NCH.LT.73)         GO TO 81
      MISS = 72 - NPUT
      IF (MISS)              77,73,72
   72 CALL VBLANK (KARDCC(NPUT+1),MISS)
   73 CALL UCOPY (MWK(1),KARDCC(1),NPUT)
      RETURN
 
C--        DISCARD TRAILING BLANKS IN OVERFLOW
 
   77 IF (NPUT.EQ.72)        GO TO 73
      IF (MWK(NPUT).NE.IQBLAN)  GO TO 78
      NPUT = NPUT - 1
      GO TO 77
 
   78 NCHOVF = NPUT
      NPUT   = 72
      GO TO 73
 
C--        CARD WITHOUT TAG
 
   81 IF (MWK(NPUT).NE.IQBLAN)  GO TO 82
      NPUT = NPUT - 1
      GO TO 81
 
   82 IF (NPUT.GE.73)        GO TO 86
   83 CALL UCOPY (MWK(1),KARDCC(1),NPUT)
      NCHCCT = NPUT
      RETURN
 
C--        REMAINING OVERFLOW
 
   86 NCHOVF = NPUT
      NPUT   = 72
      GO TO 83
      END
C====================================================================
CDECK  ID>, YSERBF.
      SUBROUTINE YSERBF
 
C-    SPLIT-OUTPUT BUFFER HANDLING
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,    LASTEX, MCONTI
     +,    NINDX,NTOTCC,NCHOVF,NSPLIT,LUNSCR
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    MMSBUF(4)
 
 
      DATA  MMSBUF /4HSBUF,0,0,510/,  NW/0/, NALL/0/
 
 
C---  SBUF-BANK    SPLIT-OUTPUT BUFFER RECORD
 
C-         LLAST + 0  (STATUS)
C-               + 1  START-SIGNAL:  0 CONT, 1 DECK, 2 PATCH, 3 FILE
C-                                   4 END-OF-BUFFER FILE
C-               + 2  DECK-NAME, PATCH-NAME, FILE-NAME
C-               + 3  -A8M
C-               + 4  DECK-NUMBER
C-               + 5  START OF FIRST CARD  (L=4)
 
C-    EACH CARD: L+1  NWC - LENGTH OF ENTRY, NWC=NWTK+3
C-                +2  STREAM-INDICARORS, BIT J SET IF CARD TO STREAM J
C-                +3  CARD-NUMBER
C-                +4  NWTK WORDS OF CARD-TEXT
 
 9041 FORMAT (1X/' SPLIT-OUTPUT BUFFER CONTAINS',I6,' CARDS.')
 9044 FORMAT (1H1,79(1H-)/1X)
 9046 FORMAT (47X,33HYSEARCH SPLIT-OUTPUT FOR STRING .,40A1)
C9055 FORMAT (30X,I7,3H - ,8A10)                                         A10
C9055 FORMAT (30X,I7,3H - ,10A8)                                         A8
C9055 FORMAT (30X,I7,3H - ,13A6,A2)                                      A6
C9055 FORMAT (30X,I7,3H - ,16A5)                                         A5
 9055 FORMAT (30X,I7,3H - ,20A4)                                         A4
C9056 FORMAT (13X,I6,3H D=,A8,   I7,3H - ,8A10)                          A10
C9056 FORMAT (13X,I6,3H D=,A8,   I7,3H - ,10A8)                          A8
C9056 FORMAT (13X,I6,3H D=,A6,A2,I7,3H - ,13A6,A2)                       A6
C9056 FORMAT (13X,I6,3H D=,A5,A3,I7,3H - ,16A5)                          A5
 9056 FORMAT (13X,I6,3H D=,2A4,  I7,3H - ,20A4)                          A4
C9063 FORMAT (3X,2HP=,A8)                                                A8M
C9063 FORMAT (3X,2HP=,2A6)                                               A6
C9063 FORMAT (3X,2HP=,2A5)                                               A5
 9063 FORMAT (3X,2HP=,2A4)                                               A4
C9065 FORMAT (1X/1X,19(1H-)/1X/2H ',A8,I9)                               A8M
C9065 FORMAT (1X/1X,19(1H-)/1X/2H ',2A6,I5)                              A6
C9065 FORMAT (1X/1X,19(1H-)/1X/2H ',2A5,I7)                              A5
 9065 FORMAT (1X/1X,19(1H-)/1X/2H ',2A4,I9)                              A4
 
 
   17 IF (JPDOLD.NE.0)       GO TO 31
 
 
C------            COPY NEW CARD TO SPLIT-BUFFER
 
      N = NWTK + 3
      IF (N+NW.GE.MMSBUF(4)) GO TO 27
   22 LP = LLAST + NW
      IQ(LP+1) = N
      IQ(LP+2) = NSPLIT
      IQ(LP+3) = JCARD
      CALL UBUNCH (KARDCC(1),IQ(LP+4),NCHCCT)
      NW   = NW + N
      NALL = NALL + 1
      RETURN
 
C----              SEND COMPLETED BUFFER TO FILE
 
   25 JPDOLD = -7
   26 IF (NW.EQ.0)           GO TO 30
   27 WRITE (LUNSCR) NW,(IQ(LLAST+J),J=1,NW)
      IQ(LLAST+1) = 0
      NW = 4
      IF (JPDOLD.EQ.0)       GO TO 22
      IF (JPDOLD.GE.0)       GO TO 32
      IQ(LLAST+1) = 1
      GO TO 34
 
C-------           START-OF-SOMETHING
 
   30 CALL LIFTBK (LLAST,0,0,MMSBUF,0)
      REWIND LUNSCR
      NW = 4
   31 IF (NW.NE.4) GO TO 26
   32 IQ(LLAST+1) = JPDOLD
      IQ(LLAST+4) = NDECKR + 1
      GO TO (34,36,37,39,41), JPDOLD
 
C--                1 NEW DECK
   34 IQ(LLAST+2) = IDOLDV(1)
      IQ(LLAST+3) = IDOLDV(2)                                           -A8M
      JPDOLD = 0
      RETURN
 
C--                2  NEW PATCH
   36 IQ(LLAST+2) = IDOLDV(3)
      IQ(LLAST+3) = IDOLDV(4)                                           -A8M
      GO TO 25
 
C--                3  NEW FILE
   37 IQ(LLAST+2) = IDOLDV(5)
      IQ(LLAST+3) = IDOLDV(6)                                           -A8M
      IQ(LLAST+4) = NDECKR
      GO TO 25
 
C--                4  END-OF-RUN
   39 JPDOLD = 5
      GO TO 27
 
 
C--------------    OUTPUT PHASE, PRINT EACH STRING    ------------------
 
   41 WRITE (IQPRNT,9041) NALL
      IF (NALL.EQ.0)         RETURN
      CALL QTOPSY (6)
      LNEXT = LQUSER(6)
 
   44 REWIND LUNSCR
      LSPLI = LNEXT
      IF (LSPLI.EQ.0)        RETURN
      L      = IQ(LSPLI-2)
      JSPLIT = -IQ(L+1)
      NSPLIT = 0                                                         MSK
      CALL SBIT1 (NSPLIT,JSPLIT)                                         MSK
      WRITE (IQPRNT,9044)
 
   45 NCHSER = IQ(L+2) + 1
      MWK(1) = IQ(LSPLI+1)
      CALL UCOPY (IQ(L+6),MWK(2),NCHSER)
      WRITE (IQPRNT,9046) (MWK(J),J=1,NCHSER)
 
C--                CHECK NEXT STRING IS ON SAME STREAM
 
      LNEXT = IQ(LSPLI-1)
      IF (LNEXT.EQ.0)        GO TO 51
      L = IQ(LNEXT-2)
      IF (-IQ(L+1).NE.JSPLIT)  GO TO 51
      LSPLI = LNEXT
      GO TO 45
 
 
C--                NEXT RECORD
 
   51 READ (LUNSCR) NW,(IQ(LLAST+J),J=1,NW)
      JPDOLD = IQ(LLAST+1)
      IF (JPDOLD.NE.0)       GO TO 61
   53 L    = LLAST + 4
      LEND = LLAST + NW
      N    = 0
 
C--                NEXT CARD
 
   54 L = L + N
      IF (L.GE.LEND)         GO TO 51
      N = IQ(L+1)
C     IF ((IQ(L+2).AND.NSPLIT).EQ.0)   GO TO 54                          MSKC
      IF (JBIT(IQ(L+2),JSPLIT).EQ.0)   GO TO 54                         -MSK
      IF (IDNEWV(1).NE.0)    GO TO 56
      WRITE (IQPRNT,9055) (IQ(L+J),J=3,N)
      GO TO 54
 
   56 IF (IDNEWV(3).EQ.0)    GO TO 57
      WRITE (IQPRNT,9063) IDP
      IDNEWV(3) = 0
   57 WRITE (IQPRNT,9056) NDECKR,IDD,(IQ(L+J),J=3,N)
      IDNEWV(1) = 0
      GO TO 54
 
C----              START NEW DECK, ETC.
 
   61 IDNEWV(1) = IQ(LLAST+2)
      IDNEWV(2) = IQ(LLAST+3)                                           -A8M
      NDECKR    = IQ(LLAST+4)
      GO TO (53,63,65,44), JPDOLD
   63 IF (LOGLEV.LT.1)       GO TO 64
      WRITE (IQPRNT,9063) IDD
      IDNEWV(3) = 0
      GO TO 51
 
   64 IDNEWV(3) = IDNEWV(1)
      IDNEWV(4) = IDNEWV(2)                                             -A8M
      GO TO 51
 
C--                NEW FILE
 
   65 WRITE (IQPRNT,9065) IDD,NDECKR
      GO TO 51
      END
C====================================================================
CDECK  ID>, YSHFEX.
      SUBROUTINE YSHFEX
 
C-    YSHIFT, DE-ACTIVATION/ACTIVATION OF CARDS
C-            ACCORDING TO YSHIFT-TAGS IN COLS. 73-80
 
      COMMON /SLATE/ ISLATE(40)
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,    NINDX,NTOTCC,LEV,NCHTAG,NWWTAG, KD1ORG,KD1REP
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (JCCF,JCCPC)
      EQUIVALENCE (LINDX,LQMAIN),(LKARD,LQUSER(2)),(LMAC,LQUSER(3))
      DIMENSION    MTRANS(2), MNAMES(8), MACID(8),   KARD(80)
      EQUIVALENCE (NLVMAX,MNAMES(6)), (KARD(1),KARDCC(1))
      EQUIVALENCE (MACID(1),IQUEST(1))
 
 
      DATA  MNAMES /4HIND ,60,0,60,   4HKDS ,5,0,420/
      DATA  MTRANS /4HC   , 4H    /,  MOLD/4HOLD /, MNEW/4HNEW /
 
 
C--        SET UP MACRO BANKS
 
      IF (LOGLEV.GE.2)   WRITE (IQPRNT,9001)
      CALL YSHMAC (4HA4  ,33,'TAG,A4,-A5,A6,A8,A10,A5M,A6M,A8M.')
      CALL YSHMAC (4HA5  ,33,'TAG,A5,A5M,-A4,A6,A8,A10,A6M,A8M.')
      CALL YSHMAC (4HA6  ,33,'TAG,A6,A5M,A6M,-A4,A5,A8,A10,A8M.')
      CALL YSHMAC (4HA8  ,33,'TAG,A8,A5M,A6M,A8M,-A4,A5,A6,A10.')
      CALL YSHMAC (4HA10 ,33,'TAG,A10,A5M,A6M,A8M,-A4,A5,A6,A8.')
 
      CALL YSHMAC (4HB32 ,40,'TAG,B32,-B36,B48,B60,B64,B36M,B48M,B60M.')
      CALL YSHMAC (4HB36 ,40,'TAG,B36,B36M,-B32,B48,B60,B64,B48M,B60M.')
      CALL YSHMAC (4HB48 ,40,'TAG,B48,B36M,B48M,-B32,B36,B60,B64,B60M.')
      CALL YSHMAC (4HB60 ,40,'TAG,B60,B36M,B48M,B60M,-B32,B36,B48,B64.')
      CALL YSHMAC (4HB64 ,40,'TAG,B64,B36M,B48M,B60M,-B32,B36,B48,B60.')
 
      CALL YSHMAC (4HOCT ,13,'TAG,OCT,-HEX.')
      CALL YSHMAC (4HHEX ,13,'TAG,HEX,-OCT.')
      CALL YSHMAC (4HL20 ,13,'TAG,L20,-L30.')
      CALL YSHMAC (4HL30 ,13,'TAG,L30,-L20.')
 
      CALL YSHMAC (4HIBM ,37,'MAC,A4,B32,HEX,L30,+IBM,-UNI,PDP,CDC.')
      CALL YSHMAC (4HUNI ,37,'MAC,A6,B36,OCT,L30,+UNI,-IBM,PDP,CDC.')
      CALL YSHMAC (4HPDP ,37,'MAC,A5,B36,OCT,L30,+PDP,-IBM,UNI,CDC.')
      CALL YSHMAC (4HCDC ,38,'MAC,A10,B60,OCT,L30,+CDC,-IBM,UNI,PDP.')
      CALL YSHMAC (4HVAX ,36,'MAC,A4,B32,HEX,L30,-IBM,UNI,PDP,CDC.')
      CALL YSHMAC(5HNORD ,36,'MAC,A4,B32,OCT,L30,-IBM,UNI,PDP,CDC.')
 
C--        LIFT INDEX BANK FOR TAG BANK POINTERS
 
      CALL LIFTBK (LINDX,0,0,MNAMES(1),0)
 
C--        LIFT BANK FOR MULTI-LEVEL CARD-BUFFER
C--        LINK N POINTS TO CARD OF LEVEL N
 
      CALL LIFTBK (LKARD,0,0,MNAMES(5),0)
      CALL VZERO (IQ(LKARD+1),MNAMES(8))
      J = 3
      DO 10 I=1,NLVMAX
      IQ(LKARD-I) = LKARD + J
   10 J           = J + 83
 
      CALL SBYT (KDMARK,MTRANS(1),KDPOST,KDBITS)
      CALL SBYT (KDMARK,MTRANS(2),KDPOST,KDBITS)
 
      NVOLD(6) = MOLD
      NVNEW(6) = MNEW
      MODEPR   = IQPLUS
      NWWTAG   = 73/IQCHAW + 1
      NCINP    = 0
 
      LUNPAM = IQREAD
      NCHKD  = -1
      IF (IQREAD.NE.0)  CALL KDNGO
 
 
C--        RESTART WITH OPTION  'CLEAR'
 
      LWSAV  = LQWORK
   11 LQWORK = LWSAV
      N      = MNAMES(2)
      CALL VZERO (IQ(LINDX-N),N)
      NINDX  = 0
      IF (IQREAD.EQ.0)       GO TO 55
 
C--        RESTART CONTINUE
 
   12 IF (IQREAD.EQ.0)       GO TO 98
      WRITE (IQPRNT,9011)
      MCCTOU = 7
 
 
C--------- READ DATA CARDS
 
   15 CALL KDNEXT (KDHOLD(1))
      IF (NCHKD.LT.0)        GO TO 97
      NCINP = NCINP + 1
      CALL UBLOW  (KDHOLD(1),KARDCC(1),NCHKD)
      WRITE (IQPRNT,9015) NCINP,(KARDCC(J),J=1,NCHKD)
 
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JCCTYP.EQ.0)       GO TO 21
      CALL CCKRAK (KDHOLD(1))
 
      IF (JCCTYP.EQ.MCCQUI)  GO TO 97
      IF (JCCTYP.EQ.MCCPAM)  GO TO 51
      IF (JCCTYP.NE.MCCOPT)  GO TO 15
 
C--            ANALYSE  +OPTION, T=CLEAR,BYPASS,ALL,UNKNOWN
 
      CALL SETOPT
      CALL LOGLV (MOPTIO(31),-JCCPC,MCCPAR(JCCPC+1))
      LOGLVG = LOGLEV
      MOPTIO(21) = MAX  (MOPTIO(21),MOPTIO(1))
      IF (MOPTIO(3).EQ.0)    GO TO 15
      CALL SBIT0 (MOPTIO(31),3)
      GO TO 11
 
 
C--        STORE NEW SELECTOR CARD IN CARD-BUFFER AT LEVEL 1
 
   21 LEV   = 1
      L     = IQ(LKARD-1)
      NCHKD = MIN  (NCHKD,72)
 
      CALL ULEFT (KARDCC(1),1,NCHKD)
      NCHKD = ISLATE(1)
      IF (NCHKD.EQ.0)        GO TO 15
      CALL CCTOUP (KARDCC(1),NCHKD)
      CALL UCOPY (KARDCC(1),IQ(L+1),NCHKD)
 
   26 NCHKD   = IUFIND (IQDOT,IQ(L+1),1,NCHKD) - 1
      IQ(L-1) = NCHKD
      IQ(L)   = 0
 
C--        GET CARD ANALYZED NOW
 
   27 CALL YSHANL
 
      IF (LMAC.NE.0)         GO TO 31
      LEV = LEV - 1
      IF (LEV.EQ.0)          GO TO 15
      GO TO 27
 
C--        NEW MACRO
 
   31 LEV   = LEV + 1
      L     = IQ(LKARD-LEV)
      NCHKD = IQ(LMAC+3)
 
      CALL UBLOW (IQ(LMAC+1),MACID(1),8)
      CALL UBLOW (IQ(LMAC+4),IQ(L+1),NCHKD)
      N1 = L + 1
      N2 = L + NCHKD
      WRITE (IQPRNT,9031) MACID, (IQ(J),J=N1,N2)
      GO TO 26
 
 
C---------         SEARCH PACKED PAM-FILE
 
C--        +PAM, F=FNAME, T=ATTACH,RESUME,EOF,HOLD,DETACH, N=MAX
 
   51 IF (JCCF.EQ.0)         GO TO 55
      IF (NRTOLD.LT.0)       GO TO 54
      CALL AUXFIL (512,NVOLD(1),0)
   54 NRTOLD = -1
      NVOLD(3) = MCCPAR(JCCF+1)
 
   55 NVOLD(5) = IOTYPE (MCCPAR(JCCPT+1),4)
      MAXEOF   = MCCPAR(JCCPN+1)
      IF (MAXEOF.EQ.0)  MAXEOF = 999
      CALL AUXFIL (256+2048,NVOLD(1),0)
      NCINP = MAX  (NCINP,1)
      MCCTOU = 0
 
C--                READ FILE-IDENT RECORD
 
   61 CALL POPIN
      IF (NVARRI(1).EQ.4)    GO TO 12
      LPRDEC = 0
      LPRPAT = 0
      JMODDK = 0
      JMODPT = 0
      KD1ORG = 0
      JTRANS = 2*MOPTIO(24) + MOPTIO(25)
      IF (JTRANS.EQ.0)       GO TO 65
      JTRANS = MIN  (JTRANS,2)
      KD1ORG = MTRANS(3-JTRANS)
      KD1REP = MTRANS(JTRANS)
 
C--                READ NEXT RECORD AND SEND IT TO POPOFF RIGHT AWAY
 
   65 IQ(LBUF+1) = 7
      CALL POPIN
      LTK    = LINBIN + NVARRI(9)
      NTOTCC = JCARD  + NVARRI(8)
 
      IQ(LBUF+1) = 0
      CALL POPOFF
 
C--            IF OPTION *BYPASS* , JUST COPY
 
      IF (MOPTIO(2).NE.0)    GO TO 81
 
 
C--                START OF PATCH/DECK, CHECK T=ASL,COMP,DATA
 
      IF (NVARRI(1).EQ.0)    GO TO 71
      IF (NVARRI(1).GE.3)    GO TO 71
      JCCTYP = MCCDEC
      NWKD   = KDSTEP (IQ(LTK),1)
      NCHKD  = KDNCHW*NWKD - 1
      CALL CCKRAK (IQ(LTK))
C     JMODDK = MCCPAR(JCCPT+1) .AND. 13                                  MSKC
      JMODDK = JBYTET (13,MCCPAR(JCCPT+1),1,4)                          -MSK
      LPRDEC = NDKNEW-1
      IF (NVARRI(1).EQ.1)    GO TO 67
      LPRPAT = LPRDEC
      LPRDEC = 0
      JMODPT = JMODDK
   67 IF (JMODDK.EQ.0)       JMODDK=JMODPT
C     IF ((JMODDK.AND.4).NE.0)   JMODDK=0                                MSKC
      IF (JBIT(JMODDK,3).NE.0)   JMODDK=0                               -MSK
 
C--                PROCESS CURRENT RECORD
 
   71 IF (JMODDK.NE.0)       GO TO 81
      JCARD = JCARD - 1
   72 CALL YSHTAG
      IF (NCHTAG.LT.0)       GO TO 81
      IF (LOGLEV.GE.3)       GO TO 74
      IF (LOGLEV.GE.1)       GO TO 73
      IF (LPRPAT.EQ.0)       GO TO 73
      WRITE (IQPRNT,9043) IDP,LPRPAT
      LPRPAT = 0
   73 IF (LPRDEC.EQ.0)       GO TO 74
      WRITE (IQPRNT,9044) LPRDEC,IDD
      LPRDEC = 0
 
   74 IF (NCHTAG.NE.0)       GO TO 75
      WRITE (IQPRNT,9073) JCARD,(KARD(J),J=1,NCHCCT)
      GO TO 72
 
   75 N = 80 - NCHCCT
      IF (N.NE.0)  CALL VBLANK (KARD(NCHCCT+1),N)
      WRITE (IQPRNT,9074) JCARD,KARD
      GO TO 72
 
C--                RECORD FINISHED, CHECK NEXT IS P/D
 
   81 IF (NVARRI(3).EQ.0)    GO TO 65
      IF (NVARRI(3).EQ.3)    GO TO 84
      IQ(LBUF+3) = NVARRI(5)
      IQ(LBUF+4) = NVARRI(6)                                            -A8M
      GO TO 65
 
 
C----              END OF PAM
 
   84 IF (NVOLD(7)+1 .GE. MAXEOF)  IOTON = 512
      CALL AUXFIL (0,NVOLD(1),0)
      IF (IOMODE(10).EQ.0)    GO TO 61
      IF (IQREAD.NE.0)       GO TO 12
 
C----              +QUIT, END OF RUN
 
   97 IQREAD = 0
      IF (NCINP.EQ.0)        GO TO 55
   98 CALL POPREW
      IF (NRTOLD.GE.0)  CALL AUXFIL (512,NVOLD(1),0)
      RETURN
 
 9001 FORMAT (1X/' LIST OF AVAILABLE MACROS.'/1X)
 9011 FORMAT (1X/1X,19(1H-)/1X)
 9015 FORMAT (I5,1X,80A1)
 9031 FORMAT (6X,12HSTART MACRO ,8A1,1H',80A1)
C9043 FORMAT (5X,2HP=,A8,   I5,5H + D=)                                  A8M
C9043 FORMAT (5X,2HP=,A6,A2,I5,5H + D=)                                  A6
C9043 FORMAT (5X,2HP=,A5,A3,I5,5H + D=)                                  A5
 9043 FORMAT (5X,2HP=,2A4,  I5,5H + D=)                                  A4
C9044 FORMAT (15X,I5,5H + D=,A8)                                         A8M
C9044 FORMAT (15X,I5,5H + D=,2A6)                                        A6
C9044 FORMAT (15X,I5,5H + D=,2A5)                                        A5
 9044 FORMAT (15X,I5,5H + D=,2A4)                                        A4
 9074 FORMAT (29X,I5,3H - ,72A1,1H?,8A1,2H ?)
 9073 FORMAT (29X,I5,3H - ,72A1,1H.,8A1)
      END
C====================================================================
CDECK  ID>, YSHMAC.
      SUBROUTINE YSHMAC (ID,NCHP,MACRO)
 
C-    LOAD AND PRINT 1 MACRO
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             --------------
      DIMENSION    ID(2), NCHP(9)
      CHARACTER    MACRO*(*)
      DIMENSION    MNAMES(4)
      DATA         MNAMES /4HMAC ,1,1,2H** /
 
 
      NCH       = NCHP(1)
      NWORDS    = (NCH-1) / IQCHAW + 1
      MNAMES(4) = NWORDS + 3
      CALL LIFTBK (LSMAC,1,0,MNAMES(1),0)
      CALL UBLOW  (ID(1),MWKX(1),8)
      J = IUFIND (IQBLAN,MWKX(1),1,8)
      CALL VBLANK (MWKX(J),8)
      CALL UBUNCH (MWKX(1),IQ(LSMAC+1),8)
      IQ(LSMAC+3) = NCH
      CALL UCTOH1 (MACRO,MWK(1),NCH)
      CALL UBUNCH (MWK(1),IQ(LSMAC+4),NCH)
      IF (LOGLEV.LT.2)       RETURN
      WRITE (IQPRNT,9001) (MWKX(J),J=1,8), (MWK(J),J=1,NCH)
      RETURN
 
 9001 FORMAT (5H ID= ,8A1,7H TEXT= ,80A1)
      END
C====================================================================
CDECK  ID>, YSHANL.
      SUBROUTINE YSHANL
 
C-    ANALYZE TAG-SELECTOR CARD IN BUFFER AT LEVEL 'LEV'
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
     +,    NINDX,NTOTCC,LEV,NCHTAG,NWWTAG
C--------------    END CDE                             -----------------  ------
 
      EQUIVALENCE (LINDX,LQMAIN)
      EQUIVALENCE (LKARD,LQUSER(2)),(LMAC,LQUSER(3))
 
      DIMENSION MNAMES(4), MSEPS(5), MID(3), MACTAG(2)
      DATA      MNAMES /4HTAG ,1,1,2H**/
      DATA      MSEPS  /1H-,1H$,1H+,1H,,1H./
      DATA      MID    /3HNO ,3HMAC,3HYES/
      DATA      MACTAG /4HMAC ,4HTAG /  ,  KSMAC /1/
 
C--      START NEW CARD, SPACE OVER 'MACRO' OR 'TAG' , ELSE ASSUME 'TAG'
 
      LMAC  = 0
      LKD   = IQ(LKARD-LEV)
 
      IF (IQ(LKD).NE.0)      GO TO 11
      CALL UBUNCH (IQ(LKD+1),IQUEST(1),3)
      J         = IUFIND (IQUEST(1),MACTAG(1),1,2)
      IQ(LKD-2) = MIN  (J-1,1)
      IF (J.EQ.3)            GO TO 11
      IQ(LKD)   = IUFIND (IQCOMA,IQ(LKD+1),1,10)
 
   11 LCHOLD = LKD + IQ(LKD  )
      LCHEND = LKD + IQ(LKD-1)
      IFLAG =        IQ(LKD-2)
 
C--        START OF TAG
 
   12 LCHOLD = LCHOLD + 1
      IF (LCHOLD.GT.LCHEND)  RETURN
      J = IUCOMP (IQ(LCHOLD),MSEPS,5)
      IF (J.EQ.0)            GO TO 18
      IF (J.GE.4)            GO TO 13
      IFLAG = J - 2
      GO TO 12
   13 IF (J.EQ.4)            GO TO 12
      RETURN
 
C--        T A G   COLLECTION
 
   18 LCHNEW = LCHOLD - 1
   19 LCHNEW = LCHNEW + 1
      IF (LCHNEW.GT.LCHEND)  GO TO 23
 
      J = IUCOMP (IQ(LCHNEW),MSEPS,5)
      IF (J.EQ.0)            GO TO 19
 
C--        TERMINATOR FOUND
 
   23 NCH = LCHNEW - LCHOLD
      IF (IFLAG.EQ.0)        GO TO 50
 
C--        TAG FOUND. SET UP POINTER IN INDEX AND LIFT ITS BANK
 
      IFIRST = IQ(LCHOLD)
      IF (NINDX.EQ.0)        GO TO 30
      J = IUCOMP (IFIRST,IQ(LINDX+1),NINDX)
      IF (J.NE.0)            GO TO 35
 
   30 NINDX = NINDX + 1
      IQ(LINDX+NINDX) = IFIRST
      J = NINDX
 
   35 K = LINDX - J
      MNAMES(4) = NCH+ 1
      CALL LIFTBK (L,K,0,MNAMES(1),0)
      IQ(L+1) = NCH - 1
      IQ(L+2) = IFLAG
      IF (NCH.EQ.1)          GO TO 36
      CALL UCOPY (IQ(LCHOLD+1),IQ(L+3),NCH-1)
   36 N = LCHOLD + NCH - 1
      IF (LOGLEV.GE.1)
     +             WRITE (IQPRNT,9036) MID(IFLAG+2),(IQ(J),J=LCHOLD,N)
      LCHOLD = LCHNEW - 1
      GO TO 12
 
 
C--------- LABEL IS A MACRO. SEARCH APPROPRIATE BANK
 
   50 IQ(LKD  ) = LCHNEW - LKD
      IQ(LKD-2) = 0
      IQUEST(12) = IQBLAN                                               -A8M
      CALL UBUNCH (IQ(LCHOLD),IQUEST(11),NCH)
 
C     LMAC = LQFIND   (IQUEST(11),1,KSMAC,KF)                            A8M
      LMAC = LQLONG (2,IQUEST(11),1,KSMAC,KF)                           -A8M
      IF (LMAC.EQ.0)         GO TO 70
      RETURN
 
C--        MACRO BANK NOT FOUND. FATAL ERROR
 
   70 CALL UBLOW (IQUEST(11),IQUEST(1),NCH)
      WRITE (IQPRNT,9070) (IQUEST(J),J=1,NCH)
      CALL PABEND
 
 9036 FORMAT(6X,1H.,A3,2H. ,10A1)
 9070 FORMAT (1X/17H UNDEFINED MACRO ,8A1)
      END
C====================================================================
CDECK  ID>, YSHTAG.
      SUBROUTINE YSHTAG
 
C-    PROCESS CARDS UNTIL INCL. NEXT TAGGED CARD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
     +,    NINDX,NTOTCC,LEV,NCHTAG,NWWTAG, KD1ORG,KD1REP
     +,    MTAG(8),JTERM,NACCU,JTG,NEND
C--------------    END CDE                             -----------------  ------
 
 
 
      NCHTAG = -7
      NWTK  = 0
 
C--                READY NEXT CARD
 
   11 LTK = LTK + NWTK
      JCARD = JCARD + 1
      IF (JCARD.GE.NTOTCC)   RETURN
      LE = LTK + KDNWT1 - 1
      DO 13 L=LTK,LE
      IF (AND(IQ(L),Z'FF000000').EQ.0)    GO TO 14
   13 CONTINUE
      NWTK   = KDNWT
      NCHCCT = 80
      GO TO 22
 
   14 NWTK   = L - LTK + 1
      IF (NWTK.GE.NWWTAG)    GO TO 21
      IF (NWTK.NE.1)         GO TO 11
      IF (IQ(LTK).NE.KD1ORG) GO TO 11
      IQ(LTK) = KD1REP
      GO TO 11
 
   21 NCHCCT = NWTK * IQCHAW - 1
   22 CALL UBLOW (IQ(LTK),KARDCC(1),NCHCCT)
      IF (KARDCC(73).NE.IQBLAN)  GO TO 24
      IF (KARDCC(74).EQ.IQBLAN)  GO TO 11
 
   24 NEND = 0
      DO 28 J = 73,NCHCCT
      IF (KARDCC(J).EQ.IQBLAN)  GO TO 28
      NEND       = NEND + 1
      MTAG(NEND) = KARDCC(J)
   28 CONTINUE
 
      IF (NEND.NE.8)         GO TO 31
      DO 29 J = 2,8
      IF (MTAG(J).NE.MTAG(1))  GO TO 31
   29 CONTINUE
      GO TO 11
 
C--------- TAG COMBINATION LOGIC
 
   31 JTG   = 0
   32 NACCU = 0
   33 JTG   = JTG + 1
 
   34 CALL YSHVAL
      IF (JTERM)             71,36,38
 
C--        TERMINATOR IS  'PLUS'
 
   36 IF (NACCU.EQ.0)        GO TO 44
      GO TO 32
 
C--        TERMINATOR IS  'COMMA' , 'MINUS' OR 'END OF CARD'
 
   38 IF (JTERM - 2)         34,33,41
 
C--------- END OF CARD SEEN,   DECIDE
 
   41 IF (NACCU.EQ.0)        GO TO 44
 
C--        ACCEPT CARD
 
      KARDCC(1) = IQBLAN
      GO TO 48
 
C--        REJECT CARD
 
   44 KARDCC(1) = IQLETT(3)
 
   48 CALL UBUNCH(KARDCC(1),IQ(LTK),IQCHAW)
      IF (MOPTIO(1).EQ.0)    GO TO 11
      NCHTAG = 0
      LTK = LTK + NWTK
      RETURN
 
C--        UNKNOWN TAG
 
   71 IF (MOPTIO(21).EQ.0)   GO TO 11
      NCHTAG = 7
      LTK = LTK + NWTK
      RETURN
      END
C====================================================================
CDECK  ID>, YSHVAL.
      SUBROUTINE YSHVAL
 
C-    RECOGNISE 1 TAG AND EVALUATE TRUTH VALUE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
     +,    NINDX,NTOTCC,LEV,NCHTAG,NWWTAG, KD1ORG,KD1REP
     +,    MTAG(8),JTERM,NACCU,JTG,NEND
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LINDX,LQMAIN)
 
      DIMENSION    MTERM(3)
      DATA  MTERM  /4H,   ,4H-   ,4H+   /
 
 
C--        DECIDE LEADING MINUS
 
      IF (NINDX.EQ.0)        GO TO 71
      JPREF = 1
      IF (MTAG(JTG).NE.IQMINS)  GO TO 21
      JPREF = -1
      JTG   = JTG + 1
 
C--        FIND TERMINATOR
 
   21 JTG   = JTG + 1
      J     = JTG
   22 IF (J.GT.NEND)         GO TO 23
      JTERM = IUCOMP (MTAG(J),MTERM(1),3)
      IF (JTERM.NE.0)        GO TO 24
      J = J + 1
      GO TO 22
 
   23 JTERM = 0
   24 NTG = J - JTG
 
C--------- FIND CHAIN FOR FIRST CHARACTER
 
      J = IUCOMP (MTAG(JTG-1),IQ(LINDX+1),NINDX)
      IF (J.EQ.0)            GO TO 71
 
      LX = IQ(LINDX-J)
      GO TO 35
 
   34 LX = IQ(LX-1)
   35 IF (LX.EQ.0)           GO TO 71
 
      IF (NTG.NE.IQ(LX+1))   GO TO 34
 
      JH = JTG
      JM = LX + 3
      JE = JM + NTG
 
   36 IF (JM.EQ.JE)          GO TO 41
      IF (MTAG(JH).NE.IQ(JM))  GO TO 34
      JH = JH + 1
      JM = JM + 1
      GO TO 36
 
C--------- BANK FOUND
 
   41 IF (JPREF.EQ.IQ(LX+2)) NACCU = 7
      JTERM = 3 - JTERM
      JTG   = JTG + NTG
      RETURN
 
C--------- UNKNOWN TAG
 
   71 JTERM = -7
      RETURN
      END
C====================================================================
CDECK  ID>, AUXINI.
      SUBROUTINE AUXINI
 
C-    INITIALISE FOR PATCHY AUXILIARIES
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      COMMON /MODTT/ NMODTT,JMODTT(6),TEXTTT(10)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
     +,            LOCALS(40),ISPACE(80000),LAST
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LSVARE,LADRV(9))
C     DIMENSION    MMTITL(1)                                             A8M
      DIMENSION    MMTITL(2)                                            -A8M
      DIMENSION    MMSAVE(5)
 
 
 
      DATA  MMTITL / 4H*TIT,4HLE* /
 
      DATA  MMSAVE /4HSVAR, 6,0,2H**, 20/
 
 
 
      DATA  IISET  / 4HSET  /
 
      LAST  = IISET
      IQLOG = IQPRNT
      ISAVE = IQREAD
      CALL MQINIT (LAST)
      NQLINK = IQLOCF(NVOPER(1)) - 1
      LQWORG = IQLOCF(ISPACE(1))
      IQREAD = ISAVE
      LQWORK = LQWORG
      CALL VZERO  (LQ1,LQWORK)
      CALL PLOAD
 
      WRITE (IQPRNT,9000) IQDATE,IQTIME
 9000 FORMAT                                       (1X/10H VERSION  ,
     + 40HPATCHY  4.15 /1  911211 12.02                                     HOLD
     F,12H.RJP, TODAY:,I8,I6/1X)
 
C--                PRESET DATA INTO W-SPACE
 
      IDEOF(1) = IQBLAN
      IDEOF(2) = IQBLAN                                                 -A8M
      IDEOF(3) = MMTITL(1)
      IDEOF(4) = MMTITL(2)                                              -A8M
      IDEOF(7) = MMTITL(1)
      IDEOF(8) = MMTITL(2)                                              -A8M
      IDEOF(9) = 3
 
C--                PRESET OPTIONS
 
      MOPTIO(31) = NOPTVL(4)
      CALL UBLOW (NOPTVL(1),IQUEST(1),8)
      DO 24  J=1,8
      JV = IUCOMP (IQUEST(J),IQLETT(1),30)
      IF (JV.EQ.0)           GO TO 24
      CALL SBIT1 (MOPTIO(31),JV)
   24 CONTINUE
      IF (JBIT(MOPTIO(31),15)   .NE.0)  MOPTIO(31)=0                    -MSK
C     IF ((MOPTIO(31).AND.16384).NE.0)  MOPTIO(31)=0                     MSKC
      CALL SETOPT
      LOGLVG = 4
      CALL LOGLV (MOPTIO(31),0,0)
      LOGLVG = LOGLEV
      NMODTT = 0
 
 
C------            INITIALISE  OLD/NEW  STREAMS
 
      CALL UCOPY (IDEOF(1),IDOLDV(1),9)
      CALL UCOPY (IDEOF(1),IDNEWV(1),9)
      NVOLD(1)= LUNVL(1)
      NVNEW(1)= LUNVN(1)
      NRTOLD  = -1
      NRTNEW  = -1
      MAXEOF= 999
      JLUN  = NSTRM
 
C--                LIFT SAVE-AREA WITH DIRECTORY
 
      MMSAVE(4) = (NSTRM+NSTRM) * MMSAVE(5) + 1
      CALL LIFTBK (LSVARE,0,0,MMSAVE(1),0)
      IQ(LSVARE+1) = MMSAVE(5)
      LSV   = LSVARE + 2
 
C--                LIFT NEXT BUFFFER
 
   44 CALL CREBUF
      IF (JLUN.EQ.0)         GO TO 51
 
      NVOLD(1)= LUNVL(JLUN)
      NVNEW(1)= LUNVN(JLUN)
      JOLD  = JLUN
      JNEW  = JLUN
      LLAST = LBUF
      LLASTN= LBUF
      CALL UBLOW (7HOLD NEW,IQUEST(1),7)
      IQUEST(4)= IQNUM2(JLUN+1)
      IQUEST(8)= IQUEST(4)
      CALL UBUNCH (IQUEST(1),NVOLD(6),4)
      CALL UBUNCH (IQUEST(5),NVNEW(6),4)
      IQ(LSVARE-JLUN)   = LSV
      CALL UCOPY  (NVOLD(1),IQ(LSV),MMSAVE(5))
      LSV = LSV + MMSAVE(5)
      IQ(LSVARE-JLUN-3) = LSV
      CALL UCOPY  (NVNEW(1),IQ(LSV),MMSAVE(5))
      LSV = LSV + MMSAVE(5)
      JLUN = JLUN - 1
      GO TO 44
 
   51 CONTINUE
      RETURN
      END
C====================================================================
CDECK  ID>, PLOAD.
      SUBROUTINE PLOAD
 
C-    PRE-LOAD PATCHY COMMONS AT INITIALISATION
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
      DIMENSION    MCCTXV(84), MCCTPV(10)
      DIMENSION    MPAKV(8), MPAKNB(8)
      EQUIVALENCE (MPAKV(1),MPAK2(1)), (MCCTPV(1),MCCQUI)
      EXTERNAL     QABEND, RQTELL, IOTYPE
 
 
 
      DATA  MCCTXV /   83,  28
     +,     4H+CDE,4H+SEQ,4H+SEL,4H+PAT,4H+DEC,4H+KEE,4H+DEF,4H+EOD
     +,     4H+DEL,4H+REP,4H+ADD,4H+ADB,4H+USE,4H+EXE,4H+LIS,4H+MIX
     +,     4H+DIV,4H+IMI,4H+PAM,4H+QUI,4H+OPT,4H+ASM,4H+ONL,4H+TIT
     +,     4H+FOR,4H+SUS,4H+PAR,4H+WAR
     +,  0,     -1,    -1,    -2,   -19,   -18,     1,   -17,   -16
     +,          2,     3,     5,     4,    -7,    -5,    -6,    -4
     +,         -3,   -10,   -21,   -22,   -11,   -15,   -13,   -20
     +,         -8,    -9,   -12,   -14
     +, 23,    0,  3,  0,  1,  2,  0,  0,  7,  2,  3,  4,  4
     +,        1,  4,  4,  1,  1,  1,  1,  1,  3,  3,  0,  3    /
C
C            -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11
C            -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0  +1
 
      DATA  MPAKNB /2,0,5,0,9,0,15,0/
      DATA  MMEOD  /4H+EOD/
 
 
C--          READY /ARRCOM/, /IOFCOM/
      CALL VZERO (LUNPAM,28)
      NTRUNC = 80
      CALL VZERO (IOTALL,20)
 
C--          READY /CCPARA/
      CALL VZERO  (NCHCCD,231)
      CALL VBLANK (KARDCC(1),84)
      MCCPAR(2)= IQBLAN
      MCCPAR(3)= IQBLAN
      MCCTOU = 0
      JCCLOW = 0
 
C--          READY /CCTEXT/
      CALL UCOPY (MCCTXV(2),NCCVEC,MCCTXV(1))
      MCCDF(2) = 6
 
C--          READY /CCTYPE/
      DO 24  J=1,8
   24 MCCTPV(J) = J-23
      MCCOPT = -11
      MCCUSE =  -7
 
 
C--          READY /CONST/
      DO 28 J=1,8,2
      MPAKV(J)  = MPAKNB(J)
   28 MPAKV(J+1)= NQBITW / MPAKNB(J)
C     NWNAME = 1                                                         A8M
C     NWSENM = 2                                                         A8M
C     NWSEN1 = 3                                                         A8M
      NWNAME = 2                                                        -A8M
      NWSENM = 3                                                        -A8M
      NWSEN1 = 4                                                        -A8M
      LARGE  = 99999
      CALL VBLANK (IQUEST(1),12)
      CALL USET (IQDATE,IQUEST(1),1,6)
      CALL USET (IQTIME,IQUEST(1),9,12)
      IQUEST(8) = IQUEST(9)
      IQUEST(9) = IQUEST(10)
      IQUEST(10)= IQDOT
      CALL UBUNCH (IQUEST(1),DAYTIM(1),12)
 
C--          READY /KDPKCM/
      KDBLAN = IQBLAN
      KDEOD(1) = MMEOD
      KDEOD(2) = IQBLAN                                                  A4
      CALL SBYT  (0,KDEOD(2),25,8)
 
      IF (KDNWT.NE.0)        RETURN
      CALL QFATAL (QABEND,RQTELL,IOTYPE)
      RETURN
      END
C====================================================================
CDECK  ID>, CCKRAK.
      SUBROUTINE CCKRAK (KARD)
 
C-    ANALYSE CONTROL-CARD INTO PARAMETER-LIST & INDEX
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
C-    THE ONLY WSP-VARIABLE USED IS  NVMAT(1), AT ST.NO. 91
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    KARD(20)
      DIMENSION    M(80), NAME(8)
      DIMENSION    JVECT(7), NVECT(7), MSEPS(7), MSEPS2(7)
      EQUIVALENCE (JVECT(1),JCCPP), (NVECT(1),NCCPP),  (M(1),KARDCC(1))
      EQUIVALENCE (LSEP,JCCWK(1)),(JSEPI,JCCWK(2)),(NEGNUM,JCCWK(3))
     +,                                            (IFSEEN,JCCWK(4))
 
 
      DATA  MSEPS  /1HP,1HD,1HZ,1HT,1HI,1HC,1HN/
      DATA  MSEPS2 /1HS,1HR,1HF,1HX,1HY,1HL,1HN/
      DATA  NSEPS  /7/
 
 
C--                BLOW CARD AND FIND USEFUL LENGTH
 
      CALL UBLOW (KARD(1),M(1),NCHKD+1)
      NCHCCT = MIN  (NCHKD,72) + 1
   11 NCHCCT = NCHCCT - 1
      IF (M(NCHCCT).EQ.IQBLAN) GO TO 11
 
   12 NCH = IUFIND(IQDOT,M(1),1,NCHCCT)
      IF (NCHCCT-NCH)          14,15,13
   13 IF (M(NCH+1).NE.IQCOMA)  GO TO 15
      M(NCH)   = IQCOMA
      M(NCH+1) = IQBLAN
      JCCLOW = NCH + 1
      GO TO 12
 
   14 CONTINUE
   15 NCHCCD = NCH
      IF (MCCTOU.EQ.0)       GO TO 16
      CALL CCTOUP (M(1),NCH-1)
      IF (JCCLOW.EQ.0)       GO TO 16
      IF (MCCTOU.LT.0)       GO TO 16
      N = IQCHAW * ( (JCCLOW-1)/IQCHAW + 1)
      IF (N.GE.NCHKD-IQCHAW+2)  N = MIN  (NCHKD+1,80)
      CALL UBUNCH (M(1),KARD(1),N)
   16 M(NCH) = IQDOT
   18 NCH = NCH-1
      IF (M(NCH).EQ.IQBLAN)  GO TO 18
      CALL VZERO (NCCPAR,22)
      L = IUFIND (IQCOMA,M(1),4,NCH)
      IF (L.GE.NCH)          RETURN
      NBUNCH= 8
      LOC   = 4
 
C-----------       READ NEXT PARAMETER
 
   31 MCCPAR(LOC) = 1
   32 JPARA = 0
      GO TO 34
 
   33 JPARA = 7
   34 CALL VBLANK (NAME,8)
      N  = 0
   35 IF (L.EQ.NCH)          GO TO 38
      LA = L + 1
 
      DO 37 L=LA,NCH
      MC = M(L)
      IF  (MC.EQ.IQBLAN)     GO TO 37
      IF  (MC.EQ.IQEQU)      GO TO 41
      IF  (MC.EQ.IQCOMA)     GO TO 61
      IF  (MC.EQ.IQMINS)     GO TO 46
      IF (N.GE.8)            GO TO 37
      N = N+1
      NAME(N) = MC
   37 CONTINUE
   38 L = NCH + 1
      GO TO 61
 
C----              NAMED SEPARATOR READ
 
   41 IF (JPARA.NE.0)        GO TO 96
      JSEP  =              IUCOMP(NAME(1),MSEPS(1), NSEPS)
      IF (JSEP.EQ.0)  JSEP=IUCOMP(NAME(1),MSEPS2(1),NSEPS)
      IF (JSEP.EQ.0)         GO TO 96
      IF (JVECT(JSEP).NE.0)  GO TO 43
      IF (IFSEEN.NE.0)       GO TO 96
      JVECT(JSEP) = LOC
      LSEP  = JSEP
      NEGNUM= 0
      NBUNCH= 8
      IF (JSEP.EQ.4)  NBUNCH=1
      IF (JSEP.EQ.5)  IFSEEN=7
   42 MCCPAR(LOC) = JSEP + 1
      GO TO 33
 
C--                SAME SEPARATOR AGAIN
 
   43 IF (JSEP.NE.LSEP)      GO TO 96
      IF (JSEP.NE.5)         GO TO 33
      GO TO 42
 
C--                ACT ON '-'
 
   46 IF (N.NE.0)            GO TO 60
      IF (LSEP.LT.5)         GO TO 96
      MCCPAR(LOC) = -MCCPAR(LOC)
      IF (MCCPAR(LOC).LT.0)  GO TO 35
      GO TO 96
 
C-----------       DIGEST PARAMETER JUST READ
 
   60 L = L - 1
   61 IF (LSEP.NE.0)         GO TO 71
      JSEPI = JSEPI + 1
      IF (N.EQ.0)            GO TO 86
      IF (JCCTYP.GE.2)       GO TO 64
 
C--                FIRST PARAMETER WITHOUT PARAMETER-KEY
 
      JSEP = MCCDF(NCCDFI+JCCTYP)
      IF (JSEP.EQ.0)         GO TO 96
      IF (JSEP.NE.4)         GO TO 66
      NBUNCH = 1
      GO TO 66
 
C--                ACTION CARD WITH IMPLICITE PARAMETER-KEY
 
   64 JSEP = JSEPI
      IF (JSEP.LT.3)         GO TO 67
      JSEP = 6
   66 LSEP = JSEP
   67 JVECT(JSEP) = LOC
      MCCPAR(LOC) = JSEP + 1
      GO TO 73
 
C-----             NORMAL PARAMETER PROCESSING
 
   71 JSEP  = LSEP
   73 IF (JSEP.LT.6)         GO TO 81
 
C--                STORE NUMERIC PARAMETER VALUE
 
      NUM = 0
      J   = 0
   77 J = J + 1
      I = IUCOMP (NAME(J),IQNUM,10)
      IF (I.EQ.0)            GO TO 96
      NUM = 10*NUM + (I-1)
      IF (J.LT.N)            GO TO 77
      IF (MCCPAR(LOC).LT.0)  GO TO 79
      MCCPAR(LOC+1) = NUM
      MCCPAR(LOC+2) = NUM
      NEGNUM= 7
      GO TO 84
 
   79 IF (NEGNUM.EQ.0)       GO TO 96
      MCCPAR(LOC-1) = NUM
      NEGNUM= 0
      IF (NUM.GE.MCCPAR(LOC-2)) GO TO 86
      IF  (JCCTYP.LT.2)         GO TO 86
      GO TO 96
 
C--                STORE ALPHAMERIC PARAMETER VALUE
 
   81 CALL UBUNCH (NAME(1),MCCPAR(LOC+1),NBUNCH)
   84 NCCPAR= NCCPAR + 1
      NVECT(JSEP) = NVECT(JSEP) + 1
      LOC = LOC + 3
   86 IF (L.LT.NCH)          GO TO 31
 
C------            ANALYSIS FINISHED, RESOLVE  +DEF, P/D/Z=
 
      IF (JCCTYP.EQ.MCCDEF)  GO TO 96
 
C--                CLEAR P/D-NAME CARRY, UNLESS ACTION-CARD OR SEQ
 
   91 IF (JCCTYP.LT.-1)  NVIMAT(1)=0
      MCCPAR(LOC) = 0
      JCCEND = LOC
 
C--                COMPRESS VALUES FOR  TYPE=...
 
      IF (NCCPT.EQ.0)        RETURN
      L = JCCPT
      N = NCCPT
      MM= 0
   92 J = IUCOMP (MCCPAR(L+1),IQLETT(1),30)
      IF (J.EQ.0)            GO TO 93
      CALL SBIT1 (MM,J)
   93 L = L + 3
      N = N - 1
      IF (N.NE.0)            GO TO 92
      MCCPAR(JCCPT+1)= MM
      RETURN
 
C--                FAULT
 
   96 JCCBAD= 7
      IF (JCCTYP.GT.MCCEOD)  RETURN
      JCCTYP = -2
      RETURN
      END
C====================================================================
CDECK  ID>, PILECT.
      SUBROUTINE PILECT
 
C-                                               NEAR-COPY OF  PILEUP
C-    SLAVE TO YFRCETA
C-    COMPACT CARDS FOR 1 DECK AND OUTPUT TO POPOFF
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    NSTCC(3)
 
 
      IQ(LCCIX+1) = 0
      NSTCC(3) = 0
      JEODK    = 0
   12 NCDECK   = NCARDP
      JCCTYP = JARTYP (KDHOLD(1))
      IF (JPDNEW.LT.3)       GO TO 27
 
 
C----              START TITLE
 
      IF (JCCTYP - MCCEOD)   24,23,22
   22 CALL VBLANK (MWK(1),80)
      CALL UBLOW  (KDHOLD(1),MWK(1),NCHKD)
      CALL UBUNCH (MWK(1),KDHOLD(1),80)
      NCHKD = 80
      NWKD  = KDNWT
      CALL UCOPY (IDEOF(1),IDNEWV(1),8)
      GO TO 32
 
   23 NCHKD = 0
      RETURN
 
   24 IF (JCCTYP.NE.MCCTIT)  GO TO 26
   25 CALL FRCETA (KDHOLD(1))
      JCCTYP = 99
      IF (NCHKD.GE.0)        GO TO 12
      IF (NCHKD.EQ.-1)  NCHKD=0
      RETURN
 
   26 CALL CCKRAK (KDHOLD(1))
      IF (JCCTYP.GE.MCCEOD)  GO TO 22
      IF (JCCTYP.LT.MCCPAT)  GO TO 25
      RETURN
 
C----              START PATCH / DECK
 
   27 CALL CCKRAK (KDHOLD(1))
      J = JCCPP
      IF (JPDNEW.EQ.1)  J=JCCPD
      IF (J.EQ.0)            GO TO 29
      IDNEWV(7) = MCCPAR(J+1)
      IDNEWV(8) = MCCPAR(J+2)                                           -A8M
      IDNEWV(1) = 0
      CALL SETID (IDNEWV(1))
      IF (NCCPIF.NE.0)  NSTCC(3)=3
      IF (JCCBAD.EQ.0)       GO TO 32
      WRITE (IQPRNT,9058) IDP,IDD,JEODK, (KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 32
 
C--                PATCH/DECK PARAMETER MISSING
 
   29 NVWARX(1) = NVWARX(1) + 1
      JC = 9999
      WRITE (IQPRNT,9058) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      IF (NCHKD.LT.6)        CALL PABEND
      CALL UCTOH1 ('+DEC,?. +PAT,?. ',MWK(1),16)
      J = 8*(JPDNEW-1)
      CALL UBUNCH (MWK(J+1),KDHOLD(1),8)
      GO TO 27
 
 
C-------------     START NEW BUFFER
 
   31 JPDNEW    = 0
      NSTCC(3)  = 0
 
   32 NSTCC(2)  = 0
      NSTCC(1)  = 0
      NTOTCC    = 0
      IQ(LBUF+5)= JPDNEW
 
      NCREC  = NCARDP
      LENDGO = IQ(LBUF-4)
      LCARDS = LENDGO - 508
      L      = LCARDS
      LN     = L + NWKD
      CALL UCOPY (KDHOLD(1),IQ(L),NWKD)
 
      LEND   = LENDGO - NWSENM
      LX4    = LCCIX + 4
      IQ(LX4)= LCARDS
      LX     = LX4
      NBYTW  = MPAK9(2) - 4
      IF (JPDNEW.EQ.0)       GO TO 44
 
      IQ(LBUF+3)= IDNEWV(7)
      IQ(LBUF+4)= IDNEWV(8)                                             -A8M
 
 
C-------------     ACCUMULATE 1 BUFFER
 
C--            ACCEPT LAST, READ NEXT CARD
   41 L = LN
   42 CALL FRCETA (IQ(L))
      IF (NCHKD.LT.0)        GO TO 71
      JCCTYP = JARTYP (IQ(L))
      LN = L + NWKD
      IF (LN.GE.LEND)        GO TO 74
   44 IF (JCCTYP.EQ.0)       GO TO 41
 
C----              NEW CARD IS  C / C
 
      CALL CCKRAK (IQ(L))
      IF (JCCBAD.NE.0)       GO TO 57
   46 JNST = 3
      IF (JCCTYP.GE.0)       GO TO 48
      IF (JCCTYP-MCCEOD)     51,73,47
   47 JNST = MIN  (-JCCTYP,3)
 
C--            AUGMENT INDEX VECTOR
 
   48 IF (NTOTCC.GE.48)      GO TO 74
      NTOTCC = NTOTCC + 1
      NSTCC(JNST) = JNST
      LX          = LX + 2
      IQ(LX-1)    = NCARDP - NCREC
      IQ(LX)      = L
      NBYTW       = NBYTW - 2
      IF (NBYTW.GE.0)        GO TO 41
      LEND  = LEND - 1
      NBYTW = NBYTW + MPAK9(2)
      GO TO 41
 
C--            END OF DECK IF NEW C/C IS  +DECK, +PATCH, +TITLE
 
   51 IF (JCCTYP.LT.MCCTIT)  GO TO 48
      JEODK = 7
      GO TO 74
 
C--            BAD C/C
   57 JC = NCARDP - NCDECK
      WRITE (IQPRNT,9058) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 46
 
 
C-------------     END OF BUFFER
 
   71 CONTINUE
   72 NINREC = NCARDP+1 - NCREC
      GO TO 78
 
   73 NCHKD = 0
      GO TO 77
 
   74 CALL UCOPY (IQ(L),KDHOLD(1),NWKD)
   77 NINREC = NCARDP - NCREC
   78 IF (NINREC.EQ.0)       RETURN
 
C--                DISPATCH COMPLETED BUFFER TO POPOFF
 
      NWPRE  = LENDGO - LEND
      LSTART = LCARDS - NWPRE - 1
      CALL VZERO (IQ(LSTART+1),NWPRE)
 
      IQ(LSTART) = NWPRE + (L - LCARDS)
      IQ(LCCIX+2)= NTOTCC
      IQ(LCCIX+3)= NINREC
      IQ(LBUF+11)= NTOTCC
      IQ(LBUF+12)= NINREC
      IQ(LBUF+13)= NWPRE + 1
      IF (NTOTCC.NE.0)       GO TO 84                                   -B36M
      LX = LX - 1                                                       -B36M
      GO TO 86                                                          -B36M
 
   84 DO 85 J=LX4,LX,2
   85 IQ(J) = IQ(J) - LSTART
C     IF (IQ(LX4+1).EQ.0)  IQ(LX4+1)=0                                   UNI
 
   86 L = LSTART + NWNAME
      CALL PKBYT (IQ(LCCIX+1),IQ(L+1),1,LX-LCCIX,MPAK9(1))
 
      IQ(LBUF-2) = LSTART
      IQ(LBUF+1) = 0
      IQ(LBUF+6) = MAX (NSTCC(1),NSTCC(2),NSTCC(3))
      CALL POPOFF
 
      IF (NCHKD.LE.0)        RETURN
      IF (JEODK.EQ.0)        GO TO 31
      RETURN
 
C9058 FORMAT (3H0P=,A8,   3H D=,A8,   3H C=,I6,16H *** FAULTY C/C ,72A1) A8M
C9058 FORMAT (3H0P=,A6,A2,3H D=,A6,A2,3H C=,I6,16H *** FAULTY C/C ,72A1) A6
C9058 FORMAT (3H0P=,A5,A3,3H D=,A5,A3,3H C=,I6,16H *** FAULTY C/C ,72A1) A5
 9058 FORMAT (3H0P=,2A4,  3H D=,2A4,  3H C=,I6,16H *** FAULTY C/C ,72A1) A4
      END
C====================================================================
CDECK  ID>, PILEUP.
      SUBROUTINE PILEUP
 
C-    COMPACT CARDS FOR 1 DECK AND OUTPUT TO POPOFF
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /CCTYPE/MCCQUI,MCCPAM,MCCTIT,MCCPAT,MCCDEC,MCCDEF,MCCEOD
     +,              MCCASM,MCCOPT,MCCUSE
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      DIMENSION    NSTCC(3)
      EQUIVALENCE (NSTCC(1),MWKX(1))
 
 
      IQ(LCCIX+1) = 0
      NSTCC(3) = 0
      JEODK    = 0
   12 NCDECK   = NCARDP
      IF (JCCTYP.EQ.99)  JCCTYP=JARTPX(KDHOLD(1))
      IF (JPDNEW.LT.3)       GO TO 27
 
 
C----              START TITLE
 
      IF (JCCTYP - MCCEOD)   24,23,22
   22 CALL VBLANK (MWK(1),80)
      CALL UBLOW  (KDHOLD(1),MWK(1),NCHKD)
      CALL UBUNCH (MWK(1),KDHOLD(1),80)
      NCHKD = 80
      NWKD  = KDNWT
      CALL UCOPY (IDEOF(1),IDNEWV(1),8)
      GO TO 32
 
   23 NCHKD = 0
      RETURN
 
   24 IF (JCCTYP.NE.MCCTIT)  GO TO 26
   25 CALL KDNEXT (KDHOLD(1))
      JCCTYP = 99
      IF (NCHKD.GE.0)        GO TO 12
      IF (NCHKD.EQ.-1)  NCHKD=0
      RETURN
 
   26 CALL CCKRAK (KDHOLD(1))
      IF (JCCTYP.GE.MCCEOD)  GO TO 22
      IF (JCCTYP.LT.MCCPAT)  GO TO 25
      RETURN
 
C----              START PATCH / DECK
 
   27 CALL CCKRAK (KDHOLD(1))
      J = JCCPP
      IF (JPDNEW.EQ.1)  J=JCCPD
      IF (J.EQ.0)            GO TO 29
      IDNEWV(7) = MCCPAR(J+1)
      IDNEWV(8) = MCCPAR(J+2)                                           -A8M
      IDNEWV(1) = 0
      CALL SETID (IDNEWV(1))
      IF (NCCPIF.NE.0)  NSTCC(3)=3
      IF (JCCBAD.EQ.0)       GO TO 32
      WRITE (IQPRNT,9058) IDP,IDD,JEODK, (KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 32
 
C--                PATCH/DECK PARAMETER MISSING
 
   29 NVWARX(1) = NVWARX(1) + 1
      JC = 9999
      WRITE (IQPRNT,9058) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      IF (NCHKD.LT.6)        CALL PABEND
      CALL UCTOH1 ('+DEC,?. +PAT,?. ',MWK(1),16)
      J = 8*(JPDNEW-1)
      CALL UBUNCH (MWK(J+1),KDHOLD(1),8)
      GO TO 27
 
 
C-------------     START NEW BUFFER
 
   31 JPDNEW    = 0
      NSTCC(3)  = 0
 
   32 NSTCC(2)  = 0
      NSTCC(1)  = 0
      NTOTCC    = 0
      IQ(LBUF+5)= JPDNEW
 
      NCREC  = NCARDP
      LENDGO = IQ(LBUF-4)
      LCARDS = LENDGO - 508
      L      = LCARDS
      LN     = L + NWKD
      CALL UCOPY (KDHOLD(1),IQ(L),NWKD)
 
      LEND   = LENDGO - NWSENM
      LX4    = LCCIX + 4
      IQ(LX4)= LCARDS
      LX     = LX4
      NBYTW  = MPAK9(2) - 4
      IF (JPDNEW.EQ.0)       GO TO 44
 
      IQ(LBUF+3)= IDNEWV(7)
      IQ(LBUF+4)= IDNEWV(8)                                             -A8M
 
 
C-------------     ACCUMULATE 1 BUFFER
 
C--            ACCEPT LAST, READ NEXT CARD
   41 L = LN
   42 CALL KDNEXT (IQ(L))
      IF (NCHKD.LT.0)        GO TO 61
      JCCTYP = JARTPX (IQ(L))
      LN = L + NWKD
      IF (LN.GE.LEND)        GO TO 74
   44 IF (JCCTYP.EQ.0)       GO TO 41
 
C----              NEW CARD IS  C / C
 
      CALL CCKRAK (IQ(L))
      IF (JCCBAD.NE.0)       GO TO 57
   46 JNST = 3
      IF (JCCTYP.GE.0)       GO TO 48
      IF (JCCTYP-MCCEOD)     51,73,47
   47 JNST = MIN  (-JCCTYP,3)
 
C--            AUGMENT INDEX VECTOR
 
   48 IF (NTOTCC.GE.48)      GO TO 74
      NTOTCC = NTOTCC + 1
      NSTCC(JNST) = JNST
      LX          = LX + 2
      IQ(LX-1)    = NCARDP - NCREC
      IQ(LX)      = L
      NBYTW       = NBYTW - 2
      IF (NBYTW.GE.0)        GO TO 41
      LEND  = LEND - 1
      NBYTW = NBYTW + MPAK9(2)
      GO TO 41
 
C--            END OF DECK IF NEW C/C IS  +DECK, +PATCH, +TITLE
 
   51 IF (JCCTYP.LT.MCCTIT)  GO TO 48
      JEODK = 7
      GO TO 74
 
C--            BAD C/C
   57 JC = NCARDP - NCDECK
      WRITE (IQPRNT,9058) IDP,IDD,JC,(KARDCC(J),J=1,NCHCCT)
      NVWARX(1) = NVWARX(1) + 1
      GO TO 46
 
C----              EOI, EOF, EOR (CDC)
 
   61 JCCTYP = 0
 
 
C-------------     END OF BUFFER
 
   72 NINREC = NCARDP+1 - NCREC
      GO TO 78
 
   73 NCHKD = 0
      GO TO 77
 
   74 CALL UCOPY (IQ(L),KDHOLD(1),NWKD)
   77 NINREC = NCARDP - NCREC
   78 IF (NINREC.EQ.0)       RETURN
 
C--                DISPATCH COMPLETED BUFFER TO POPOFF
 
      NWPRE  = LENDGO - LEND
      LSTART = LCARDS - NWPRE - 1
      CALL VZERO (IQ(LSTART+1),NWPRE)
 
      IQ(LSTART) = NWPRE + (L - LCARDS)
      IQ(LCCIX+2)= NTOTCC
      IQ(LCCIX+3)= NINREC
      IQ(LBUF+11)= NTOTCC
      IQ(LBUF+12)= NINREC
      IQ(LBUF+13)= NWPRE + 1
      IF (NTOTCC.NE.0)       GO TO 84                                   -B36M
      LX = LX - 1                                                       -B36M
      GO TO 86                                                          -B36M
 
   84 DO 85 J=LX4,LX,2
   85 IQ(J) = IQ(J) - LSTART
C     IF (IQ(LX4+1).EQ.0)  IQ(LX4+1)=0                                   UNI
 
   86 L = LSTART + NWNAME
      CALL PKBYT (IQ(LCCIX+1),IQ(L+1),1,LX-LCCIX,MPAK9(1))
 
      IQ(LBUF-2) = LSTART
      IQ(LBUF+1) = 0
      IQ(LBUF+6) = MAX (NSTCC(1),NSTCC(2),NSTCC(3))
      CALL POPOFF
 
      IF (NCHKD.LE.0)        RETURN
      IF (JEODK.EQ.0)        GO TO 31
      RETURN
 
C9058 FORMAT (3H0P=,A8,   3H D=,A8,   3H C=,I6,16H *** FAULTY C/C ,72A1) A8M
C9058 FORMAT (3H0P=,A6,A2,3H D=,A6,A2,3H C=,I6,16H *** FAULTY C/C ,72A1) A6
C9058 FORMAT (3H0P=,A5,A3,3H D=,A5,A3,3H C=,I6,16H *** FAULTY C/C ,72A1) A5
 9058 FORMAT (3H0P=,2A4,  3H D=,2A4,  3H C=,I6,16H *** FAULTY C/C ,72A1) A4
      END
C====================================================================
CDECK  ID>, POPIN.
      SUBROUTINE POPIN
 
C-    READ/SKIP NEXT RECORD OF COMPACT PAM
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(4),MVOLD1,MVOLDN,  NVOLD(7),NRTOLD,NROLD,MAXEOF
     +, IDOLDV(8),JPDOLD,JOLD, NVARRI(9),LARX,LARXE,LINBIN, NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LUNUSE,NVOLD(1))
 
 
      LINBIN = IQ(LBUF-3)
      JPROC  = IQ(LBUF+1)
    9 IF   (JPROC)           12,12,21
 
C----              SKIP NEXT DECK, SKIP RECORD WITHOUT C/C
 
   11 IF (NVARRI(3).NE.0)    RETURN
   12 CONTINUE
      J = 3
      CALL XINB (LUNUSE,IQ(LINBIN+1),J)
      IF   (J.EQ.0)          GO TO 81
      IF   (J.LT.0)          GO TO 80
      GO TO 31
 
C----              READ NEXT RECORD IN FULL
 
   21 CONTINUE
      J = 510
      CALL XINB (LUNUSE,IQ(LINBIN+1),J)
      IF   (J.EQ.0)          GO TO 81
      IF   (J.LT.0)          GO TO 80
      IQ(LINBIN) = J
      IQ(LBUF-2) = LINBIN
 
 
C----              DIGEST CONTROL-INFORMATION
 
   31 NROLD = NROLD + 1
C     LLX   = LINBIN + 2                                                 A8M
      LLX   = LINBIN + 3                                                -A8M
      CALL UPKBYT (IQ(LLX),1,NVARRI(1),4,MPAK2(1))
      CALL UPKBYT (IQ(LLX),2,NVARRI(7),3,MPAK9(1))
      IF (NVARRI(7).EQ.0)  NVARRI(9)=NWSEN1
      NVARRI(5) = IQ(LINBIN+1)
      NVARRI(6) = IQ(LINBIN+2)                                          -A8M
      CALL UCOPY (NVARRI(1),IQ(LBUF+5),9)
      IQ(LBUF+15) = IQ(LBUF+15) + NVARRI(8)
 
      IF (NROLD.LT.3)        GO TO 71
      IF (NVARRI(1).EQ.0)    GO TO 34
 
C--                NEW DECK/PATCH STARTING
 
   33 JCARD  = 0
      NDECKR = NDECKR + 1
      IQ(LBUF+14) = IQ(LBUF+15) - NVARRI(8)
   34 IF   (JPROC)           11,35,61
   35 IF (IQ(LBUF+2).NE.0)   GO TO 68
   39 RETURN
 
C----              CONSTRUCT C/C-INDEX
 
   61 IF (IQ(LBUF+2))        68,39,62
   62 IF (NVARRI(7).EQ.0)    GO TO 68
      N = 2*NVARRI(7) + 3
      CALL UPKBYT (IQ(LLX),2,IQ(LCCIX+1),N,MPAK9(1))
 
      LARX  = LCCIX + 3
      LARXE = LCCIX + N + 1
      IQ(LARXE)  = NVARRI(8)
      IQ(LARXE+1)= -(LINBIN+IQ(LINBIN)+1)
 
      DO 64   L=LARX,LARXE,2
      IQ(L)   = - (IQ(L)+LINBIN)
   64 IQ(L+1) =   IQ(L+1) + JCARD
      IQ(LARX) = -IQ(LARX)
      IF (IQ(LARX+1).NE.JCARD)  RETURN
      LARX = LARX + 2
      RETURN
 
C----              CONSTRUCT C/C-INDEX FOR NO C/C
 
   68 LARX  = LCCIX + 3
      LARXE = LARX  + 1
      IQ(LARX)   = NVARRI(9) + LINBIN
      IQ(LARXE)  = NVARRI(8) + JCARD
      IQ(LARXE+1)= -(LINBIN+IQ(LINBIN)+1)
      RETURN
 
 
C-------           START OF NEW FILE,  NROLD=1 FOR FILE-ID RECORD
 
   71 IF (NROLD.NE.1)        GO TO 73
      IF (NVARRI(1)+NVARRI(3).NE.6)  GO TO 79
      IF (NVARRI(2).NE.0)            GO TO 79
      NDECKR = 100 * ((NDECKR+99)/100)
      IQ(LBUF+14) = 0
      IQ(LBUF+15) = 0
      JCARD  = 1
      RETURN
 
C--                NROLD=2 FOR  FILE TITLE RECORD
 
   73 IF (NVARRI(1).EQ.3)    GO TO 34
 
C--                BAD FORMAT
 
   79 WRITE (IQPRNT,9079) NVOLD(6)
      GO TO 89
 
C-------           MACHINE EOF SEEN
 
   80 CALL PABERR (LUNUSE)
   81 NVARRI(1) = 4
      NVARRI(3) = 3
      IF (NROLD.NE.0)        GO TO 86
      WRITE (IQPRNT,9082) NVOLD(6)
      RETURN
 
C--                UNEXPECTED EOF
 
   86 WRITE (IQPRNT,9086) NVOLD(6)
   89 CALL PABEND
      RETURN
 
 9079 FORMAT (1X/' ***  ',A6,' NOT COMPACT BINARY OR BADLY POSITIONED.')
C9082 FORMAT (9H EOI ON  ,A5)                                           -A4
 9082 FORMAT (9H EOI ON  ,A4)                                            A4
 9086 FORMAT (1X/' ***  UNEXPECTED EOF READ ON ',A6)
      END
C====================================================================
CDECK  ID>, POPREW.
      SUBROUTINE POPREW
 
C-    CLOSE/REWIND CURRENT NEW
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
 
C--                CLOSE POPOFF BUFFER
 
      IF (IQ(LLAST+1).LT.0)  GO TO 31
      IQ(LBUF+3) = IDEOF(3)
      IQ(LBUF+4) = IDEOF(4)                                             -A8M
      IQ(LBUF+5) = 3
      IQ(LBUF+6) = 0
 
      IQ(LBUF+1) = -7
      CALL POPOFF
 
C--                FINAL REWIND
 
   31 IF (NRTNEW.LT.0)       RETURN
      CALL AUXFIL (512,NVNEW(1),0)
      RETURN
      END
C====================================================================
CDECK  ID>, POPOFF.
      SUBROUTINE POPOFF
 
C-    DRIVE NEXT COMPACT BINARY RECORD TO 'NEW', WITH DOUBLE BUFFERING
C-    FOR LOOK-AHEAD INFORMATION
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDNEWV(1)), (IDP(1),IDNEWV(3)), (IDF(1),IDNEWV(5))
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LUNEW,NVNEW(1))
 
C9043 FORMAT (5X,2HP=,A8,   I5,1X,A2,2HD=)                               A8M
C9043 FORMAT (5X,2HP=,A6,A2,I5,1X,A2,2HD=)                               A6
C9043 FORMAT (5X,2HP=,A5,A3,I5,1X,A2,2HD=)                               A5
 9043 FORMAT (5X,2HP=,2A4,  I5,1X,A2,2HD=)                               A4
C9044 FORMAT (15X,I5,1X,A2,2HD=,A8)                                      A8M
C9044 FORMAT (15X,I5,1X,A2,2HD=,2A6)                                     A6
C9044 FORMAT (15X,I5,1X,A2,2HD=,2A5)                                     A5
 9044 FORMAT (15X,I5,1X,A2,2HD=,2A4)                                     A4
 
 
      IF (IQ(LLAST+1))       41,21,24
 
C----              COMPLETE PENDING RECORD AT  LLAST
 
   21 IQ(LLAST+7) = IQ(LBUF+5)
      IQ(LLAST+8) = IQ(LBUF+6)
      LA = IQ(LLAST-2)
      IQ(LA+1) = IQ(LBUF+3)
      IQ(LA+2) = IQ(LBUF+4)                                             -A8M
      CALL PKBYT (IQ(LLAST+5),IQ(LA+3),1,4,MPAK2(1))                    -A8M
C     CALL PKBYT (IQ(LLAST+5),IQ(LA+2),1,4,MPAK2(1))                     A8M
 
 
C--                TRANSMIT COMPLETED RECORD
 
   24 LDO = LLAST
   25 LA  = IQ(LDO-2)
      LE  = LA + IQ(LA)
      CALL XOUTB (LUNEW,IQ(LA+1),IQ(LA))
      NRNEW = NRNEW + 1
      IQ(LDO+1)= -7
      IQ(LDO+3)= 0
      IQ(LDO+4)= 0                                                      -A8M
 
C-------           HANDLE NEW RECORD
 
   41 IF (IQ(LBUF+1).LT.0)   RETURN
      LDO = LBUF
      NEW = IQ(LBUF+5)
      IF (NRNEW.EQ.0)        GO TO 51
      IF   (NEW.EQ.0)        GO TO 46
      IF   (NEW-2)           44,43,61
 
   43 IDNEWV(1)= IQBLAN
      IDNEWV(2)= IQBLAN                                                 -A8M
      IDNEWV(3)= IQ(LBUF+3)
      IDNEWV(4)= IQ(LBUF+4)                                             -A8M
      IF (LOGLEV.LT.1)       GO TO 45
      WRITE (IQPRNT,9043) IDP,NDKNEW,MODEPR
      GO TO 45
 
   44 IDNEWV(1)= IQ(LBUF+3)
      IDNEWV(2)= IQ(LBUF+4)                                             -A8M
      IF (LOGLEV.GE.3)   WRITE (IQPRNT,9044) NDKNEW,MODEPR,IDD
   45 NDKNEW= NDKNEW + 1
   46 IF (IQ(LBUF+1).NE.0)   GO TO 25
      LBUF = LLAST
      LLAST= LDO
      RETURN
 
 
C-------           'NEW' IS AT BOF, INITIAL REWIND IF BIG-FILE STARTS
C-    1 ATT, 2 RES, 4 CARD, 8 DET, 16 EOF, 32 HOLD, 64 OUT, 256 I, 512 F
 
   51 IF (NRTNEW.GE.0)       GO TO 53
      CALL AUXFIL (320,NVNEW(1),0)
   53 IF   (NEW.EQ.3)        GO TO 63
 
C--                INSERT MISSING TITLE
 
      ISAVE = MODEPR
      MODEPR= IQDOT
      LBUF  = LLAST
 
      IF (IQ(LBUF+1).NE.-1)  CALL NOTITL
      CALL PRTITL
      IQ(LBUF+1)= 0
 
      LBUF  = LDO
      MODEPR= ISAVE
      GO TO 66
 
C-------           OUTPUT  EOF/TITLE
 
   61 CALL AUXFIL (0,NVNEW(1),0)
   63 CALL PRTITL
 
C----              WRITE FILE-NAME RECORD
 
   66 CALL VZERO (MWK(6),12)
      MWK(5) = 3
      MWK(7) = 3
 
      MWK(11) = 3
      MWK(12) = IDNEWV(5)
      MWK(13) = IDNEWV(6)                                               -A8M
      CALL PKBYT (MWK(5),MWK(14),1,4,MPAK2(1))                          -A8M
C     CALL PKBYT (MWK(5),MWK(13),1,4,MPAK2(1))                           A8M
      CALL XOUTB (LUNEW,MWK(12),MWK(11))
      NRNEW = 1
      NDKNEW= NDKNEW + 1
      IF (IQ(LLAST+1).EQ.0)  GO TO 21
      GO TO 46
      END
C====================================================================
CDECK  ID>, PRTITL.
      SUBROUTINE PRTITL
 
C-    HANDLE OLD OR NEW TITLE FOR PRINTING
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      COMMON /MODTT/ NMODTT,JMODTT(6),TEXTTT(10)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
 
      IQ(LBUF+3)= IDEOF(3)
      IQ(LBUF+4)= IDEOF(4)                                              -A8M
      LA = IQ(LBUF-2) + IQ(LBUF+13)
      CALL UBLOW (IQ(LA),MWKX(1),80)
      IF (MODEPR.EQ.IQMINS)  GO TO 44
 
      CALL UCOPY (IDEOF(1),IDNEWV(1),8)
      CALL NAMEFL (IQ(LA),IDNEWV(5))
      NDKNEW = 100 * ( (NDKNEW+99)/100 )
      CALL UBLOW (IQ(LA),MWK(1),80)
 
      IF (MODEPR.EQ.IQPLUS)  GO TO 41
      IF (MOPTIO(1).EQ.0)    GO TO 41
 
C-----             UPDATE VERSION NUMBER
 
      JS = IUCOMP (IQSLAS,MWK(1),60)
      IF (JS.NE.0)           GO TO 24
      JS = IUCOMP (IQDOT,MWK(1),60)
      IF (JS.EQ.0)           GO TO 41
 
 
C--                READ OLD VERSION NUMBER
 
   24 J  = JS
      N  = 0
   25 J  = J + 1
      JV = IUCOMP (MWK(J),IQNUM(1),10) - 1
      IF (JV.LT.0)           GO TO 26
      N = N + 1
      IQUEST(N+10)= JV
      GO TO 25
 
   26 IF (N.EQ.0)            GO TO 29
      JT = 11
      J  = N
   27 IQUEST(J+10)= IQUEST(J+10) + 1
      IF (IQUEST(J+10).LT.10)  GO TO 31
      IQUEST(J+10)= 0
      J = J - 1
      IF (J.NE.0)            GO TO 27
   29 IQUEST(10)= 1
      N  = N + 1
      JT = 10
 
C--                WRITE NEW VERSION NUMBER/DATE/TIME
 
   31 JP = JS + 1
   33 J  = IQUEST(JT)
      MWK(JP)= IQNUM(J+1)
      JT = JT + 1
      JP = JP + 1
      N  = N  - 1
      IF (N.NE.0)  GO TO 33
 
      MWK(JP)  = IQBLAN
      MWK(JP+1)= IQBLAN
      CALL UBLOW (DAYTIM(1),MWK(JP+2),12)
      IF (NMODTT.EQ.0)       GO TO 39
 
 
C--                MODIFY TITLE CARD ACCORDING TO
C--                +OPTION, MODIF, C=C1-C2,...,C5-C6.TEXT
 
C  36 CALL UBLOW (TEXTTT(1),MWKX(1),80)                                  A8M
   36 CALL UBLOW (TEXTTT(1),MWKX(1),40)                                 -A8M
      JS = 0
      JT = 1
 
   37 JS = JS + 1
      JP = JMODTT(JS)
      N  = JMODTT(JS+3)
      CALL UCOPY (MWKX(JT),MWK(JP),N)
      JT = JT + N
      IF (JS.NE.NMODTT)      GO TO 37
      CALL UBLOW (IQ(LA),MWKX(1),80)
 
C--                PRINT TITLE(S)
 
   39 CALL UBUNCH (MWK(1),IQ(LA),80)
      WRITE (IQPRNT,9041) NDKNEW,IQPLUS,MWK
      MUSE = IQBLAN
      GO TO 45
 
   41 IF (NMODTT.NE.0)       GO TO 36
      WRITE (IQPRNT,9041) NDKNEW,MODEPR,MWKX
      GO TO 49
   44 MUSE = IQNUM(1)
   45 WRITE (IQPRNT,9044) MUSE,MWKX
   49 WRITE (IQPRNT,9049)
      RETURN
 
 9041 FORMAT (1X/14H     P=*TITLE*,I6,1X,A2,4H--- ,80A1)
 9044 FORMAT (A1,6X,7H*TITLE*,7X,1H-,5X,80A1)
 9049 FORMAT (1X)
      END
C====================================================================
CDECK  ID>, NOTITL.
      SUBROUTINE NOTITL
 
C-    CONSTRUCT ARTIFICIAL TITLE IN BUFFER  LBUF
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /CONST/ MPAK2(2),MPAK5(2),MPAK9(2),MPAK15(2),DAYTIM(3)
     +,              NWNAME,NWSENM,NWSEN1,LARGE
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(7),NRTNEW,NRNEW,LLASTN, IDNEWV(8),JPDNEW,NDKNEW
     +, NVNEWL(3),NCDECK,JNEW,MODEPR,  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
 
      IQ(LBUF+1) = 0
      IQ(LBUF+3) = IDEOF(3)
      IQ(LBUF+4) = IDEOF(4)                                             -A8M
      IQ(LBUF+5) = 3
      IQ(LBUF+6) = 0
      IQ(LBUF+13)= NWSEN1
 
      L       = IQ(LBUF-2)
      IQ(L)   = NWSENM + KDNWT
      L       = L + NWSEN1
      IQ(L-1) = 0
      CALL SBIT1       (IQ(L-1),19)
C     CALL SBYT (NWSEN1,IQ(L-1),28,9)                                    B36M
 
      CALL VBLANK (MWK(1),80)
      CALL UCTOH1 ('ARTEFACT      /0',MWK(1),16)
      CALL UBLOW  (DAYTIM(1),MWK(19),12)
      CALL UBUNCH (MWK(1),IQ(L),80)
      MODEPR = IQPLUS
      RETURN
      END
C====================================================================
CDECK  ID>, AUXFIL.
      SUBROUTINE AUXFIL (IOUSEP,LUNV,NAMEP)
 
C-    EXQ IOFILE, FOLLOW UPDATE OF LUN-AREA + PRINT MESSAGE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IOUSEP(9), LUNV(9), NAMEP(9)
      DIMENSION    LUNARE(9), MUNIT(2),  MVPRS(7), MVPR(11)
      EQUIVALENCE (MVPRS(1),MVPR(1),IQUEST(11)), (JUNIT,IOMODE(3))
      EQUIVALENCE (IDSTR,LUNARE(6)), (NEOF,LUNARE(7))
     +,           (NRECT,LUNARE(8)), (NREC,LUNARE(9))
      DATA  MUNIT  /4H RCR, 4H CAR/
 
 
C---- FILE DESCRIPTION VECTOR
C-
C-           LUNV (1)  FORTRAN LOGICAL UNIT USED IN READ/WRITE STATEMENT
C-                (3)  LUN= OR FILE=  PARAMETER
C-                (5)  IO-TYPE
C-                (6)  STREAM-NAME FOR PRINTING
C-                (7)  NUMBER OF FILES FINISHED READING
C-                (8)  TOTAL NUMBER OF RECORDS READ ON BIG-FILE
C-                     UP-DATED AT THE END OF EACH INDIVIDUAL FILE
C-                     RESET TO ZERO ON REWIND
C-                     = NEGATIVE: BIG-FILE NOT YET REFERENCED
C-                (9) NUMBER OF RECORDS READ ON CURRENT FILE
 
 
      IOUSE = IOUSEP(1)
      NAME  = NAMEP(1)
      CALL UCOPY  (LUNV(1),LUNARE(1),9)
      CALL IOFILE (IOUSE,LUNARE(1))
      IF (IOMODE(9).EQ.0)    GO TO 31
 
 
C-------           INITIAL REWIND
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
C--              PERMANENTLY RECORD 'CARDS', 'OUTPUT', 'CETA', STREAM-ID
 
      CALL SBIT (IOMODE(3),LUNARE(5),3)
      CALL SBIT (IOMODE(7),LUNARE(5),7)
      CALL SBIT (IOMODE(8),LUNARE(5),8)
      IF (NAME.EQ.0)         GO TO 24
      IDSTR=NAME
 
   24 MVPR(7) = IDSTR
      WRITE (IQPRNT,9024) MVPRS
      GO TO 46
 
C-------           INTERMEDIATE FILE OR FINAL REWIND
 
   31 MVPR(7) = IDSTR
      IF (NREC.NE.0)         GO TO 33
      WRITE (IQPRNT,9024) MVPRS
      GO TO 45
 
   33 NRECT   = NRECT + NREC
      NEOF    = NEOF + 1
      MVPR(8) = NEOF
      MVPR(9) = NREC
      MVPR(10)= MUNIT(JUNIT+1)
      MVPR(11)= NRECT
      WRITE (IQPRNT,9034) MVPR
 
   45 IF (IOMODE(10).EQ.0)   GO TO 49
      IF (IOMODE(11).NE.0)   GO TO 46
      IF (IOMODE(6).NE.0)    GO TO 49
      NRECT = -1
      IF (IOMODE(4).NE.0)    GO TO 47
   46 NRECT = 0
   47 NEOF  = 0
   49 NREC  = 0
      CALL UCOPY (LUNARE(1),LUNV(1),9)
      RETURN
 
C9024 FORMAT (1X,6A1,2H ',A5,1H')                                       -A4
C9034 FORMAT (1X,6A1,2H ',A5,14H'   AFTER FILE,I3,6H  WITH,I6,A4,3HDS,, -A4
C    FI6,7H TOTAL.)                                                     -A4
 9024 FORMAT (1X,6A1,2H ',A4,1H')                                        A4
 9034 FORMAT (1X,6A1,2H ',A4,14H'   AFTER FILE,I3,6H  WITH,I6,A4,3HDS,,  A4
     FI6,7H TOTAL.)                                                      A4
      END
C====================================================================
CDECK  ID>, CREBUF.
      SUBROUTINE CREBUF
 
C-    CREATE 1 PAM I/O-BUFFER, + POSS. INDEX EXPANSION/CREATION BANK
C-
C-    MULTI-FLAG CONTROL-PARAMETER  NBUFCI
C-    IABS(NBUFCI) = NWCI    WORDS OF PRE-BUFFER INFORMATION (MIN 16)
C-                           WORDS L+1  -  L+16   STANDARD MEANING
C-                           WORDS L+17 ONWARDS   SPECIAL, ANY PROGRAM
C-                           BUFFER-REGION STARTS AT  L+NWCI+1
C-    NBUFCI  +VE, EVEN      NO PILEUP TO THIS BANK, NO INDEX-BANK
C-    NBUFCI  +VE, ODD       PILEUP PROVISION, YES INDEX-BANK
C-    NBUFCI  -VE            NO PILEUP, BUT LIFT INDEX-BANK
 
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
      DIMENSION    MMCCIX(4),  MMBUF(6)
 
 
      DATA  MMCCIX /4HCCIX,0,0,100/
      DATA  MMBUF  /4HBUF ,4,0,2H**,16,512/
C     DATA  NWPILE /15/                                                  B64
C     DATA  NWPILE /17/                                                  B60
C     DATA  NWPILE /20/                                                  B48
C     DATA  NWPILE /25/                                                  B36
      DATA  NWPILE /34/                                                  B32
 
 
      NWCI     = MAX  (MMBUF(5),IABS(NBUFCI))
      NTOL     = KDNWT + 8
      MMBUF(4) = MMBUF(6) + NWCI + NTOL
      IF (NBUFCI.LT.0)           GO TO 24
      IF (JBIT(NBUFCI,1).EQ.0)   GO TO 25                               -MSK
C     IF ((NBUFCI.AND.1).EQ.0)   GO TO 25                                MSKC
      MMBUF(4) = MMBUF(4) + NWPILE
   24 IF (LCCIX.NE.0)        GO TO 25
      CALL LIFTBK (LCCIX,0,0,MMCCIX(1),0)
 
   25 CALL LIFTBK (LBUF, 0,0,MMBUF(1), 0)
      CALL VZERO (IQ(LBUF+1),MMBUF(4))
      IQ(LBUF-4) = LBUF + MMBUF(4) - NTOL
      IQ(LBUF-3) = LBUF + NWCI + 1
      IQ(LBUF-2) = IQ(LBUF-3)
      IQ(LBUF+1) = -7
      RETURN
      END
C====================================================================
CDECK  ID>, INCHCH.
      SUBROUTINE INCHCH
 
C-    DECODE C/C-CHARCTER SUBSTITUTION CODE
C-    TO PREPARE SUBSTITUTION CONTROL INFORMATION IN /CCHCH/
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CCHCH/ IFORPL,NOTHCC,MORGCC(6),MREPCC(6)
      COMMON /LUNSLN/NSTRM,NBUFCI,LUNVL(3),LUNVN(9),NOPTVL(4),NCHCH(6)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    M(14), MCHCH(7)
      EQUIVALENCE (M(1),IQUEST(11))
      DATA  MCHCH  /1H+,1H-,1H*,1H&,1H!,1H?,1HC/
 
      CALL VZERO (IFORPL,14)
      CALL UBLOW (NCHCH(1),M(1),14)
 
   14 CALL SBIT0 (MOPTIO(31),3)
   15 CALL ULEFT (M(1),1,14)
      IF (M(1).NE.IQLETT(1)) GO TO 17
      M(1) = IQBLAN
      GO TO 15
 
   17 JTK = 0
 
C----              ANALYSE PAIRS OF CHARACTERS
 
   21 JOLD = IUCOMP (M(JTK+1),MCHCH(1),7)
      JNEW = IUCOMP (M(JTK+2),MCHCH(1),7)
      IF (JOLD.EQ.0)  JOLD=IUCOMP(M(JTK+1),IQNUM(2),7)
      IF (JNEW.EQ.0)  JNEW=IUCOMP(M(JTK+2),IQNUM(2),7)
      IF (JOLD.EQ.0)         GO TO 31
      IF (JNEW.EQ.0)         GO TO 31
      IF (JOLD.NE.1)         GO TO 24
      IFORPL = MCHCH(JNEW)
      GO TO 27
 
   24 NOTHCC = NOTHCC + 1
      MORGCC(NOTHCC) = MCHCH(JOLD)
      MREPCC(NOTHCC) = MCHCH(JNEW)
   27 JTK = JTK + 2
      IF (NOTHCC.LT.6)       GO TO 21
 
C--                PRINT SUBSTITUTIONS TO BE DONE
 
   31 WRITE (IQPRNT,9031)
      IF (IFORPL.EQ.0)       GO TO 33
      WRITE (IQPRNT,9032)    MCHCH(1),IFORPL
   33 IF (NOTHCC.EQ.0)       RETURN
      WRITE (IQPRNT,9032)   (MORGCC(J),MREPCC(J),J=1,NOTHCC)
      RETURN
 
 9031 FORMAT (1X)
 9032 FORMAT (' CONTROL-CHARACTER SUBSTITUTION,  CHANGE  ',A2,3HTO ,A1)
      END
C====================================================================
CDECK  ID>, JARTPX.
      FUNCTION JARTPX (ITP)
 
C-    FIND C/C-TYPE, CHECK FOR C/C-CHARACTER SUBSTITUTION
C-    IN CASE OF SUBSTITUTION STORE NEW SYMBOL OVER-WRITING THE OLD ONE
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
      COMMON /CCHCH/ IFORPL,NOTHCC,MORGCC(6),MREPCC(6)
C--------------    END CDE                             --------------
C     DIMENSION    MM(10), ITP(9)                                        A8M
      DIMENSION    MM(6),  ITP(9)                                       -A8M
C      PARAMETER   ( NBLANK = INT(Z'20202000') )
      INTEGER  NBLANK
      DATA NBLANK /Z'20202000'/

      IT     = ITP(1)
      JARTPX = 0
      JCCTPX = 0
      MM(2) = AND(IT,255)
      IF (MM(2).EQ.43)       GO TO 21
      IF (NOTHCC.EQ.0)       RETURN
 
C--                CHECK OTHER CONTROL CHAR
 
      MM(1) = OR (MM(2), NBLANK)
      J = IUCOMP (MM(1),MORGCC(1),NOTHCC)
      IF (J.EQ.0)            RETURN
 
C--                IF SO, GO TO CHECK LEGAL PATCHY C/C
 
      NEWCC = MREPCC(J)
      CALL UBLOW (IT,MM,4)
      MM(1) = IQPLUS
      JCCLOW = 0
      CALL CCTOUP (MM(2),3)
      GO TO 23
 
C----              SEEN CONTROL-CHAR   '+'
 
   21 NEWCC = IFORPL
      CALL UBLOW (IT,MM,4)
      JCCLOW = 0
      CALL CCTOUP (MM(2),3)
      IF (JCCLOW.EQ.0)       GO TO 24
   23 CALL UBUNCH (MM(1),IT,4)
   24 JCCTPX = IUCOMP (IT,MCCVEC(1),NCCVEC)
      IF (JCCTPX.EQ.0)       RETURN
      IF (NEWCC.NE.0)        GO TO 31
   27 JARTPX = MCCSW(JCCTPX+1)
      RETURN
 
C----              SUBSTITUTE REPLACEMENT CHAR.
 
   31 CONTINUE
      MM(1) = NEWCC
      CALL UBUNCH (MM(1),ITP(1),IQCHAW)
      IF (NEWCC.EQ.IQPLUS)   GO TO 27
      RETURN
      END
C====================================================================
CDECK  ID>, LOGLV.
      SUBROUTINE LOGLV (ITPAR,JFLAG,LV)
 
C-    SET LOGGING LEVEL ACCORDING TO JFLAG
C-        .GT. 0  LOGLEV = LV
C-        .LT. 0  IF LOG-BIT IN ITPAR PRESENT :  LOGLEV = LV
C-                IF NOT :  AS FOLLOWS :
C-        .EQ. 0  IF QUICK OR PONLY BIT PRESENT :  LOGLEV = 0 OR 1
C-                IF NOT :  LOGLEV = LOGLVG  THE GLOBAL DEFAULT LEVEL
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -------------------------
      DIMENSION    ITPAR(9)
 
 
C--                HANDLE PARAMETER  T=PONLY, QUICK
 
      IF (JFLAG.NE.0)        GO TO 21
   12 J = JRSBYT (0,ITPAR(1),16,2)
      IF (J.NE.0)            GO TO 14
      LOGLEV = LOGLVG
      RETURN
 
   14 LOGLEV = 2 - J
      RETURN
 
C--                HANDLE PARAMETER  LEV=N
 
   21 IF (JFLAG.LT.0)        GO TO 24
      LOGLEV = LV
      RETURN
 
   24 J = JRSBYT (0,ITPAR(1),12,1)
      IF (J.EQ.0)            GO TO 12
      LOGLEV = LV
      RETURN
      END
C====================================================================
CDECK  ID>, SETID.
      SUBROUTINE SETID (IDV)
 
C-    SET PATCH/DECK IDENTIFIERS INTO IDV
C-    FROM  IDV    IF IDV(1) .EQ. ZERO
C-    FROM  NVARRI IF IDV(1) .NE. ZERO
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(14),LADRV(11),LCCIX,LBUF,LLAST
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEX(20)
     +, NVINC(6),NVUTY(17),IDEOF(9),NVPROX(6),LOGLVG,LOGLEV,NVWARX(6)
     +, NVOLDQ(6), NVOLD(10), IDOLDV(10), NVARRI(12), NVCCP(10)
     +, NVNEW(10), IDNEWV(10), NVNEWL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
      DIMENSION    IDV(9)
 
 
      IF (IDV(1).EQ.0)       GO TO 14
      IDV(9) = NVARRI(3)
      IDV(7) = NVARRI(5)
      IDV(8) = NVARRI(6)                                                -A8M
 
C--                DECK
 
   14 IF (IDV(9).NE.1)       GO TO 18
      IDV(1) = IDV(7)
      IDV(2) = IDV(8)                                                   -A8M
      RETURN
 
C--                PATCH
 
   18 IDV(1) = IQBLAN
      IDV(2) = IQBLAN                                                   -A8M
      IDV(3) = IDV(7)
      IDV(4) = IDV(8)                                                   -A8M
      RETURN
      END
C====================================================================
CDECK  ID>, CCTOUP.
      SUBROUTINE CCTOUP (MV,NCHP)
 
C-    CONVERT LOWER CASE TO UPPER FOR ACTIVE PART OF C/C
 
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
C--------------    END CDE                             --------------
      DIMENSION    MV(99), NCHP(9)
 
C-                  MASKU = Z'DF FFFFFF'
      PARAMETER    (MASKU = -536870913)
 
 
 
      NCH  = NCHP(1)
      JLOW = 0
 
      DO 49  JCH=1,NCH
 
      JVAL = AND (MV(JCH),255)
      IF (JVAL.LT.97)        GO TO 49
      IF (JVAL.GE.123)       GO TO 49
 
C--                CONVERSION NEEDED
 
   24 JLOW = JCH
 
      MV(JCH) = AND (MV(JCH), Z'FFFFFFDF')
 
   49 CONTINUE
      JCCLOW = MAX  (JCCLOW,JLOW)
      RETURN
      END
C====================================================================
CDECK  ID>, IOFILE.
      SUBROUTINE IOFILE (IFLAG,IVECT)
 
C-    ATTACH FILE, INITIAL REWIND, FINAL REWIND, DETACH
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IFLAG(9), IVECT(9)
      EQUIVALENCE (LUN,IOPARF(1)), (JTYP,IOPARF(5))
 
C     INTEGER      ACTION(8)                                             A6M
C      DOUBLE PRECISION ACTION(8)                                        -A6M
      character*16 ACTION(8)                                            -A6M
      DIMENSION    IACTIO(16)                                           -A6M
      EQUIVALENCE (IACTIO(1), ACTION(1))                                -A6M
 
 
 
      DATA ACTION/'HOLD  ','RESUME','EOF   ','REWIND','ATTACH','DETACH'
     +,           'EOFREW','CLOSE ' /
 
C------    CODE BITS IN  IOTALL, IOTOFF, IOTON, IOTYP
 
C-    VAL   1  BIT 1  ATTACH
C-          2      2  RESUME
C-          4      3  CARDS
C-          8      4  DETACH
C-         16      5  EOF
C-         32      6  HOLD
 
C-         64      7  OUPUT FILE
C-        128      8  CETA-FORMAT
C-        256      9  INITIAL REWIND
C-        512     10  FINAL REWIND
C-       1024     11  INTERMEDIATE REWIND IN YEDIT
 
 
      JTYPAR = IFLAG(1)
      CALL UCOPY (IVECT(1),IOPARF(1),5)
      J     = 8191 - IOTOFF
C     MTYP  = (JTYP .OR. JTYPAR .OR. IOTON .OR. IOTALL) .AND. J          MSKC
      CALL SBYTOR (JTYP,  IOTON,1,12)                                   -MSK
      CALL SBYTOR (JTYPAR,IOTON,1,12)                                   -MSK
      CALL SBYTOR (IOTALL,IOTON,1,12)                                   -MSK
      MTYP = JBYTET (J,IOTON,1,12)                                      -MSK
 
      CALL UPKBYT (MTYP,1,IOMODE(1),12,0)
 
      IF (IOMODE(10).EQ.0)   GO TO 24
      IOMODE(9) = 0
      IF (IOMODE(6) .NE.0)  IOMODE(4)=0
      IF (IOMODE(11).EQ.0)   GO TO 24
      IOMODE(4) = 0
      IOMODE(6) = 0
 
   24 IOTON  = IOMODE(9)
      IOTOFF = 7
      IF (LUN.EQ.IQREAD)     GO TO 31
      IF (IOMODE(9) .NE.0)  IOTOFF=IOMODE(2)
      IF (IOMODE(10).NE.0)  IOTOFF=IOMODE(6)
 
C- INPUT  IOTON  = IOMODE(9)
C-        IOTOFF =  =0 REWIND / NE.0 NO REWIND
 
      CALL IOFILX
 
C- OUTPUT IOTON CHANGED TO :
C-              2  IF EOF WRITTEN
C-              4  IF ATTACH DONE
C-              5  IF DETACH DONE
C-       IOTOFF CHANGED TO :
C-              1  IF REWIND NOT DONE
 
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
   31 IF (IOMODE(9) .EQ.0)   GO TO 41
      IVECT(1) = IOPARF(1)
      IVECT(3) = 0
      IF (IOMODE(7)-IOMODE(3).NE.-1)  GO TO 41
      CALL VZERO (NCHKD,4)
      LUNPAM = LUN
      CALL KDNGO
      IF (IOMODE(2) .NE.0)   GO TO 42
      IF (LUN.EQ.IQREAD)     GO TO 42
      CALL KDNREW
 
   41 IF (IOTOFF.NE.0)       GO TO 42
      IF (IOTON .EQ.2)  IOTON=6
      IOTON = MAX  (IOTON,3)
 
   42 CALL UBLOW (ACTION(IOTON+1),IQUEST(11),6)
      IOTON = 0
      IOTOFF= 0
      IOSPEC= 0
      RETURN
      END
C====================================================================
CDECK  ID>, IOFILX.
      SUBROUTINE IOFILX
 
C-    EXECUTION FOR IOFILE, VERSION FOR STRAIGHT-FORWARD FORTRAN
 
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      COMMON IQUEST(30)
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LUN,IOPARF(1))
      DATA  JEXPAM / 4HPAM  /
      DATA  JEXCAR / 4HCAR  /
 
C------            START FILE, INITIAL REWIND
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
      IF (IOMODE(9).EQ.0)    GO TO 51
      IF (IOPARF(3).EQ.0)    GO TO 31
      IOPARF(1) = IOPARF(3)
      IF (IOMODE(1).EQ.0)       GO TO 31
      JEXTU = JEXCAR
      IF (IOMODE(3).EQ.0)  JEXTU = JEXPAM
      CALL FLKRAK (JEXTU)
      CALL FLINK (LUN)
      IOTON = 4
 
   31 IF (IOTOFF.NE.0)                  RETURN
      IF (IOMODE(7)-IOMODE(3).EQ.-1)    RETURN
      GO TO 92
 
C------            INTERMEDIATE FILE
 
   51 IF (IOMODE(10).NE.0)           GO TO 61
      IF (IOMODE(5)+IOMODE(7).EQ.2)  GO TO 71
      RETURN
 
 
C- 1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD, 7 OUT, 8 CE, 9 INI, 10 FIN
 
C------            END FILE, FINAL REWIND
 
   61 IF (IOMODE(7).NE.0)    GO TO 71
 
C--                Terminate CETA input file
 
      IF (IOMODE(8).EQ.0)    GO TO 65
      IF (IOSPEC.EQ.0)       GO TO 65
      GO TO 98
 
C--                DETACH input file
 
   65 IF (IOMODE(6).NE.0)    GO TO 98
      IF (IOMODE(4).EQ.0)    GO TO 67
      CLOSE (UNIT=LUN)
      IOMODE(6) = 0
      IOTON     = 5
      RETURN
 
C--                REWIND input card file
 
   67 IF (IOMODE(3).EQ.0)    GO TO 91
      CALL KDNREW
      RETURN
 
C------            OUTPUT FILE
 
   71 IF (IOMODE(8).EQ.0)    GO TO 76
      CLOSE (LUN)
      IOTON = 7
      GO TO 98
 
C--                Write EOF to output file
 
   76 CONTINUE
      IF (IOMODE(5).EQ.0)    GO TO 91
      ENDFILE LUN
      IOTON = 2
 
C----              REWIND of input/output file
 
   91 IF (IOTOFF.NE.0)       RETURN
   92 IF (IOMODE(8).EQ.0)    GO TO 96
      IF (IOSPEC.NE.0)       GO TO 98
   96 REWIND LUN
      RETURN
 
   98 IOTOFF = 1
      RETURN
      END
C====================================================================
CDECK  ID>, IOTYPE.
      FUNCTION IOTYPE (MTYPP,MGATEP)
 
C-    CONVERT T=PARAMETER TO IO-PARAMETER
C-    1 ATT, 2 RES, 3 CAR, 4 DET, 5 EOF, 6 HOLD
 
      DIMENSION    MTYPP(9), MGATEP(9)
 
 
 
      MTYP = MTYPP(1)
      MGATE= 1023 - MGATEP(1)
      M    = JBYT (MTYP,1,5)                                            -MSK
C     M    = MTYP .AND. 31                                               MSKC
      CALL CBYT (MTYP,18,M,2,1)
      CALL CBYT (MTYP, 8,M,6,1)
      IOTYPE = JBYTET (MGATE,M,1,6)                                     -MSK
C     IOTYPE = M .AND. MGATE                                             MSKC
      RETURN
      END
C====================================================================
CDECK  ID>, JARTYP.
      FUNCTION JARTYP (ITP)
 
C-    FIND C/C TYPE OF YPATCHY CONTROL-CARD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /CCPARU/MCCTOU,JCCLOW,JCCTPX
      COMMON /CCTEXT/NCCVEC,MCCVEC(28),MCCSW(29),NCCDFI,MCCDF(24)
C--------------    END CDE                             --------------
      DIMENSION    MM(4), ITP(9)
 
 
      IT = ITP(1)
      MM(2) = AND(IT,255)
      IF (MM(2).EQ.43)       GO TO 21
      JARTYP = 0
      RETURN
 
   21 CONTINUE
      IF (MCCTOU.EQ.0)       GO TO 41
      CALL UBLOW (IT,MM,4)
      JCCLOW = 0
      CALL CCTOUP (MM(2),3)
      IF (JCCLOW.EQ.0)       GO TO 41
   39 CALL UBUNCH (MM,IT,4)
   41 J = IUCOMP (IT,MCCVEC,NCCVEC)
      JARTYP = MCCSW(J+1)
      RETURN
      END
C====================================================================
CDECK  ID>, KDNGO.
      SUBROUTINE KDNGO
 
C-    INITIATE  KDNEXT-FILE
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
 
      IPROMU = 0
      IF (LUNPAM.EQ.IQTTIN) IPROMU=IPROMI
      RETURN
      END
C====================================================================
CDECK  ID>, KDNREW.
      SUBROUTINE KDNREW
 
C-    REWIND  KDNEXT-FILE
 
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
 
      REWIND LUNPAM
      RETURN
      END
C====================================================================
CDECK  ID>, KDNEXTVX.
      SUBROUTINE KDNEXT (MV)
 
C-    READ NEXT CARD FROM LUNPAM AND PACK IT STARTING AT MV(1)
C-    RETURN  NCHKD= NO. OF CHARACTERS,  NWKD= NO. OF WORDS
C-    OR  NCHKD= -3 EOI
C-    NCARDP  COUNTS THE NUMBER OF CARDS IN THE FILE
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /ARRCOM/LUNPAM,NCHKD,NWKD,NCARDP,NAREOF,NSKIPR,KDHOLD(20)
     +,              NTRUNC,IPROMU,IPROMI
C--------------    END CDE                             --------------
      DIMENSION    MV(20), KKK(21)
      CHARACTER    KCH*84
      EQUIVALENCE (KCH,KKK)
 
 
      IF (IPROMU.NE.0)  WRITE (IQTYPE,9001)
 9001 FORMAT (' y> ',$)
 
      IF (NTRUNC.EQ.72)  THEN
          NX = 72
        ELSE
          NX = 80
        ENDIF
 
      READ (LUNPAM,8000,END=41)  KCH(1:NX)
 8000 FORMAT (A)
      NCH = 80
      NCH    = MIN(NCH,NX)
      NCARDP = NCARDP + 1
      IF (NCH.EQ.0)                GO TO 29
 
C--                Construct terminator
 
      NCH = LNBLNK (KCH(1:NCH))
      IF (NCH.EQ.80)               GO TO 28
      KCH(NCH+1:NCH+4) = '    '
 
      NW = NCH/4 + 1
      IF (NW.EQ.20)                GO TO 28
 
      NCH = 4*NW
      KCH(NCH:NCH) = CHAR(0)
 
      DO  27  JL=1,NW
   27 MV(JL) = KKK(JL)
      NCHKD = NCH - 1
      NWKD  = NW
      RETURN
 
   28 NWKD  = 20
      NCHKD = 80
      CALL UCOPY (KKK,MV,20)
      RETURN
 
   29 KCH(1:4) = '   ' // CHAR(0)
      NWKD  = 1
      NCHKD = 3
      MV(1) = KKK(1)
      RETURN
 
C------            EOF
 
   41 NCHKD = -3
      RETURN
      END
C====================================================================
CDECK  ID>, KDSTEP.
      FUNCTION KDSTEP (MV,NCDP)
 
C-    SPACE OVER  NCD  CARDS IN PACKED MEMORY
 
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
C--------------    END CDE                             -----------------  ------
      DIMENSION    MV(99)
 
 
 
      NCD = NCDP
      J   = 0
 
      DO 31 JC=1,NCD
      J = J+1
      DO 19 JJ=1,KDNWT1
      IF (AND(MV(J),Z'FF000000').EQ.0)   GO TO 31
   19 J = J+1
   31 CONTINUE
 
      KDSTEP = J
      RETURN
      END
C====================================================================
CDECK  ID>, KDCOPY.
      SUBROUTINE KDCOPY (MV)
 
C-    TRANSFER NEXT CARD TO OUTPUT BUFFER, WITHOUT BLANK-FILL
 
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
C--------------    END CDE                             -----------------  ------
      DIMENSION    MV(99)
 
 
 
      DO 16 J=1,KDNWT1
      KIMA(J)= MV(J)
      IF (AND(KIMA(J),Z'FF000000').EQ.0)    GO TO 31
   16 CONTINUE
      J = KDNWT
      KIMA(J)= MV(J)
 
   18 NWTK = J
      LTK  = LTK + NWTK
      RETURN
 
C--                SHORT CARD
 
   31 CALL SBYT (KDBLAN,KIMA(J),KDPOST,KDBITS)
      GO TO 18
      END
C====================================================================
CDECK  ID>, KDFILL.
      SUBROUTINE KDFILL (MV)
 
C-    TRANSFER NEXT CARD TO OUTPUT BUFFER, WITH BLANK-FILL
 
      PARAMETER      (KDNWT=20, KDNWT1=19,KDNCHW=4, KDBITS=8)
      PARAMETER      (KDPOST=25,KDBLIN=32,KDMARK=0, KDSUB=63,JPOSIG=1)
      COMMON /KDPKCM/KDBLAN,KDEOD(2)
      COMMON /DPLINE/LTK,NWTK, KIMAPR(3), KIMA(20), KIMAPS(9)
C--------------    END CDE                             -----------------  ------
      DIMENSION    MV(99)
 
 
      DO 16 J=1,KDNWT1
      KIMA(J)= MV(J)
      IF (AND(KIMA(J),Z'FF000000').EQ.0)    GO TO 31
   16 CONTINUE
      J = KDNWT
      KIMA(J)= MV(J)
      NWTK = KDNWT
      LTK  = LTK + NWTK
      RETURN
 
C--                SHORT CARD
 
   31 CALL SBYT (KDBLAN,KIMA(J),KDPOST,KDBITS)
      LTK = LTK + J
      N   = KDNWT - J
      CALL VBLANK (KIMA(J+1),N)
      NWTK = KDNWT
      RETURN
      END
C====================================================================
CDECK  ID>, LIFTBK.
      SUBROUTINE LIFTBK (L,K,N,NAME,IFLAG)
 
C-    LIKE MQLIFT, BUT  IFLAG  +VE  HIGH BANK
C-                               0  LOW BANK
C-                             -VE  HIGH BANK WITH DATA TAKEN FROM LOW
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    NAME(4)
 
 
      CALL UCOPY (NAME,IQID,4)
      NP = NQNAMU+IQNL
      NT = NP+ IQND
      IF (LQWORK+NT.GE.LQTOL)  CALL NOMEM
      IF (IFLAG)               12,16,14
 
   12 CALL UCOPY2 (IQ(LQWORK+NP),IQ(LQSTA-IQND),IQND)
   14 LCREA = LQSTA - NT
      LQSTA = LCREA
      LQEND = LQSTA
      LQTOL = LQSTA - NQMEM
      GO TO 17
 
   16 LCREA = LQWORK
      LQWORK= LQWORK + NT
   17 CALL QLUMP (LCREA)
      IF (IQNL.NE.0)  CALL VZERO (IQ(IQLS-IQNL),IQNL)
      IF (K.EQ.0)            GO TO 29
      KN = K+N
      IF (IQNS.EQ.0)         GO TO 28
      IQ(IQLS-1) = IQ(KN)
   28 IQ(KN) = IQLS
   29 L = IQLS
      RETURN
      END
C====================================================================
CDECK  ID>, NAMEFL.
      SUBROUTINE NAMEFL (IVECT,NAME)
 
C-    READ FILE-NAME FROM FIRST TITLE-CARD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IVECT(9),NAME(9)
 
 
      NAME(2) = IQBLAN                                                  -A8M
      CALL UBLOW (IVECT(1),IQUEST(1),16)
      CALL CCTOUP (IQUEST,16)
      L = 1
 
      IF (IQUEST(1).NE.IQLETT(3))  GO TO 14
      IF (IQUEST(2).NE.IQBLAN)     GO TO 18
   12 L = L + 1
      IF (L.GE.9)                  GO TO 18
   14 IF (IQUEST(L).EQ.IQBLAN)     GO TO 12
 
   18 N = IUFIND (IQBLAN,IQUEST(L),1,8) - 1
      CALL UBUNCH (IQUEST(L),NAME(1),N)
      RETURN
      END
C====================================================================
CDECK  ID>, NOMEM.
      SUBROUTINE NOMEM
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
      DIMENSION      IDD(2),             IDP(2),             IDF(2)
      EQUIVALENCE
     +       (IDD(1),IDARRV(1)), (IDP(1),IDARRV(3)), (IDF(1),IDARRV(5))
C--------------    END CDE                             -----------------  ------
 
 
      WRITE (IQPRNT,9000) IDP,IDD
      WRITE (IQPRNT,9001) NQMAX,NVGARB(1),NVGARB(3)
      CALL PABEND
 
C9000 FORMAT ('0***  PATCHY STUCK FOR MEMORY IN P=',A8,3H D=,A8)         A8M
C9000 FORMAT ('0***  PATCHY STUCK FOR MEMORY IN P=',A6,A2,3H D=,A6,A2)   A6
C9000 FORMAT ('0***  PATCHY STUCK FOR MEMORY IN P=',A5,A3,3H D=,A5,A3)   A5
 9000 FORMAT ('0***  PATCHY STUCK FOR MEMORY IN P=',2A4,3H D=,2A4)       A4
 9001 FORMAT (6X,'PRESENT SIZE OF STORE     =',I6
     F/6X,'GAP AT START OF DECK WAS  =',I6
     F/6X,'GAP SECURITY IS SET TO    =',I6)
      END
C====================================================================
CDECK  ID>, QEND.
      SUBROUTINE QEND
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
 
 
      STOP
      END
C====================================================================
CDECK  ID>, QABEND.
      SUBROUTINE QABEND
 
C-    QABEND FOR PRODUCTION, NO LOADING OF QPOSTM
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
 
      WRITE (IQPRNT,9000)
      CALL PABEND
 
 9000 FORMAT (1X/' EXIT VIA QFATAL.')
      END
C====================================================================
CDECK  ID>, RQTELL.
      SUBROUTINE RQTELL (ID,NUM)
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
 
      WRITE (IQLOG,9000)  ID,NUM
      CALL PABEND
 
C9000 FORMAT ('0RQTELL REACHED WITH ',2O22)                              OCT
 9000 FORMAT ('0RQTELL REACHED WITH ',2Z10)                              HEX
      END
C====================================================================
CDECK  ID>, PABEND.
      SUBROUTINE PABEND
 
C-    ABNORMAL STOP ON FATAL ERROR
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      LOGICAL      INTRAC
 
 
      WRITE (IQPRNT,9000)
      WRITE (IQPRNT,9001)
 
      IF     (IQTYPE.NE.0)  THEN
          IF (IQPRNT.NE.IQTYPE)  WRITE (IQTYPE,9001)
        ENDIF
 
      STOP 99
      CALL ABEND
 
 9000 FORMAT (1X,2(/1X,20(1H*)))
 9001 FORMAT (1X,20(1H*),16H   ABNORMAL END.)
      END
C====================================================================
CDECK  ID>, PABERR.
      SUBROUTINE PABERR (LUN)
 
C-    ABNORMAL STOP ON READ ERROR
 
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
 
 
      WRITE (IQPRNT,9000) LUN
      CALL PABEND
 
 9000 FORMAT (1X/' *****    READ ERROR ON LUN=',I4)
      END
C====================================================================
CDECK  ID>, SETNUM.
      SUBROUTINE SETNUM (JNEW,NUMDIG,NUMBCD)
 
C-    CONVERT INTEGER TO 5-CHAR. BCD
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
C--------------    END CDE                             -----------------  ------
      DIMENSION    JNEW(9),NUMDIG(9),NUMBCD(9)
      DIMENSION    NUMVAL(9)
      EQUIVALENCE (NUMVAL(1),IQNUM(2))
 
 
      N = JNEW(1)
      L = 5
   21 IF (N.LT.10)           GO TO 24
      NN = N/10
      NP = N - 10*NN
      NUMDIG(L)= NP
      NUMBCD(L)= NUMVAL(NP)
      N  = NN
      L  = L-1
      IF (L.NE.1)            GO TO 21                                   -A8
C     IF (L.NE.2)            GO TO 21                                    A8
 
   24 NUMDIG(L)= N
      NUMBCD(L)= NUMVAL(N)
   27 L  = L-1
      IF (L.EQ.0)            RETURN
      NUMDIG(L)= 0
      NUMBCD(L)= IQBLAN
      GO TO 27
      END
C====================================================================
CDECK  ID>, SETOPT.
      SUBROUTINE SETOPT
 
C-    UPDATE GLOBAL OPTIONS FROM CURRENT T-PARAMETER
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /CCPARA/NCHCCD,NCHCCT,KARDCC(84),   JCCTYP,JCCPRE,JCCEND
     +,              MCCPAR(120),NCCPAR,MXCCIF,JCCIFV,JCCBAD,JCCWK(4)
     +,              JCCPP,JCCPD,JCCPZ,JCCPT,JCCPIF,JCCPC,JCCPN
     +,              NCCPP,NCCPD,NCCPZ,NCCPT,NCCPIF,NCCPC,NCCPN
      COMMON /IOFCOM/IOTALL,IOTOFF,IOTON,IOSPEC,IOPARF(5),IOMODE(12)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +, KADRV(9), LEXD,LEXH,LEXP,LPAM,LDECO, LADRV(14)
     +, NVOPER(6),MOPTIO(31),JANSW,JCARD,NDECKR,NVUSEB(14),MEXDEC(6)
     +, NVINC(6),NVUTY(16),NVIMAT(6),NVACT(6),NVGARB(6),NVWARN(6)
     +, NVARRQ(6),NVARR(10),IDARRV(10),NVARRI(12),NVCCP(10)
     +, NVDEP(19),MDEPAR,NVDEPL(6),  MWK(80),MWKX(80)
C--------------    END CDE                             -----------------  ------
 
 
 
      MTYP = JBYT (MCCPAR(JCCPT+1),1,30)
      CALL SBYTOR (MTYP,MOPTIO(31),1,30)                                -MSK
C     MOPTIO(31) = MOPTIO(31) .OR. MTYP                                  MSKC
      IF (JBIT(MTYP,15)   .EQ.0)   GO TO 31                             -MSK
C     IF ((MTYP.AND.16384).EQ.0)   GO TO 31                              MSKC
 
C--                CANCEL OPTION
 
      MOPTIO(31) = MOPTIO(31) - MTYP
 
C--                UNRAVEL
 
   31 IOTALL = IOTYPE (MOPTIO(31),5)
      CALL UPKBYT (MOPTIO(31),1,MOPTIO(1),30,0)
 
      DO 79  J=1,30
      IQUEST(J)= IQDOT
      IF (MOPTIO(J).NE.0)  IQUEST(J)=IQLETT(J)
   79 CONTINUE
      WRITE (IQPRNT,9079) IQUEST
      NQUSED = NQUSED + 2
      RETURN
 
 9079 FORMAT (20X,8HOPTIONS ,30A1/1X)
      END
C====================================================================
CDECK  ID>, QFATAM.
      SUBROUTINE QFATAM (NAME)
 
      COMMON       /SLATE/ MMD(10), M(30)
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
C--------------    END CDE                             -----------------  ------
      DIMENSION    NAME(9)
      DATA  INIT   /4HINIT /
 
 
      IF (NQERR.NE.0)  GO TO 19
      NQERR = NQERR+1
 
      CALL UCTOH1 (NAME,M,30)
      N =  IUFIND (IQDOT,M,1,29)
      WRITE (IQLOG,9001) (M(J),J=1,N)
 
      NQERR = 0
   19 CALL QFATAL
 
 9001 FORMAT (1H-,3(/10X,30(1H*)),24H    QFATAL REACHED FROM ,30A1)
      END
C====================================================================
CDECK  ID>, QFATAL.
      SUBROUTINE QFATAL
 
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
C--------------    END CDE                             -----------------  ------
      DATA  INIT   /4HINIT /
 
 
      IF (NQERR.NE.0)  GO TO 19
      NQERR = NQERR+1
      IF (IQTYPE.NE.0)  WRITE (IQTYPE,9009)
 9009 FORMAT (16H QFATAL REACHED.)
      CALL QABEND
 
C----              RECOVERY LOOP
 
   19 NQERR = NQERR + 1
      IF (NQERR.LT.4)  WRITE (IQLOG,9019)
      CALL ABEND
 
 9019 FORMAT (29H0STOP FOR RE-ENTRY TO QFATAL.)
      END
C====================================================================
CDECK  ID>, QPOSTM.
      SUBROUTINE QPOSTM (DUMPC)
 
C--                POST-MORTEM OF HYDRA SYSTEM
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON /SQK/   KQMAIN,KQT,KQR,KQJ,KQF,KQZ,KQH(4),KQS(8)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQT,LQR,LQJ,LQF,LQZ
     +,              LQH(4),LQS(6),   LQWM,LQWF,LQWZ,LQWSYS(6),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IVMQCM(14), IVQCN(5), DUMPC(9)
      EQUIVALENCE (IVMQCM(1),NQSYSR), (IVQCN(1),IQLS)
 
 
      WRITE (IQLOG,9010)  IVMQCM
      WRITE (IQLOG,9011)  IVMQCM
      WRITE (IQLOG,9020)
      WRITE (IQLOG,9011)  (LQ(J),J=1,70)
      WRITE (IQLOG,9021)  IQUEST
      WRITE (IQLOG,9011)  IQUEST
      WRITE (IQLOG,9025)  IVQCN
      WRITE (IQLOG,9011)  IVQCN
 
C     NO TRACE BACK NEEDED IN PRODUCTION
      IQDLUN= IQLOG
      CALL DQSNAP (6HQPOSTM,DUMPC)
 
      IF (NQERR.LT.100)  RETURN
      CALL MQEND
      CALL ABEND
 
 9010 FORMAT (84H1HYDRA SYSTEM POST-MORTEM FROM QPOSTM.      STRAIGHT DU
     FMP OF CRITICAL CONTROL AREAS./106H0COMMON /MQCM/NQSYSR,NQSYSL,NQLI
     FNK,LQWORG,LQWORK, LQTOL,LQSTA,LQEND,LQFIX,NQMAX,NQRESV,NQMEM,LQADR
     F,LQADR2 /(2X,5I21))
C9011 FORMAT (2X,5O21)                                                  OCT
 9011 FORMAT (2X,5Z21)                                                  HEX
 9020 FORMAT (22H BEGINNING OF VECTOR Q)
 9021 FORMAT (6H QUEST /(2X,5I21))
 9025 FORMAT (27H COMMON /QCN/LS,ID,NL,NS,ND/2X,I21,A21,3I21)
      END
C====================================================================
CDECK  ID>, MQINIT.
      SUBROUTINE MQINIT (LAST)
 
C-    INITIALISE MEMORY MANAGER,  USER CALLED
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON /SQK/   KQMAIN,KQT,KQR,KQJ,KQF,KQZ,KQH(4),KQS(8)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQT,LQR,LQJ,LQF,LQZ
     +,              LQH(4),LQS(6),   LQWM,LQWF,LQWZ,LQWSYS(6),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
     +,              USER(9)
C--------------    END CDE                             -----------------  ------
      DIMENSION    KVECT(9), LAST(9)
      EQUIVALENCE (KVECT(1),KQMAIN)
      DIMENSION    LETSET(3)
 
 
      DIMENSION    MCF(7), IMACH(16), IUNIT(5), ISTATB(6)
      DATA  MCF    /2,1,3,19,6,25,8/
      DATA  ISTATB /25,26,27,28,29,31/
      DATA  IMACH  /32,4,108,110,0,132,1H ,3,10,7,4,8,15,6,5,63/
      DATA  IUNIT  /2,3,4,5,6/
C
C     NQLNOR = 108 normal number of lines per page
C     NQLMAX = 110 maximum number of lines per page
C     NQLPTH = 0   number of lines taken by the page-throw
C
C     IQREAD = 2   LUN for 'CARD READER'
C     IQPRNT = 3   LUN for 'LINE PRINTER'
C     IQTTIN = 5   LUN for TERMINAL INPUT
C     IQTYPE = 6   LUN for TERMINAL OUTPUT
 
      DATA  LETSET /4HXPRN, 4HXSET, 4HSET /
      DATA  INIT   /4HINIT /
 
 
 
      CALL UCTOH1
     + (' 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/()$= ,.'
     +,            IQNUM2(1),58)
      CALL UBLOW (4H'+  , IQAPO, 2)
 
      CALL UCOPY (MCF,   NQNAME,7)
      CALL UCOPY (IMACH, NQBITW,16)
      CALL UCOPY (ISTATB,IQDROP,6)
      CALL VZERO (NQINIT,36)
 
      NQMEM = 100
      NQINIT= 1
      NQRESV= 0
      NQDCUT= 201
      NQWCUT= 500
      NQAFTB= 7
      NQNEWB= 7
 
C--                READY /QNATUR/
 
 
C--                READY COMMONS /QUNIT/ + /QHEADP/
 
      IQREAD= IUNIT(1)
      IQPRNT= IUNIT(2)
      CALL UCOPY (IUNIT(3),IQPNCH,3)
 
      JSET = IUCOMP (LAST(1),LETSET(1),3)
      IF (JSET.GE.2)  IQPRNT=IQLOG
      IQPR2 = IQPRNT
      IQLOG = IQPRNT
      CALL VFILL (IQDLUN,4,IQPRNT)
      NQUSED= 0
 
      CALL VZERO  (IQDATE,7)
      CALL VBLANK (IQHEAD,20)
      CALL DATIME (IQDATE,IQTIME)
 
 
      LQADR = LOCF (LQ(1))
      LQADR2= LQADR - 2
      NQSYSS= LOCF (LQWM) - LQADR
      NQSYSL= LOCF (USER) - LQADR
      NQMAX = LOCF (LAST) - LQADR
      NQAUGM(2) = NQMAX
      NQSYSR= NQSYSL
 
      LQEND = NQMAX
      LQFIX = LQEND
      LQSTA = LQEND
      LQTOL = LQSTA - NQMEM
      NQLINK= NQSYSL
      LQWORG= NQSYSL + 1
      LQWORK= LQWORG
 
      I = LOCF(LQMAIN) - LQADR
      N = NQSYSS - I
      DO 24 J=1,N
   24 KVECT(J)= J+I
      CALL VZERO (QUEST,50)
      CALL VZERO (Q,NQSYSL)
 
 
      QVERSN = 3.47
 
 
 
 
 
C--                TEST VALIDITY OF QFATAL
      NQINIT= 0
      RETURN
      END
C====================================================================
CDECK  ID>, MQEND.
      SUBROUTINE MQEND
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    PRV(12), MEND(3)
      EQUIVALENCE (PRV(1),QUEST(11)), (MEND(1),LQEND)
 
      CALL UCOPY (AQMEM,PRV,12)
 
      DO 17 J=1,11,3
      IF (PRV(J).GE.2.)  PRV(J+1)=PRV(J+1)/PRV(J)
   17 CONTINUE
 
      NQUSED = NQUSED + 7
      WRITE (IQLOG,9017) MEND,PRV
 9017 FORMAT (39H0MQEND.   GARBAGE COLLECTION STATISTICS,9X,18HLQEND,LQF
     FIX,NQMAX=,3I7/25X,28HTIMES     MEAN      MAX GAIN/15X,6HMQWIPE,
     F3F9.0/10X,11HMUST MQGARB,3F9.0/10X,11HFREE MQGARB,3F9.0/
     F10X,11HMEM AUGMENT,3F9.0)
 
 
      RETURN
      END
C====================================================================
CDECK  ID>, MQGARB.
      SUBROUTINE MQGARB
 
C-    GARBAGE COLLECTOR - CONTROL ROUTINE,  MAY BE USER CALLED
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
 
      IF (NQLOCK.NE.0)       GO TO 71
   11 IQTBIT= IQDROP
      IQTVAL= 0
      LQTB  = LQWORG
      LQTE  = LQEND
      IF (NQAFTB.NE.0)  LQTE=LQFIX
      IF (NQAFTB.GE.9)  LQTE=NQMAX
      CALL MQTABL
 
      IF (NQFREE.EQ.0)       GO TO 24
      J = 3
      IF (NQRESV.GE.0)  J=6
      QUEST(1)   = NQFREE
      AQMEM(J+1) = AQMEM(J+1) + 1.
      AQMEM(J+2) = AQMEM(J+2) + QUEST(1)
      AQMEM(J+3) =  MAX  (AQMEM(J+3),QUEST(1))
 
      NQRESV= NQRESV + NQFREE
      CALL MQRELC
      CALL MQMOVE
      IF (IQPART.NE.0)       GO TO 11
      NQAFTB = 0
      IF (NQRESV.LT.0)       GO TO 61
      NQM99= 0
      RETURN
 
   24 IF (NQRESV.GE.0)       RETURN
 
C---               NOT ENOUGH SPACE
 
   61 IQUEST(1)= 0
 
 
 
   71 IQUEST(2)= NQRESV
      IQUEST(3) = NQLOCK
      NQRESV= 0
      IF (NQM99.GE.2)        GO TO 97
      NQM99= NQM99 + 1
      J    = 100 - NQM99
      CALL RQTELL (J,1)
 
C----              FATAL EXIT
 
   97 CONTINUE
      CALL QFATAL
      END
C====================================================================
CDECK  ID>, MQMOVE.
      SUBROUTINE MQMOVE
 
C-    GARBAGE COLLECTOR - MEMORY MOVE
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
C----              MOVE LOW BANKS
 
      IF (LQMTB.EQ.LQMTH)  GO TO 21
      LQWORK= LQ(LQMTH-1) + LQ(LQMTH-2)
      JTB = LQMTB
      JEND= LQMTH
      NSTP= 3
      GO TO 41
 
C----              MOVE HIGH BANKS
 
   19 LQSTA= LQ(LQMTH)
      GO TO 51
 
   21 LQWORK= LQ(LQMTB-2)
   24 IF (LQMTE.LT.LQMTH)  GO TO 19
      JTB = LQMTE
      JEND= LQMTH-3
      NSTP= -3
 
   41 LOLD = LQ(JTB)
      LNEW = LQ(JTB+2) + LOLD
      N    = LQ(JTB+1) - LOLD
      CALL UCOPY2 (LQ(LOLD),LQ(LNEW),N)
      JTB = JTB + NSTP
      IF (JTB.NE.JEND)  GO TO 41
 
      IF (JEND.EQ.LQMTH)  GO TO 24
      LQSTA= LNEW
   51 LQTOL= LQSTA - NQMEM
 
C----              RELOCATE  LQEND, LQFIX
 
      IFL= 7
      L  = LQEND
   52 LN = LQ(LQMTE+3)
      IF (L.GE.LN)           RETURN
      IF (LQMTE.LT.LQMTH)    GO TO 58
 
      DO 55 JTB=LQMTH,LQMTE,3
      IF (L.LT.LQ(JTB+1))    GO TO 56
   55 CONTINUE
      GO TO 58
 
   56 LN =  MAX (L,LQ(JTB))   + LQ(JTB+2)
   58 IF (IFL.EQ.0)          GO TO 59
      LQEND= LN
      L    = LQFIX
      IFL  = 0
      GO TO 52
 
   59 LQFIX= LN
      RETURN
      END
C====================================================================
CDECK  ID>, MQRELC.
      SUBROUTINE MQRELC
 
C-    GARBAGE COLLECTOR - RELOCATOR
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      EQUIVALENCE (LS,IQLS), (LSSV,QUEST(21))
 
 
 
      LSTOP = LQ(LQMTE+4)
      LFIX  = LQ(LQTE+3)
      IFLBR = LQ(LQTB-1)
      LKEEP = LQ(LQTB-2)
      NENTR = (LQTE-LQTB) / 3
      IF (LQ(LQMTB-3).NE.0)  GO TO 14
      LMTB = LQMTB
      IF (NENTR)             52,42,22
 
C--------------    TRIGGER STRUCTURAL LOW-END LINKS
 
   14 L1   = 0
      L2   = 0
      LN   = 0
      LDEAD= 0
      LS   = NQSYSS + 1
      GO TO 19
 
C--                TRIGGER REF + STRUCTURAL PERMANENT LINKS
   16 L1   = L1 - 1
      IF (L1.EQ.NQSYSL)      GO TO 17
      IF (NQSYSR.EQ.NQSYSL)  GO TO 17
      L2   = NQSYSR + 1
      LS   = NQSYSL + 1
      GO TO 19
C--                TRIGGER WORKING SPACE LINKS
   17 LS   = NQLINK + 1
      L2   = LS
      LMTB = LQMTB-3
      LN   = LQ(LMTB)
      LDEAD= LQ(LMTB+1)
   19 IF (NENTR)             54,44,24
 
C--------------    2 OR MORE RELOCATION INTERVALS       -------------
 
C------            NEXT BANK,  CHECK IF DEAD GROUP
 
   21 IF (LN.GE.LSTOP)  RETURN
      IF (LN.NE.LDEAD)  GO TO 23
      IF (LN.EQ.0)      GO TO 16
      LMTB = LMTB + 3
   22 LN   = LQ(LMTB)
      LDEAD= LQ(LMTB+1)
      GO TO 21
 
C--                NEXT BANK,  ALIVE
 
   23 CALL QBLOW (LN)
      L2 = LS - IQNS
      L1 = LN +        NQNAMD
      LN = LS + IQND + 1
 
C----              NEXT LINK
 
   24 L1 = L1 + 1
      IF (L1.EQ.LS)  GO TO 21
      LFIRST= LQ(L1)
   25 LINK  = LQ(L1)
      IF (LINK.GE.LFIX  ) GO TO 24
      IF (LINK.LT.LKEEP ) GO TO 24
 
      IF (LINK.LT.LQ(LQTB))  GO TO 31
      JLOW = 0
      JHI  = NENTR + 1
 
C--                BINARY SEARCH IN RELOCATOR TABLE
 
   27 JEX = (JHI+JLOW) / 2
      IF (JEX.EQ.JLOW)             GO TO 29
      IF (LINK.GE.LQ(LQTB+3*JEX))  GO TO 28
      JHI  = JEX
      GO TO 27
 
   28 JLOW = JEX
      GO TO 27
 
   29 JTB = LQTB + 3*JLOW
      IF (LINK.GE.LQ(JTB+1))     GO TO 31
      LQ(L1) = LINK + LQ(JTB+2)
      GO TO 24
 
C--                BRIDGING FOR DEAD, STRUCTURAL LINK
   31 IF (L1.LT.L2)       GO TO 38
      IF (IFLBR.EQ.0)     GO TO 38
      IF (JBYT(LQ(LINK),IQSTRU,NQSTRU).EQ.0)  GO TO 38
      LQ(L1)= LQ(LINK-1)
      IF (LQ(L1).NE.LFIRST) GO TO 25
 
   38 LQ(L1)= 0
      GO TO 24
 
C--------------    1 RELOCATION INTERVAL ONLY           -------------
 
C------            NEXT BANK,  CHECK IF DEAD GROUP
 
   41 IF (LN.GE.LSTOP)       RETURN
      IF (LN.NE.LDEAD)       GO TO 43
      IF (LN.EQ.0)           GO TO 16
      LMTB = LMTB + 3
   42 LN   = LQ(LMTB)
      LDEAD= LQ(LMTB+1)
      GO TO 41
 
C--                NEXT BANK,  ALIVE
 
   43 CALL QBLOW (LN)
      L2 = LS - IQNS
      L1 = LN +        NQNAMD
      LN = LS + IQND + 1
 
C----              NEXT LINK
 
   44 L1 = L1 + 1
      IF (L1.EQ.LS)          GO TO 41
      LFIRST= LQ(L1)
   45 LINK  = LQ(L1)
      IF (LINK.GE.LFIX  )    GO TO 44
      IF (LINK.LT.LKEEP )    GO TO 44
 
      IF (LINK.LT.LQ(LQTB))      GO TO 47
      IF (LINK.GE.LQ(LQTB+1))    GO TO 47
      LQ(L1) = LINK + LQ(LQTB+2)
      GO TO 44
 
C--                BRIDGING FOR DEAD, STRUCTURAL LINK
   47 IF (L1.LT.L2)          GO TO 48
      IF (IFLBR.EQ.0)        GO TO 48
      IF (JBYT(LQ(LINK),IQSTRU,NQSTRU).EQ.0)  GO TO 48
      LQ(L1)= LQ(LINK-1)
      IF (LQ(L1).NE.LFIRST)  GO TO 45
 
   48 LQ(L1)= 0
      GO TO 44
 
C--------------    NO RELOCATION INTERVAL               ----------------
 
C------            NEXT BANK,  CHECK IF DEAD GROUP
 
   51 IF (LN.GE.LSTOP)  RETURN
      IF (LN.NE.LDEAD)  GO TO 53
      IF (LN.EQ.0)      GO TO 16
      LMTB = LMTB + 3
   52 LN   = LQ(LMTB)
      LDEAD= LQ(LMTB+1)
      GO TO 51
 
C--                NEXT BANK,  ALIVE
 
   53 CALL QBLOW (LN)
      L2 = LS - IQNS
      L1 = LN +        NQNAMD
      LN = LS + IQND + 1
 
C----              NEXT LINK
 
   54 L1 = L1 + 1
      IF (L1.EQ.LS)  GO TO 51
   55 LINK= LQ(L1)
      IF (LINK.GE.LFIX)  GO TO 54
      IF (LINK.LT.LKEEP) GO TO 54
      IF (L1.LT.L2)      GO TO 58
      IF (IFLBR.EQ.0)    GO TO 58
      IF (JBYT(LQ(LINK),IQSTRU,NQSTRU).EQ.0)  GO TO 58
 
C--                BRIDGING FOR DEAD, STRUCTURAL LINK
      LFIRST= LINK
   57 LINK  = LQ(LINK-1)
      IF (LINK.GE.LFIX  ) GO TO 59
      IF (LINK.LT.LKEEP)  GO TO 59
      IF (LINK.NE.LFIRST) GO TO 57
 
   58 LQ(L1)= 0
      GO TO 54
 
   59 LQ(L1)= LINK
      GO TO 54
 
C----              FATAL EXIT
      END
C====================================================================
CDECK  ID>, MQTABL.
      SUBROUTINE MQTABL
 
C-    GARBAGE COLLECTOR - RELOCATION TABLE BUILDING
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IVMQCM(10)
      EQUIVALENCE (IVMQCM(1),NQSYSR)
      EQUIVALENCE (LS,IQLS)
 
 
 
      LGO   = LQTB
      LHALT = LQTE
      LQTA  = LQWORK
      LQTB  = LQTA + 3
      NQFREE= 0
      IQPART= 0
 
C--                BUILD TABLE FOR LOW BANKS
 
      IF (LQWORG.EQ.LQWORK)  GO TO 12
      IF    (LGO.GE.LQWORK)  GO TO 12
      LQTE = LQTA
      LN   = LQWORG
      LSTOP= LQWORK
      MODE = IQTVAL
      LIMIT= LQSTA - 8
      GO TO 24
 
C--                BUILD TABLE FOR HIGH BANKS
 
   12 LQ(LQTA+1)= LQWORK
      LQTE = LQTB
   14 LQMTH= LQTE
      LN   = LQSTA
      LSTOP= LHALT
      MODE = 1-IQTVAL
      NEW  = MODE
      LIMIT= LQSTA - 5
      IF (LHALT.GE.LQSTA)    GO TO 24
      LQ(LQTE)= LQSTA
      LQTE = LQTE - 3
      GO TO 71
 
C------            NEXT BANK
 
   21 MODE= NEW
   22 LN  = LS + IQND + 1
   24 IF (LN.GE.LSTOP)  GO TO 39
      CALL QBLOW (LN)
      NEW = JBIT (IQ(LS),IQTBIT)
      IF (NEW.EQ.MODE)    GO TO 22
      IF (NEW.EQ.IQTVAL)  GO TO 36
 
C--                START OF A DEAD GROUP
      LQ(LQTE+1)= LN
      LQTE= LQTE + 3
      GO TO 21
 
C--                START OF A LIVE GROUP
   36 LQ(LQTE)= LN
      IF (LQTE.LT.LIMIT)  GO TO 21
      IQPART= 1
 
C------            END OF TABLE, LOW OR HIGH
C--                COMPUTE RELOCATION CONSTANTS, LOW BANKS
 
   39 IF (LSTOP.NE.LQWORK)  GO TO 61
      IF  (LQTE.EQ.LQTA)    GO TO 12
      IF   (NEW.NE.IQTVAL)  GO TO 42
      LQ(LQTE+1)= LQWORK
      LQTE = LQTE + 3
   42 LQ(LQTE)= LQWORK
      DO 44 JTB=LQTB,LQTE,3
      NQFREE= NQFREE + LQ(JTB) - LQ(JTB-2)
   44 LQ(JTB+2)= -NQFREE
      GO TO 14
 
C--                COMPUTE RELOCATION CONSTANTS, HIGH BANKS
 
   61 IF (NEW.NE.IQTVAL)  LQ(LQTE)=LSTOP
      LQTE= LQTE-3
      NF  = 0
      IF (LQTE.LT.LQMTH)  GO TO 65
      JTB= LQTE
 
      DO 64 J= LQMTH,LQTE,3
      NF = NF + LQ(JTB+3) - LQ(JTB+1)
      LQ(JTB+2)= NF
   64 JTB   = JTB - 3
   65 NQFREE= NQFREE + NF + LQ(LQMTH)-LQSTA
 
   71 LQ(LQTA)  = LQWORG
      LQ(LQTA+2)= 3
      LQ(LQTE+4)=  MAX (LQFIX,LSTOP)
      LQMTB= LQTB
      LQMTE= LQTE
      RETURN
 
C----              FATAL EXIT
      END
C====================================================================
CDECK  ID>, QSORTH.
      SUBROUTINE QSORTH (JWORD,KGOP)
 
C-    SORT BANKS AT KGO FOR WORDS IQ(L+JWORD) TO BE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    JWORD(9), KGOP(9)
 
 
      JW  = JWORD(1)
      KGO = KGOP(1)
      LL  = LQ(KGO)
      IF (LL.EQ.0)           RETURN
 
   11 LN = LQ(LL-1)
      IF (LN.EQ.0)           RETURN
      IF (IUCOMH(IQ(LN+JW),IQ(LL+JW),4).LT.0)   GO TO 21
      LL = LN
      GO TO 11
 
C--                BANK  LN  OUT OF SEQUENCE
 
   21 LQ(LL-1)= LQ(LN-1)
      K = KGO
 
   24 L = LQ(K)
      IF (IUCOMH(IQ(LN+JW),IQ(L+JW),4).LT.0)   GO TO 29
      K = L-1
      GO TO 24
 
C--                PLACE FOR BANK  LN  FOUND
 
   29 LQ(LN-1)= L
      LQ(K)   = LN
      GO TO 11
      END
C====================================================================
CDECK  ID>, QSORVH.
      SUBROUTINE QSORVH (JWORD,NWORDS,KGOP)
 
C-    SORT BANKS AT KGO SUCH THAT THE 'NWORDS' LONG KEY STRINGS
C-    STARTING AT Q(L+JWORD) ARE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    JWORD(9), NWORDS(9), KGOP(9)
 
 
      JW  = JWORD(1)
      NCH = 4*NWORDS(1)
      KGO = KGOP(1)
      LL  = LQ(KGO)
      IF (LL.EQ.0)           RETURN
 
   11 LN = LQ(LL-1)
      IF (LN.EQ.0)           RETURN
      IF (IUCOMH(IQ(LN+JW),IQ(LL+JW),NCH).LT.0)   GO TO 21
      LL = LN
      GO TO 11
 
C--                BANK  LN  OUT OF SEQUENCE
 
   21 LQ(LL-1)= LQ(LN-1)
      K = KGO
 
   24 L = LQ(K)
      IF (IUCOMH(IQ(LN+JW),IQ(L+JW),NCH).LT.0)   GO TO 29
      K = L-1
      GO TO 24
 
C--                PLACE FOR BANK  LN  FOUND
 
   29 LQ(LN-1)= L
      LQ(K)   = LN
      GO TO 11
      END
C====================================================================
CDECK  ID>, IQBCD.
      FUNCTION IQBCD (CHAR)
 
      COMMON /QBCD/  IQNUM2(11),IQLETT(26),IQNUM(10),IQPLUS
     +,              IQMINS,IQSTAR,IQSLAS,IQOPEN,IQCLOS,IQDOLL,IQEQU
     +,              IQBLAN,IQCOMA,IQDOT,IQAPO,  IQCROS
C--------------    END CDE                             -----------------  ------
      DIMENSION    CHAR(9)
 
 
      IQBCD = IUFIND (CHAR(1),IQLETT(1),1,48)
      RETURN
      END
C====================================================================
CDECK  ID>, IQLOCF.
      FUNCTION IQLOCF (VAR)
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    VAR(9)
 
 
      IQLOCF= LOCF(VAR(2)) - LQADR
      RETURN
      END
C====================================================================
CDECK  ID>, KQLAST.
      FUNCTION KQLAST (KGO)
 
C--   FIND THE END OF A LINEAR STRUCTURE ATTACHED TO  LQ(KGO)
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
      L = KGO + 1
    9 K = L-1
      L = LQ(K)
      IF (L.NE.0)  GO TO 9
      KQLAST= K
      RETURN
      END
C====================================================================
CDECK  ID>, LQFIND.
      FUNCTION LQFIND (ITEXT,JWORD,KSTART,KFOUND)
 
C-    FIND BANK CONTAINING ITEXT IN WORD JWORD
C-    SEARCH LINEAR STRUCTURE ATTACHED AT LQ(KSTART)
C-    RETURN BANK-ADR AS VALUE, ITS K-ADR IN KFOUND
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
      L = KSTART + 1
    9 K = L-1
      L = LQ(K)
      IF (L.EQ.0)                GO TO 29
      IF (IQ(L+JWORD).NE.ITEXT)  GO TO 9
   29 KFOUND= K
      LQFIND= L
      RETURN
      END
C====================================================================
CDECK  ID>, LQLONG.
      FUNCTION LQLONG (NTEXT,ITEXT,JWORD,KSTART,KFOUND)
 
C-    FIND BANK CONTANING ITEXT(1-NTEXT) IN WORDS JWORD,..,JWORD+NTEXT-1
C-    SEARCH LINEAR STRUCTURE ATTACHED AT LQ(KSTART)
C-    RETURN BANK-ADR AS VALUE, ITS K-ADR IN KFOUND
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    ITEXT(9)
 
      N2= NTEXT  - 2
      L = KSTART + 1
    9 K = L-1
      L = LQ(K)
      IF (L.EQ.0)                   GO TO 29
      IF (IQ(L+JWORD).NE.ITEXT(1))  GO TO 9
      IF  (N2)     29,24,14
 
   14 LB = L + JWORD - 1
      DO 16 J=2,NTEXT
      IF (IQ(LB+J).NE.ITEXT(J))     GO TO 9
   16 CONTINUE
      GO TO 29
 
   24 IF (IQ(L+JWORD+1).NE.ITEXT(2))  GO TO 9
   29 KFOUND= K
      LQLONG= L
      RETURN
      END
C====================================================================
CDECK  ID>, LQLOCF.
      FUNCTION LQLOCF (VAR)
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             --------------
      DIMENSION    VAR(9)
 
 
      LQLOCF= LOCF(VAR(2)) - LQADR
      RETURN
      END
C====================================================================
CDECK  ID>, QPAGE.
      SUBROUTINE QPAGE (LUN,LINES,JAUTO)
 
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      COMMON /QUNIT/ IQREAD,IQPRNT,IQPR2,IQLOG,IQPNCH,IQTTIN,IQTYPE
     +,              IQDLUN,IQFLUN,IQHLUN,IQCLUN,  NQUSED
      COMMON /QHEADP/IQHEAD(20),IQDATE,IQTIME,IQPAGE,NQPAGE(4)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    LUNS(3)
      EQUIVALENCE (LUNS(1),IQPRNT)
      INTEGER      HEADER(23)
      EQUIVALENCE (HEADER(1),IQHEAD(1))
 
 
      IF (LINES.LT.0)  GO TO 11
      IQUEST(1)= 0
    7 IF (NQUSED.LE.NQLMAX)  GO TO 8
      NQUSED= NQUSED - NQLMAX
      GO TO 7
    8 IF (NQUSED+LINES.LE.NQLNOR)  RETURN
 
   11 IQUEST(1)= 1
      JLUN  = IUCOMP (LUN,LUNS,3) + 1
      IQPAGE= NQPAGE(JLUN) + 1
      NQPAGE(JLUN)= IQPAGE
 
      NQUSED= NQLPTH + 1
      WRITE (LUN,9000) HEADER
 9000 FORMAT (1H1,20A4,28X,I6,1H/,I4,6H  PAGE,I5)
      RETURN
      END
C====================================================================
CDECK  ID>, QSHUNT.
      SUBROUTINE QSHUNT (KOLD,NOLD,KNEW,NNEW)
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
      K  = KOLD + NOLD
      KN = KNEW + NNEW
      L  = LQ(K)
      IF (L.EQ.0)            RETURN
      LQ(K)  = LQ(L-1)
      LQ(L-1)= LQ(KN)
      LQ(KN) = L
      RETURN
      END
C====================================================================
CDECK  ID>, QSORT.
      SUBROUTINE QSORT (JWORD,KGO)
 
C-    SORT BANKS AT KGO FOR WORDS Q(L+JWORD) TO BE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
      LL = LQ(KGO)
      IF (LL.EQ.0)           RETURN
      JW = JWORD
 
   11 LN = LQ(LL-1)
      IF (LN.EQ.0)           RETURN
      IF  (Q(LN+JW).LT. Q(LL+JW))  GO TO 21
      LL = LN
      GO TO 11
 
C--                BANK  LN  OUT OF SEQUENCE
 
   21 LQ(LL-1)= LQ(LN-1)
      K = KGO
 
   24 L = LQ(K)
      IF  (Q(LN+JW).LT. Q(L+JW))  GO TO 29
      K = L-1
      GO TO 24
 
C--                PLACE FOR BANK  LN  FOUND
 
   29 LQ(LN-1)= L
      LQ(K)   = LN
      GO TO 11
      END
C====================================================================
CDECK  ID>, QSORTI.
      SUBROUTINE QSORTI (JWORD,KGO)
 
C-    SORT BANKS AT KGO FOR WORDS IQ(L+JWORD) TO BE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
      LL = LQ(KGO)
      IF (LL.EQ.0)           RETURN
      JW = JWORD
 
   11 LN = LQ(LL-1)
      IF (LN.EQ.0)           RETURN
      IF (IQ(LN+JW).LT.IQ(LL+JW))  GO TO 21
      LL = LN
      GO TO 11
 
C--                BANK  LN  OUT OF SEQUENCE
 
   21 LQ(LL-1)= LQ(LN-1)
      K = KGO
 
   24 L = LQ(K)
      IF (IQ(LN+JW).LT.IQ(L+JW))  GO TO 29
      K = L-1
      GO TO 24
 
C--                PLACE FOR BANK  LN  FOUND
 
   29 LQ(LN-1)= L
      LQ(K)   = LN
      GO TO 11
      END
C====================================================================
CDECK  ID>, QSORV.
      SUBROUTINE QSORV (JWORD,NWORDS,KGOP)
 
C-    SORT BANKS AT KGO SUCH THAT THE 'NWORDS' LONG KEY STRINGS
C-    STARTING AT Q(L+JWORD) ARE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON /SQK/   KQMAIN,KQT,KQR,KQJ,KQF,KQZ,KQH(4),KQS(8)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQT,LQR,LQJ,LQF,LQZ
     +,              LQH(4),LQS(6),   LQWM,LQWF,LQWZ,LQWSYS(6),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    JWORD(9), NWORDS(9), KGOP(9)
 
      REAL         KEYN, KEYPL, KEYNG, KN, KC
 
 
      JW    = JWORD(1)
      JWN   = JW-1 + NWORDS(1)
      KGOPL = KGOP(1) + 1
      LN    = KGOPL
      KEYN  = -1.
      KEYNG = 0 .
      KGONG = LQLOCF(LQWM) + 1
      LLNG  = KGONG
      GO TO 23
 
C--------          +VE IN-SEQUENCE LOOP FOR BANKS WITH +VE KEY
C--                          KEEP GOING FOR INCREASING KEYS
 
   21 LQ(LLPL-1) = LN
      GO TO 24
 
   23 KEYPL = KEYN
      LLPL  = LN
      LN    = LQ(LN-1)
      IF (LN.EQ.0)           GO TO 81
      KEYN  =  Q(LN+JW)
      IF (KEYN.LT.0.)        GO TO 61
   24 IF (KEYN-KEYPL)        28,25,23
 
   25 JSW = 7
      LC  = LLPL
      GO TO 71
   28 LS = KGOPL
 
C--------          OUT-SEQUENCE LOOP, FIND PLACE FOR BANK IN THE CHAIN
C--                          OF BANKS ALREADY SORTED, +VE OR -VE CHAIN
 
   41 LNX = LQ(LN-1)
   43 KS  = LS
      LS  = LQ(LS-1)
      IF (KEYN- Q(LS+JW))    48,45,43
 
   45 JSW = 0
      LC  = LS
      GO TO 71
   48 LQ(LN-1) = LS
      LQ(KS-1) = LN
 
      IF (LNX.EQ.0)          GO TO 81
      LN   = LNX
      KEYN =  Q(LN+JW)
      IF (KEYN.GE.0.)        GO TO 21
 
C--------          -VE IN-SEQUENCE LOOP FOR BANKS WITH -VE KEY
C--                          KEEP GOING FOR INCREASING KEYS
 
   61 LS = KGONG
      LQ(LLNG-1) = LN
      IF (KEYNG.NE.0.)       GO TO 64
 
   63 KEYNG = KEYN
      LLNG  = LN
      LN    = LQ(LN-1)
      IF (LN.EQ.0)           GO TO 81
      KEYN  =  Q(LN+JW)
      IF (KEYN.GE.0.)        GO TO 21
   64 IF (KEYN-KEYNG)        41,65,63
 
   65 JSW = -7
      LC  = LLNG
      GO TO 71
 
C--------          COMPARE 2 STRINGS STARTING WITH THE SAME WORD
 
   71 J   = JW
   72 J   = J+1
      KC  =  Q(LC+J)
      KN  =  Q(LN+J)
 
C--                  KN < KC
      IF (KN.GE.0.)          GO TO 74
      IF (KC.GE.0.)          GO TO 79
      GO TO 75
 
C--                  KN > KC
   74 IF (KC.LT.0.)          GO TO 78
 
   75 IF   (KN-KC)           79, 76, 78
   76 IF (J.LT.JWN)          GO TO 72
 
C--                KEYS/N .GE. KEYS/C
 
   78 IF   (JSW)             63, 43, 23
 
C--                KEYS/N .LT. KEYS/C
 
   79 IF   (JSW)             41, 48, 28
 
C----              FINISHED, LINK +VE AND -VE STREAMS
 
   81 LQ(LLPL-1) = 0
      LQ(LLNG-1) = LQ(KGOPL-1)
      LQ(KGOPL-1)= LQ(KGONG-1)
      RETURN
      END
C====================================================================
CDECK  ID>, QSORVI.
      SUBROUTINE QSORVI (JWORD,NWORDS,KGOP)
 
C-    SORT BANKS AT KGO SUCH THAT THE 'NWORDS' LONG KEY STRINGS
C-    STARTING AT Q(L+JWORD) ARE IN INCREASING ORDER
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON /SQK/   KQMAIN,KQT,KQR,KQJ,KQF,KQZ,KQH(4),KQS(8)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQT,LQR,LQJ,LQF,LQZ
     +,              LQH(4),LQS(6),   LQWM,LQWF,LQWZ,LQWSYS(6),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    JWORD(9), NWORDS(9), KGOP(9)
 
 
      JW    = JWORD(1)
      JWN   = JW-1 + NWORDS(1)
      KGOPL = KGOP(1) + 1
      LN    = KGOPL
      KEYN  = -1
      KEYNG = 0
      KGONG = LQLOCF(LQWM) + 1
      LLNG  = KGONG
      GO TO 23
 
C--------          +VE IN-SEQUENCE LOOP FOR BANKS WITH +VE KEY
C--                          KEEP GOING FOR INCREASING KEYS
 
   21 LQ(LLPL-1) = LN
      GO TO 24
 
   23 KEYPL = KEYN
      LLPL  = LN
      LN    = LQ(LN-1)
      IF (LN.EQ.0)           GO TO 81
      KEYN  = IQ(LN+JW)
      IF (KEYN.LT.0)         GO TO 61
   24 IF (KEYN-KEYPL)        28,25,23
 
   25 JSW = 7
      LC  = LLPL
      GO TO 71
   28 LS = KGOPL
 
C--------          OUT-SEQUENCE LOOP, FIND PLACE FOR BANK IN THE CHAIN
C--                          OF BANKS ALREADY SORTED, +VE OR -VE CHAIN
 
   41 LNX = LQ(LN-1)
   43 KS  = LS
      LS  = LQ(LS-1)
      IF (KEYN-IQ(LS+JW))    48,45,43
 
   45 JSW = 0
      LC  = LS
      GO TO 71
   48 LQ(LN-1) = LS
      LQ(KS-1) = LN
 
      IF (LNX.EQ.0)          GO TO 81
      LN   = LNX
      KEYN = IQ(LN+JW)
      IF (KEYN.GE.0)         GO TO 21
 
C--------          -VE IN-SEQUENCE LOOP FOR BANKS WITH -VE KEY
C--                          KEEP GOING FOR INCREASING KEYS
 
   61 LS = KGONG
      LQ(LLNG-1) = LN
      IF (KEYNG.NE.0)        GO TO 64
 
   63 KEYNG = KEYN
      LLNG  = LN
      LN    = LQ(LN-1)
      IF (LN.EQ.0)           GO TO 81
      KEYN  = IQ(LN+JW)
      IF (KEYN.GE.0)         GO TO 21
   64 IF (KEYN-KEYNG)        41,65,63
 
   65 JSW = -7
      LC  = LLNG
      GO TO 71
 
C--------          COMPARE 2 STRINGS STARTING WITH THE SAME WORD
 
   71 J   = JW
   72 J   = J+1
      KC  = IQ(LC+J)
      KN  = IQ(LN+J)
 
C--                  KN < KC
      IF (KN.GE.0)           GO TO 74
      IF (KC.GE.0)           GO TO 79
      GO TO 75
 
C--                  KN > KC
   74 IF (KC.LT.0)           GO TO 78
 
   75 IF   (KN-KC)           79, 76, 78
   76 IF (J.LT.JWN)          GO TO 72
 
C--                KEYS/N .GE. KEYS/C
 
   78 IF   (JSW)             63, 43, 23
 
C--                KEYS/N .LT. KEYS/C
 
   79 IF   (JSW)             41, 48, 28
 
C----              FINISHED, LINK +VE AND -VE STREAMS
 
   81 LQ(LLPL-1) = 0
      LQ(LLNG-1) = LQ(KGOPL-1)
      LQ(KGOPL-1)= LQ(KGONG-1)
      RETURN
      END
C====================================================================
CDECK  ID>, QTOPSY.
      SUBROUTINE QTOPSY (KGO)
 
C-    INVERT ORDER OF BANKS IN A LINEAR STUCTURE
 
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
      LN = LQ(KGO)
      L  = 0
   11 IF (LN.EQ.0)           GO TO 21
      LL = L
      L  = LN
      LN = LQ(L-1)
      LQ(L-1)= LL
      GO TO 11
 
   21 LQ(KGO)= L
      RETURN
      END
C====================================================================
CDECK  ID>, QTOUCH.
      SUBROUTINE QTOUCH (KBIT,LARG,OPTION)
 
C-    MARK DATA-STRUCTURE,  USER CALLED
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    KBIT(9),LARG(9),OPTION(9)
      EQUIVALENCE (JSTART,LQTA)
      EQUIVALENCE (JHORIZ,LQTB)
      EQUIVALENCE (JMINUS,LQTE)
 
 
 
      IQTBIT= KBIT(1)
      LCUR  = LARG(1)
      IF (LCUR.EQ.0)     RETURN
 
      CALL UOPT (OPTION,3HZSH,IQTVAL,3)
      IQTVAL= 1 - IQTVAL
C     IF (IQTVAL.EQ.0)  IQTVAL=0                                         UNI
      LOLD  = 0
      L     = LCUR - 2 + JHORIZ
      LAST  = LCUR - JBYT (IQ(LCUR),IQSTRU,NQSTRU)
 
C------            LOOK AT NEXT LINK
 
   44 IF (L.LT.LAST)  GO TO 51
      LNEW= LQ(L)
      L   = L-1
      IF (LNEW.EQ.0)  GO TO 44
 
      IQNS = JBYT (IQ(LNEW),IQSTRU,NQSTRU)
      IF (IQNS.EQ.0)                   GO TO 53
      IF (JBYT(IQ(LNEW-1),25,8).NE.0)  GO TO 44
      IF (LNEW.EQ.LCUR)                GO TO 44
 
C--                NEW BANK LNEW REACHED, PUSH DOWN
 
      LQ(L+1)= LOLD
      CALL SBYT (LCUR-L,IQ(LCUR-1),25,8)
      LOLD= LCUR
      LCUR= LNEW
      L   = LCUR - 1
      LAST= LCUR - IQNS
      GO TO 44
 
C----              BANK LCUR HAS NO FURTHER SECONDARIES, POP UP
 
   51 IF (LOLD.EQ.0)  GO TO 81
      LNEW= LCUR
      LCUR= LOLD
      L   = LCUR - JRSBYT (0,IQ(LCUR-1),25,8)
      LOLD= LQ(L+1)
      LQ(L+1)= LNEW
      LAST= LCUR - JBYT (IQ(LCUR),IQSTRU,NQSTRU)
 
C--                BANK  LNEW  TO BE MARKED
 
   53 CALL SBIT (IQTVAL,IQ(LNEW),IQTBIT)
      GO TO 44
 
 
C----              FINISHED, MARK THE START BANK
 
   81 CONTINUE
      IF (JSTART.NE.0)  CALL SBIT (IQTVAL,IQ(LCUR),IQTBIT)
      RETURN
      END
C====================================================================
CDECK  ID>, QTCHID.
      SUBROUTINE QTCHID (KBIT,LARG,OPTION,IDS)
 
C-    MARK DATA-STRUCTURE,  USER CALLED
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /MQCT/  IQTBIT,IQTVAL,LQTA,LQTB,LQTE,LQMTB,LQMTE,LQMTH
     +,              IQPART,NQFREE
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    KBIT(9),LARG(9),OPTION(9),IDS(9)
      EQUIVALENCE (JSTART,LQTA)
      EQUIVALENCE (JHORIZ,LQTB)
      EQUIVALENCE (JMINUS,LQTE)
 
 
 
      IQTBIT= KBIT(1)
      LCUR  = LARG(1)
      IF (LCUR.EQ.0)     RETURN
 
      NIDS  = IDS(1)
      CALL UOPT (OPTION,4HZSH-,IQTVAL,4)
      IQTVAL= 1 - IQTVAL
C     IF (IQTVAL.EQ.0)  IQTVAL=0                                         UNI
      LOLD  = 0
      L     = LCUR - 2 + JHORIZ
      LAST  = LCUR - JBYT (IQ(LCUR),IQSTRU,NQSTRU)
 
C------            LOOK AT NEXT LINK
 
   44 IF (L.LT.LAST)  GO TO 51
      LNEW= LQ(L)
      L   = L-1
      IF (LNEW.EQ.0)  GO TO 44
 
      IQNS = JBYT (IQ(LNEW),IQSTRU,NQSTRU)
      IF (IQNS.EQ.0)                   GO TO 53
      IF (JBYT(IQ(LNEW-1),25,8).NE.0)  GO TO 44
      IF (LNEW.EQ.LCUR)                GO TO 44
 
C--                NEW BANK LNEW REACHED, PUSH DOWN
 
      LQ(L+1)= LOLD
      CALL SBYT (LCUR-L,IQ(LCUR-1),25,8)
      LOLD= LCUR
      LCUR= LNEW
      L   = LCUR - 1
      LAST= LCUR - IQNS
      GO TO 44
 
C----              BANK LCUR HAS NO FURTHER SECONDARIES, POP UP
 
   51 IF (LOLD.EQ.0)  GO TO 81
      LNEW= LCUR
      LCUR= LOLD
      L   = LCUR - JRSBYT (0,IQ(LCUR-1),25,8)
      LOLD= LQ(L+1)
      LQ(L+1)= LNEW
      LAST= LCUR - JBYT (IQ(LCUR),IQSTRU,NQSTRU)
 
C--                BANK  LNEW  TO BE MARKED
 
   53 CALL QNAME (LNEW,IQID)
      N   =  MIN (1,IUCOMP(IQID,IDS(2),NIDS))
      IF (JMINUS-N.EQ.0)  GO TO 44
      CALL SBIT (IQTVAL,IQ(LNEW),IQTBIT)
      GO TO 44
 
 
C----              FINISHED, MARK THE START BANK
 
   81 CONTINUE
      IF (JSTART.NE.0)  CALL SBIT (IQTVAL,IQ(LCUR),IQTBIT)
      RETURN
      END
C====================================================================
CDECK  ID>, QVERIF.
      FUNCTION QVERIF (LPARA,MODEP)
 
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      COMMON /QSTATE/QVERSN,NQINIT,NQSTAG(2),NQPHAS,NQERR,QDEBUG,NQDCUT
     +,              NQNEWB,NQAFTB,NQM99,NQLOWB,NQWCUT,NQLOCK,QSTDUM
     +,              NQAUGM(2),NQZIP(8),AQMEM(12)
                         INTEGER QDEBUG
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    IVMQCM(10)
      EQUIVALENCE (IVMQCM(1),NQSYSR)
 
 
 
C--                VERIFY MONOTONY OF STORAGE PARAMETERS
 
      LSTOP= LPARA
      MODE = MODEP
      IF (JBIT(MODE,4).EQ.0)  GO TO 21
      LA = NQSYSS
      DO 16 J=1,10
      LN = IVMQCM(J)
      IF (LN.LT.LA)          GO TO 91
   16 LA = LN
 
C----              TRIGGER LOW BANKS
 
   21 IF (JBIT(MODE,3).EQ.0)   GO TO 22
      LN  = LQWORG
      LEND= LQWORK
      IF (JBIT(MODE,1).EQ.0)   GO TO 34
      LA = 1
      LE = NQSYSS + 1
      GO TO 43
 
C----              TRIGGER HIGH BANKS
 
   22 IF (JBIT(MODE,1).EQ.0)   GO TO 25
      LN  = 0
      LEND= 0
      LA  = 1
      LE  = NQSYSS + 1
      GO TO 43
 
   24 IF (LEND.EQ.LSTOP)       GO TO 88
   25 IF (JBIT(MODE,2).EQ.0)   GO TO 88
      LN  = LQSTA
      LEND= LSTOP
      IF (JBIT(MODE,1).NE.0)   GO TO 41
 
C------            LOOP FOR BANK CHAINIG CLOB. CHECK ONLY
 
   34 IF (LN.GE.LEND)        GO TO 24
      CALL QBLOWX (LN)
      IF (IQFOUL.NE.0)       GO TO 91
      LN = IQLS + IQND + 1
      GO TO 34
 
C------            LOOP FOR CHECKING STRUCTURAL LINKS ALSO
 
   41 IF (LN.GE.LEND)        GO TO 24
      CALL QBLOWX (LN)
      IF (IQFOUL.NE.0)       GO TO 91
      LA = IQLS - IQNS
      LE = IQLS
      LN = IQLS + IQND + 1
   43 IF (LA.GE.LE)          GO TO 41
      IQLS= LQ(LA)
      LA  = LA + 1
      IF (IQLS.EQ.0)         GO TO 43
      CALL QNAMEX
      IF (IQFOUL.EQ.0)       GO TO 43
 
C--                RETURNS
 
   91 IF (JBIT(MODE,5).NE.0)   GO TO 93
      QVERIF= -7.
      RETURN
 
   93 CONTINUE
      CALL QFATAL
 
   88 QVERIF= 0.
      RETURN
      END
C====================================================================
CDECK  ID>, QBLOW.
      SUBROUTINE QBLOW (L)
 
C-    3 ROUT. FOR BLOWING, PACKING, LOCATING THE BANK-NAME
C-    FORTRAN VERSION FOR MINIMAL PACKING,  WORD-SIZE 32 BITS OR MORE
 
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
 
      IQID = LQ(L)
      IQNL = JBYT (LQ(L+1),22,9)
      IQNS = JBYT (LQ(L+1),16,6)
      IQND = JBYT (LQ(L+1),1,15)
      IQLS = L + IQNL + 2
      RETURN
      END
C====================================================================
CDECK  ID>, QLUMP.
      SUBROUTINE QLUMP (L)
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
      LQ(L)  = IQID
      LQ(L+1)= IQND
      CALL SBYT  (IQNS,LQ(L+1),16,6)
      CALL SBYT  (IQNL,LQ(L+1),22,9)
      CALL SBIT1 (LQ(L+1),NQBITW)
      IQLS = L + IQNL + 2
      IQ(IQLS)= 0
      CALL SBYT (IQNS,IQ(IQLS),IQSTRU,NQSTRU)
C     CALL SBYT (IQNL,IQ(IQLS),34,9)                                    B48M
      RETURN
      END
C====================================================================
CDECK  ID>, QNAME.
      SUBROUTINE QNAME (LS,NAME)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    NAME(4)
 
 
 
      L = LS
   12 L = L-1                                                           -B48M
      IF (LQ(L).GE.0)  GO TO 12                                         -B48M
C     L = L - JBYT(IQ(L),34,9) - 1                                       B48M
      NAME(1)= LQ(L-1)
      NAME(2)= JBYT (LQ(L),22,9)
      NAME(3)= JBYT (LQ(L),16,6)
      NAME(4)= JBYT (LQ(L),1,15)
      RETURN
      END
C====================================================================
CDECK  ID>, QLUMPR.
      SUBROUTINE QLUMPR (NW)
 
C-    SHORTEN BANK IN /QCN/ TO NW WORDS
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
      DIMENSION    NW(9)
 
      N   = NW(1)
      NCUT= IQND - N
      IF (NCUT.LE.0)         RETURN
      L   = IQLS + N + 1
 
      IF (IQLS+IQND+1.EQ.LQWORK)  GO TO 41
      IF (NCUT.LT.NQNAMU)         RETURN
      LQ(L)   = IQID
      LQ(L+1) = NCUT - NQNAMU
      LQ(L+2) = 0
      CALL SBIT1 (LQ(L+1),NQBITW)
      CALL SBIT1 (LQ(L+2),IQDROP)
      GO TO 44
 
   41 LQWORK = L
   44 CALL SBYT (N,LQ(IQLS-IQNL-1),1,15)
      RETURN
      END
C====================================================================
CDECK  ID>, QBLOWX.
      SUBROUTINE QBLOWX (LN)
 
C-    QBLOW AND QNAME WITH LEGALITY CHECK
C-    FORTRAN VERSION FOR MINIMAL PACKING,  WORD-SIZE 32 BITS OR MORE
 
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
 
      L = LN + 1
      IF (LQ(L).GE.0)  GO TO 91
      IQNL= JBYT (LQ(L),22,9)
      IQNS= JBYT (LQ(L),16,6)
      IQND= JBYT (LQ(L),1,15)
      IQLS= L + IQNL + 1
      IF (IQNL.LT.IQNS)  GO TO 91
      IF (IQLS+IQND.GE.NQMAX)  GO TO 91
      IF (JBYT(IQ(IQLS),IQSTRU,NQSTRU).NE.IQNS)  GO TO 91
C     IF (JBYT(IQ(IQLS),34,9)         .NE.IQNL)  GO TO 91               B48M
      IQID= LQ(LN)
      IDF = JBYT (IQID,NQBITW-7,8)
      IF (IDF.EQ.0)    GO TO 91
      IF (IDF.EQ.255)  GO TO 91
      IQFOUL= 0
      RETURN
 
   91 IQFOUL= -1
      RETURN
      END
C====================================================================
CDECK  ID>, QNAMEX.
      SUBROUTINE QNAMEX
      PARAMETER      (NQFNAE=2, NQFNAD=1, NQFNAU=3)
      PARAMETER      (IQFSTR=19, NQFSTR=6,  IQFSYS=25, NQFSYS=8)
      COMMON /MQCF/  NQNAME,NQNAMD,NQNAMU, IQSTRU,NQSTRU, IQSYSB,NQSYSB
      COMMON /MQCMOV/NQSYSS
      COMMON /MQCM/         NQSYSR,NQSYSL,NQLINK,LQWORG,LQWORK,LQTOL
     +,              LQSTA,LQEND,LQFIX,NQMAX, NQRESV,NQMEM,LQADR,LQADR2
      COMMON /QCN/   IQLS,IQID,IQNL,IQNS,IQND,IQFOUL
      PARAMETER      (IQBITW=32, IQBITC=8, IQCHAW=4)
      COMMON /QMACH/ NQBITW,NQCHAW,NQLNOR,NQLMAX,NQLPTH,NQRMAX,QLPCT
     +,              NQOCT(3),NQHEX(3),NQOCTD(3)
      PARAMETER      (IQBDRO=25, IQBMAR=26, IQBCRI=27, IQBSYS=31)
      COMMON /QBITS/ IQDROP,IQMARK,IQCRIT,IQZIM,IQZIP,IQSYS
                         DIMENSION    IQUEST(30)
                         DIMENSION                 LQ(99), IQ(99), Q(99)
                         EQUIVALENCE (QUEST,IQUEST),    (LQUSER,LQ,IQ,Q)
      COMMON //      QUEST(30),LQUSER(7),LQMAIN,LQSYS(24),LQPRIV(7)
     +,              LQ1,LQ2,LQ3,LQ4,LQ5,LQ6,LQ7,LQSV,LQAN,LQDW,LQUP
C--------------    END CDE                             -----------------  ------
 
 
 
      IF (IQLS.LT.LQSTA)  GO TO 93
      IF (IQLS.GE.NQMAX)  GO TO 96
   11 L = IQLS
   12 L = L-1                                                           -B48M
      IF (LQ(L).GE.0)  GO TO 12                                         -B48M
C     L = L - JBYT(IQ(L),34,9) - 1                                       B48M
      IQNL= JBYT (LQ(L),22,9)
      IF (L+IQNL+1.NE.IQLS)  GO TO 91
      IQNS= JBYT (LQ(L),16,6)
      IF (IQNL.LT.IQNS)  GO TO 91
      IF (JBYT(IQ(IQLS),IQSTRU,NQSTRU).NE.IQNS)  GO TO 91
C     IF (JBYT(IQ(IQLS),34,9)         .NE.IQNL)  GO TO 91                B48M
      IQND= JBYT (LQ(L),1,15)
      IF (IQLS+IQND.GE.NQMAX)  GO TO 91
      IQID= LQ(L-1)
      IDF = JBYT (IQID,NQBITW-7,8)
      IF (IDF.EQ.0)    GO TO 91
      IF (IDF.EQ.255)  GO TO 91
      IQFOUL= 0
      RETURN
 
   91 IQFOUL= -1
      RETURN
 
   93 IF (IQLS.LT.0)         GO TO 96
      IF (IQLS.LT.LQWORG)    GO TO 91
      IF (IQLS.LT.LQWORK)    GO TO 11
   96 IQFOUL= 1
      RETURN
      END
C====================================================================
CDECK  ID>, IUCOMH.
      FUNCTION IUCOMH (ISTR1, ISTR2, NCH)
C
C CERN PROGLIB#         IUCOMH          .VERSION KERNVMI  1.02  900221
C ORIG.  FCA+JZ, 20/02/90
C
C Compare the two Hollerith strings of NCH bytes length and return
C         -1  if  STRING1  < STRING2
C          0               =
C         +1               >
C which is determined by the first non-identical character.
C
      DIMENSION ISTR1(9), ISTR2(9)
      PARAMETER (NCHAPW=4,NBITPC=8)
C
      NDO = NCH
      IF (NDO.LE.0)                GO TO 30
      NWD = (NDO-1)/NCHAPW + 1
 
      DO 29  JW=1,NWD
      IWD1 = ISTR1(JW)
      IWD2 = ISTR2(JW)
      NL   = MIN(NDO,4)
 
      DO 28  J=1,NL
      ICHAR1 = AND (IWD1,255)
      ICHAR2 = AND (IWD2,255)
      IF (ICHAR1-ICHAR2)           32, 26, 31
   26 IWD1 = ISHFT (IWD1,-8)
   28 IWD2 = ISHFT (IWD2,-8)
   29 NDO  = NDO - 4
 
   30 IUCOMH = 0
      RETURN
 
   31 IUCOMH = 1
      RETURN
   32 IUCOMH = -1
      RETURN
      END
CDECK  ID>, UBLOW.
      SUBROUTINE UBLOW (MS,MT,NCHP)
C
C CERN PROGLIB# M409    UBLOW           .VERSION KERNVMI  1.01  891208
C ORIG. 03/02/89  K.M.STORR
C
 
      DIMENSION    MS(99), MT(99), NCHP(9)
      data iblan1/z'20202000'/
      data mask1/z'000000ff'/
 
      NCH = NCHP(1)
      IF   (NCH)             91, 29, 11
   11 NWS    = ishft (NCH,-2)
      NTRAIL = AND (NCH,3)
      JT     = 0
      IF (NWS.EQ.0)          GO TO 26
 
C--                Unpack the initial complete words
 
      DO 24 JS=1,NWS
      MWD      = MS(JS)
      MT(JT+1) = OR (IBLAN1,AND(MASK1,MWD))
      MT(JT+2) = OR (IBLAN1,AND(MASK1,ISHFT(MWD, -8)))
      MT(JT+3) = OR (IBLAN1,AND(MASK1,ISHFT(MWD,-16)))
      MT(JT+4) = OR (IBLAN1,           ISHFT(MWD,-24) )
   24 JT = JT + 4
 
      IF (NTRAIL.EQ.0)       RETURN
 
C--                Unpack the trailing word
 
   26 MWD = MS(NWS+1)
 
      DO 28 JS=1,NTRAIL
      MT(JT+1) = OR (IBLAN1,AND(MASK1,MWD))
      MWD = ISHFT (MWD,-8)
   28 JT = JT + 1
   29 RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, UBUNCH.
      SUBROUTINE UBUNCH (MS,MT,NCHP)
C
C CERN PROGLIB# M409    UBUNCH          .VERSION KERNVMI  1.01  891208
C ORIG. 03/02/89 K.M.STORR
C
 
      DIMENSION    MS(99), MT(99), NCHP(9)
      data iblan1/z'20202020'/
      data mask1/z'000000ff'/
 
      NCH = NCHP(1)
      IF   (NCH)             91,39,11
   11 NWT    = ishft (NCH,-2)
      NTRAIL = AND (NCH,3)
      JS     = 0
      IF (NWT.EQ.0)          GO TO 31
 
C--                Pack the initial complete words
 
      DO 24  JT=1,NWT
      MT(JT) = OR (OR (OR (
     +                  AND(MS(JS+1),MASK1),
     +           ishft (AND(MS(JS+2),MASK1), 8)),
     +           ishft (AND(MS(JS+3),MASK1),16)),
     +           ishft      (MS(JS+4),       24) )
   24 JS = JS + 4
 
      IF (NTRAIL.EQ.0)       RETURN
 
C--                Pack the trailing word
 
   31 MWD = IBLAN1
      JS  = NCH
 
      DO 34 JT=1,NTRAIL
      MWD = OR (ishft(MWD,8), AND(MS(JS),MASK1))
   34 JS  = JS - 1
      MT(NWT+1) = MWD
   39 RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, VXINVB.
      SUBROUTINE VXINVB (MV,NW)
 
C CERN PROGLIB# M434    VXINVB          .VERSION KERNVMI  1.01  891208
C ORIG.  12-June-87, F. Carminati + J. Zoll
 
C-    VX invert bytes, in-place
C-    Fortran version, slower than the machine-language routine
 
      DIMENSION    MV(99)
      LOGICAL*1    LLD(4),    LST(4)
      EQUIVALENCE (LLD,MLD), (LST,MST)
 
      DO 29  J=1,NW
      MLD    = MV(J)
      LST(1) = LLD(4)
      LST(2) = LLD(3)
      LST(3) = LLD(2)
      LST(4) = LLD(1)
      MV(J)  = MST
   29 CONTINUE
      END
CDECK  ID>, VXINVC.
      SUBROUTINE VXINVC (MVI,MVX,NW)
 
C CERN PROGLIB# M434    VXINVC          .VERSION KERNVMI  1.01  891208
C ORIG.  12-June-87, F. Carminati + J. Zoll
 
C-    VX invert bytes and copy
C-    Fortran version, slower than the machine-language routine
 
      DIMENSION    MVI(99), MVX(99)
      LOGICAL*1    LLD(4),    LST(4)
      EQUIVALENCE (LLD,MLD), (LST,MST)
 
      DO 29  J=1,NW
      MLD    = MVI(J)
      LST(1) = LLD(4)
      LST(2) = LLD(3)
      LST(3) = LLD(2)
      LST(4) = LLD(1)
      MVX(J) = MST
   29 CONTINUE
      END
CDECK  ID>, XINB.
      SUBROUTINE XINB  (LUN,XBV,NXB)
C
C CERN PROGLIB# Z203    XINB            .VERSION KERNVMI  1.01  891208
C ORIG.  4/01/89  JZ
C
      DIMENSION    XBV(99)
 
      READ (LUN,IOSTAT=JSTAT) N, (XBV(J),J=1,MIN(N,NXB))
      IF   (JSTAT)           61, 24, 64
   24 N   = MIN (N,NXB)
      NXB = MAX (N,1)
      RETURN
 
   61 NXB = 0
      RETURN
 
   64 NXB = -JSTAT
      RETURN
      END
CDECK  ID>, XINBS.
      SUBROUTINE XINBS (LUN,XAV,NA,XBV,NXB)
C
C CERN PROGLIB# Z203    XINBS           .VERSION KERNVMI  1.01  891208
C ORIG.  4/01/89  JZ
C
      DIMENSION    XBV(99), XAV(NA)
 
      READ (LUN,IOSTAT=JSTAT) N,XAV,(XBV(J),J=1,MIN(N,NXB))
      IF   (JSTAT)           61, 24, 64
   24 N   = MIN (N,NXB)
      NXB = MAX (N,1)
      RETURN
 
   61 NXB = 0
      RETURN
 
   64 NXB = -JSTAT
      RETURN
      END
/*DECK ID>, ABEND. */
/*>    ROUTINE ABEND
  CERN PROGLIB# Z035    ABEND           .VERSION KERNFOR  4.31  911111
*/
#include <stdlib.h>
void abend_()
{
    exit(7);
    return;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, DATIME. */
/*>    ROUTINE DATIME
  CERN PROGLIB# Z007    DATIME          .VERSION KERNFOR  4.26  910313
*/
#include <sys/types.h>
#include <time.h>
 
struct tm *tp;
 
#define slate slate_
struct { int  inum[39]; } slate_;
void datime_(id, it)
   int  *id, *it;
{
   time_t tloc = time(0);
   tp = localtime(&tloc);
   slate.inum[0] = tp->tm_year + 1900;
   slate.inum[1] = tp->tm_mon + 1;
   slate.inum[2] = tp->tm_mday;
   slate.inum[3] = tp->tm_hour;
   slate.inum[4] = tp->tm_min;
   slate.inum[5] = tp->tm_sec;
   *id  = tp->tm_year * 10000;
   *id += (tp->tm_mon + 1) * 100;
   *id += tp->tm_mday;
   *it  = tp->tm_hour * 100;
   *it += tp->tm_min;
   return;
}
/*> END <----------------------------------------------------------*/
CDECK  ID>, GETENVF.
      SUBROUTINE GETENVF (NAME, TEXT)
C
C CERN PROGLIB# Z265    GETENVF         .VERSION KERNFOR  4.26  910313
C ORIG. 22/02/91, JZ
C Fortran interface routine to getenv
C
      COMMON /SLATE/ISL(40)
      CHARACTER*(*)  NAME, TEXT
 
      LGN = LNBLNK (NAME)
      NTX = LEN(TEXT)
      CALL GETENI (NAME,TEXT,NTX,LGN)
      ISL(1) = NTX
      RETURN
      END
/*DECK ID>, GETENI. */
/*>    ROUTINE GETENI
  CERN PROGLIB# Z265    GETENI          .VERSION KERNFOR  4.31  911111
  ORIG. 22/02/91, JZ
  Fortran interface routine to getenv
 
      CALL GETENVF (NAME, TEXT*)
 
          NAME  the name of the environment variable,
          TEXT  returns its value
                ISLATE(1) returns its length
*/
#include <stdio.h>
#include <stdlib.h>
void geteni_(fname, ftext, lgtext, lgname)
      char *fname, *ftext;
      int  *lgtext, *lgname;
{
      char *ptname, *fchtak();
      char *pttext, *getenv();
      int  fchput();
 
      pttext = NULL;
      ptname = fchtak(fname,*lgname);
      if (ptname == NULL)          goto out;
      pttext = getenv (ptname);
      free(ptname);
 
out:  *lgtext = fchput (pttext,ftext,*lgtext);
      return;
}
/*> END <----------------------------------------------------------*/
CDECK  ID>, GETWDF.
      SUBROUTINE GETWDF (TEXT)
C
C CERN PROGLIB# Z265    GETWDF          .VERSION KERNFOR  4.26  910313
C ORIG. 22/02/91, JZ
C Fortran interface routine to getwd
C
      COMMON /SLATE/ISL(40)
      CHARACTER    TEXT*(*)
 
      NTX = LEN(TEXT)
      CALL GETWDI (TEXT, NTX)
      ISL(1) = NTX
      RETURN
      END
/*DECK ID>, GETWDI. */
/*>    ROUTINE GETWDI
  CERN PROGLIB# Z265    GETWDI          .VERSION KERNFOR  4.31  911111
  ORIG. 22/02/91, JZ
  Fortran interface routine to getwd
 
      CALL GETWDF (TEXT*)
 
      returns the name of the c.w.d. in TEXT
      ISLATE(1) returns its lenth NTEXT
*/
#include <stdio.h>
#include <stdlib.h>
void getwdi_(fname, lgname)
      char *fname;
      int  *lgname;
{
      char *ptalc, *pttext;
      int  fchput();
      int  nalc;
      char *getwd();
 
      pttext = NULL;
      nalc   = 2048;
      ptalc  = (char *)malloc(nalc);
      if (ptalc == NULL)           goto out;
 
      pttext = getwd (ptalc);
 
out:  *lgname = fchput (pttext,fname,*lgname);
      if (ptalc != NULL)   free(ptalc);
      return;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, INTRAC. */
/*>    ROUTINE INTRAC
  CERN PROGLIB# Z044    INTRAC          .VERSION KERNFOR  4.26  910313
*/
#include <unistd.h>
int intrac_()
{
    return ((int) isatty(0));
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, LOCB. */
/*>    ROUTINE LOCB
  CERN PROGLIB# N101    LOCB            .VERSION KERNFOR  4.26  910313
*/
long locb_(iadr)
   char *iadr;
{
   return( (long) iadr );
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, LOCF. */
/*>    ROUTINE LOCF
  CERN PROGLIB# N100    LOCF            .VERSION KERNFOR  4.26  910313
*/
#include <limits.h>
#include <stdio.h>
#define NADUPW 4   /* Number of ADdress Units Per Word */
#define LADUPW 2   /* Logarithm base 2 of ADdress Units Per Word */
int Is64bit(){
  if ((int)sizeof(void*)==8) {
    return 1;
  } else {
    return 0;
  }
}
unsigned int locf_(iadr)
     char *iadr;
{
  if (Is64bit()){
    const unsigned long long int mask=0x00000000ffffffff;
    static unsigned long long int base=1;
    unsigned long long int jadr=(unsigned long long int) iadr;
    unsigned long long int jadrl = ((mask & jadr) >> LADUPW);

    if (base == 1) {
      base = (~mask & jadr);
    } else if(base != (~mask & jadr)) {
      printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
      printf("locf_() Warning: changing base.");
      printf("This may result in program crash or incorrect results\n");
      printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
    return ((unsigned) jadrl);
  } else {
    return(( (unsigned ) iadr) >> LADUPW );
  }
}
/*> END <----------------------------------------------------------*/
CDECK  ID>, RENAMEF.
      INTEGER FUNCTION RENAMEF (FROM,TO)
C
C CERN PROGLIB# Z265    RENAMEF         .VERSION KERNFOR  4.26  910313
C ORIG. 22/02/91, JZ
C Fortran interface routine to rename
C
      CHARACTER*(*)  FROM, TO
      INTEGER        RENAMI
 
      LGFR = LNBLNK (FROM)
      LGTO = LNBLNK (TO)
      RENAMEF = RENAMI (FROM, TO, LGFR, LGTO)
      RETURN
      END
/*DECK ID>, RENAMI. */
/*>    ROUTINE RENAMI
  CERN PROGLIB# Z265    RENAMI          .VERSION KERNFOR  4.31  911111
  ORIG. 22/02/91, JZ
  Fortran interface routine to rename
 
      ISTAT = RENAMEF (FROM, TO)
 
          FROM  old file name
            TO  new file name
         ISTAT  zero if successful
*/
#include <stdio.h>
#include <stdlib.h>
int renami_(frpath, topath, lgfr, lgto)
      char *frpath, *topath;
      int  *lgfr, *lgto;
{
      char *ptfr, *ptto, *fchtak();
      int  istat, rename();
 
      istat = -1;
      ptfr  = fchtak(frpath,*lgfr);
      if (ptfr == NULL)            goto bad;
 
      ptto  = fchtak(topath,*lgto);
      if (ptto == NULL)            goto pre;
 
      istat = rename (ptfr, ptto);
 
      free (ptto);
pre:  free (ptfr);
bad:  return istat;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, TMINIT. */
/*>    ROUTINE TMINIT
  CERN PROGLIB#         TMINIT          .VERSION KERNFOR  4.29  910718
  ORIG. 20/07/90, RH + JZ
  Fortran interface routine to initialize TMPRO / TMREAD
      CALL TMINIT (INIT)
*/
#include <stdio.h>
void tminit_(ptinit)
      long *ptinit;
{
      *ptinit = 7;
/*    setbuf (stdout,NULL);        */
      return;
}
/*> END <----------------------------------------------------------*/
CDECK  ID>, TMPRO.
      SUBROUTINE TMPRO (TEXT)
C
C CERN PROGLIB#         TMPRO           .VERSION KERNFOR  4.29  910718
C ORIG. 30/05/91, JZ
C
C     Fortran interface : print a prompt string
C
      CHARACTER    TEXT*(*)
 
      LGTEXT = LEN (TEXT)
      CALL TMPROI (TEXT,LGTEXT)
      RETURN
      END
/*DECK ID>, TMPROI. */
/*>    ROUTINE TMPROI
  CERN PROGLIB#         TMPROI          .VERSION KERNFOR  4.29  910718
  ORIG. 30/05/91, JZ
  Fortran interface routine to print a prompt string
      CALL TMPRO (TEXT)
*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
void tmproi_(ftext, lgtext)
      char *ftext;
      long *lgtext;
{
      ssize_t dummy = write (1, ftext, *lgtext);
      return;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, TMREAD. */
/*>    ROUTINE TMREAD
  CERN PROGLIB#         TMREAD          .VERSION KERNFOR  4.26  910313
  ORIG. 20/07/90, JZ
      read the next line from stdin :
      CALL TMREAD (MAXCH, LINE, NCH, ISTAT)
          MAXCH   maxim. # of characters into LINE
          NCH     actual # of characters read into LINE
          ISTAT   status return, zero : OK  -ve : EoF
*/
#include <stdio.h>
void tmread_(alim, cols, anch, astat)
      char *cols;
      int  *alim, *anch, *astat;
{
      int ch, jcol, lim;
 
/*--      read the text   */
      lim  = *alim;
      jcol = 0;
      while (lim-- > 0)
      {   ch = getchar();
          if (ch == EOF)           goto endf;
          if (ch == '\n')          goto endl;
          cols[jcol] = ch;
          jcol = jcol + 1;
       }
/*        discard excess characters   */
loop: ch = getchar();
      if (ch == '\n')          goto endl;
      if (ch != EOF)           goto loop;
 
endf: *astat = -1;
      clearerr(stdin);
      return;
 
endl: *anch = jcol;
      *astat = 0;
      return;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, FCHPUT. */
/*>    ROUTINE FCHPUT
  CERN PROGLIB#         FCHPUT          .VERSION KERNFOR  4.31  911111
  ORIG. 22/02/91, JZ
 
      Copy a zero-terminated C character string
      to a Fortran character string of length NTEXT,
      return length and blank-fill
*/
#include <stdio.h>
int fchput(pttext,ftext,lgtext)
      char *pttext;
      char *ftext;
      int  lgtext;
{
      char *utext;
      int  limit, jcol;
      int  nhave;
 
      limit = lgtext;
      jcol  = 0;
      utext = ftext;
      if (pttext == NULL)          goto out;
 
/*--      copy the text to the caller   */
      for (jcol = 0; jcol < limit; jcol++)
      {   if (*pttext == '\0')  break;
          *utext++ = *pttext++;
        }
 
out:  nhave = jcol;
      for (; jcol < limit; jcol++)   *utext++ = ' ';
      return nhave;
}
/*> END <----------------------------------------------------------*/
/*DECK ID>, FCHTAK. */
/*>    ROUTINE FCHTAK
  CERN PROGLIB#         FCHTAK          .VERSION KERNFOR  4.31  911111
  ORIG. 22/02/91, JZ
 
      copy a Fortran character string
      to allocated memory zero-terminated,
      return the memory pointer
*/
#include <stdio.h>
#include <stdlib.h>
char *fchtak(ftext,lgtext)
      char *ftext;
      int  lgtext;
{
      char *ptalc, *ptuse;
      char *utext;
      int  nalc;
      int  ntx, jcol;
 
      nalc  = lgtext + 8;
      ptalc = (char *)malloc (nalc);
      if (ptalc == NULL)     goto exit;
      utext = ftext;
 
      ptuse = ptalc;
      ntx   = lgtext;
      for (jcol = 0; jcol < ntx; jcol++)  *ptuse++ = *utext++;
 
      *ptuse = '\0';
exit: return  ptalc;
}
/*> END <----------------------------------------------------------*/
CDECK  ID>, XINBF.
      SUBROUTINE XINBF (LUN,XBV,NXB)
C
C CERN PROGLIB# Z203    XINBF           .VERSION KERNFOR  4.31  911111
C ORIG. 15/07/78 JZ
C
      DIMENSION    XBV(NXB)
C
      READ (LUN,IOSTAT=JSTAT) XBV
      IF    (JSTAT)          61, 24, 64
C
   61 NXB = 0
      RETURN
C
   64 NXB = -JSTAT
   24 RETURN
      END
CDECK  ID>, XINCF.
      SUBROUTINE XINCF (LUN,XBV,NXB)
C
C CERN PROGLIB# Z203    XINCF           .VERSION KERNFOR  3.15  820113
C ORIG. 15/07/78 JZ
C
      DIMENSION    XBV(NXB)
C
      READ (LUN,8000,END=61,ERR=64) XBV
      RETURN
C
   61 NXB = 0
      RETURN
C
   64 NXB = -7
      RETURN
C
 8000 FORMAT (35A4)
      END
CDECK  ID>, XOUTB.
      SUBROUTINE XOUTB  (LUN,BV,NB)
C
C CERN PROGLIB# Z203    XOUTB           .VERSION KERNFOR  3.05  780715
C ORIG. 15/07/78 JZ
C
      DIMENSION    BV(NB)
C
      WRITE (LUN)  NB,BV
      RETURN
      END
CDECK  ID>, XOUTBF.
      SUBROUTINE XOUTBF (LUN,BV,NB)
C
C CERN PROGLIB# Z203    XOUTBF          .VERSION KERNFOR  3.05  780715
C ORIG. 15/07/78 JZ
C
      DIMENSION    BV(NB)
C
      WRITE (LUN)  BV
      RETURN
      END
CDECK  ID>, XOUTBS.
      SUBROUTINE XOUTBS (LUN,AV,NA,BV,NB)
C
C CERN PROGLIB# Z203    XOUTBS          .VERSION KERNFOR  3.05  780715
C ORIG. 15/07/78 JZ
C
      DIMENSION    BV(NB), AV(NA)
C
      WRITE (LUN)  NB,AV,BV
      RETURN
      END
CDECK  ID>, XOUTCF.
      SUBROUTINE XOUTCF (LUN,BV,NB)
C
C CERN PROGLIB# Z203    XOUTCF          .VERSION KERNFOR  3.15  820113
C ORIG. 15/07/78 JZ
C
      DIMENSION    BV(NB)
C
      WRITE (LUN,8000) BV
      RETURN
C
 8000 FORMAT (35A4)
      END
CDECK  ID>, CBYT.
      SUBROUTINE CBYT (M,LM,IX,LX,NB)
C
C CERN PROGLIB# M421    CBYT            .VERSION KERNFOR  4.23  891215
C ORIG. 14/08/70 CL
C
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
C
      IX = OR ( AND (IX,
     +                  NOT(ISHFT (ISHFT(IALL11,-NBITPW+NB), LX-1)))
     +,   ISHFT (ISHFT(ISHFT(M,-LM+1),NBITPW-NB), -NBITPW-1+LX+NB))
      RETURN
      END
CDECK  ID>, CFILL.
      SUBROUTINE CFILL (CHI, CHV,JL,JR)
C
C CERN PROGLIB# M432    CFILL           .VERSION KERNFOR  4.21  890323
C ORIG. 06/02/89, JZ
C
C-    Fill CHV(JL:JR) with as many copies of CHI as possible
 
      CHARACTER    CHV*(*), CHI*(*)
 
      NI = LEN (CHI)
      JJ = JL
 
   12 II = 1
   14 IF (JJ.GT.JR)          RETURN
      CHV(JJ:JJ) = CHI(II:II)
      JJ = JJ + 1
      IF (II.EQ.NI)          GO TO 12
      II = II + 1
      GO TO 14
      END
CDECK  ID>, CLEFT.
      SUBROUTINE CLEFT (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CLEFT           .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Left-justify CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT, DUMMY(38)
      CHARACTER    CHV*(*)
 
C--       Find the first blank
 
      JL = JLP(1)
      JR = JRP(1)
 
      JP = JR + 1
      JJ = JL
   12 IF (JJ.GE.JP)          GO TO 99
      IF (CHV(JJ:JJ).NE.' ')   THEN
          JJ = JJ + 1
          GO TO 12
        ENDIF
 
C--       Copy shifted
 
      JP = JJ
      JJ = JJ + 1
   21 IF (JJ.GT.JR)          GO TO 91
      IF (CHV(JJ:JJ).NE.' ')   THEN
          CHV(JP:JP) = CHV(JJ:JJ)
          JP = JP+1
        ENDIF
      JJ = JJ+1
      GO TO 21
 
   91 CHV(JP:JR) = ' '
   99 NESLAT = JP
      NDSLAT = JP - JL
      RETURN
      END
CDECK  ID>, CRIGHT.
      SUBROUTINE CRIGHT (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CRIGHT          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Right-justify CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT, DUMMY(38)
      CHARACTER    CHV*(*)
 
C--       Find first blank
 
      JL = JLP(1)
      JR = JRP(1)
 
      JP = JL - 1
      JJ = JR
   12 IF (JJ.LE.JP)          GO TO 99
      IF (CHV(JJ:JJ).NE.' ')   THEN
          JJ = JJ - 1
          GO TO 12
        ENDIF
 
C--       Copy shifted
 
      JP = JJ
      JJ = JJ - 1
   21 IF (JJ.LT.JL)          GO TO 91
      IF (CHV(JJ:JJ).NE.' ')   THEN
          CHV(JP:JP) = CHV(JJ:JJ)
          JP = JP - 1
        ENDIF
      JJ = JJ - 1
      GO TO 21
 
   91 CHV(JL:JP) = ' '
   99 NESLAT = JP
      NDSLAT = JR - JP
      RETURN
      END
CDECK  ID>, CLTOU.
      SUBROUTINE CLTOU (CHV)
C
C CERN PROGLIB# M432    CLTOU           .VERSION KERNFOR  4.21  890323
C ORIG. 11/02/86 A. PETRILLI
C NEW    9/02/89 JZ, for speed
C
C-    Convert character string CHV from lower to upper case.
 
      CHARACTER    CHV*(*)
 
 
 
      DO 19  JJ=1,LEN(CHV)
          J = ICHAR(CHV(JJ:JJ))
          IF (J.LT.97)       GO TO 19
          IF (J.GE.123)      GO TO 19
          CHV(JJ:JJ) = CHAR(J-32)
   19 CONTINUE
      END
CDECK  ID>, CUTOL.
      SUBROUTINE CUTOL (CHV)
C
C CERN PROGLIB# M432    CUTOL           .VERSION KERNFOR  4.21  890323
C ORIG. 11/02/86 A. PETRILLI
C NEW    9/02/89 JZ, for speed
C
C-    Convert character string CHV from upper to lower case.
 
      CHARACTER    CHV*(*)
 
 
      DO 19  JJ=1,LEN(CHV)
          J = ICHAR(CHV(JJ:JJ))
          IF (J.LT.65)       GO TO 19
          IF (J.GE.91)       GO TO 19
          CHV(JJ:JJ) = CHAR(J+32)
   19 CONTINUE
      END
CDECK  ID>, CSETDI.
      SUBROUTINE CSETDI (INTP, CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CSETDI          .VERSION KERNFOR  4.29  910718
C ORIG. 04/10/88, JZ
C
C-    Set decimal integer into CHV(JL:JR) right-justified
 
      DIMENSION    INTP(9), JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*)
 
 
      INT = INTP(1)
      JL  = JLP(1)
      JJ  = JRP(1)
 
      IVAL   = IABS (INT)
      NDG    = 0
      NGSLAT = 0
 
   12 IF (JJ.LT.JL)          GO TO 97
      K    = MOD (IVAL,10)
      IVAL = IVAL/10
      CHV(JJ:JJ) = CHAR(K+48)
 
      JJ  = JJ  - 1
      NDG = NDG + 1
      IF (IVAL.NE.0)         GO TO 12
      IF (INT.GE.0)          GO TO 98
      IF (JJ.LT.JL)          GO TO 97
      CHV(JJ:JJ) = '-'
      NFSLAT = JJ - 1
      GO TO 99
 
   97 NGSLAT = JL
   98 NFSLAT = JJ
   99 NESLAT = JJ
      NDSLAT = NDG
      RETURN
      END
CDECK  ID>, CSETHI.
      SUBROUTINE CSETHI (INTP, CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CSETHI          .VERSION KERNFOR  4.31  911111
C ORIG. 17/10/89, JZ
C
C-    Set hexadecimal integer into CHV(JL:JR) right-justified
 
      DIMENSION    INTP(9), JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*)
 
 
      JL  = JLP(1)
      JJ  = JRP(1)
 
      IVAL   = INTP(1)
      NDG    = 0
      NGSLAT = 0
 
   12 IF (JJ.LT.JL)          GO TO 97
      K    = AND (IVAL,15)
      IVAL = ISHFT (IVAL,-4)
      IF (K.LT.10)  THEN
          CHV(JJ:JJ) = CHAR(K+48)
        ELSE
          CHV(JJ:JJ) = CHAR(K+55)
        ENDIF
 
      JJ  = JJ  - 1
      NDG = NDG + 1
      IF (IVAL.NE.0)         GO TO 12
      GO TO 98
 
   97 NGSLAT = JL
   98 NFSLAT = JJ
      NESLAT = JJ
      NDSLAT = NDG
      RETURN
      END
CDECK  ID>, CSQMBL.
      SUBROUTINE CSQMBL (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CSQMBL          .VERSION KERNFOR  4.22  890913
C ORIG. 28/06/89, JZ
C
C-    Squeeze multiple blanks in CHV(JL:JR), shifting left
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT, DUMMY(38)
      CHARACTER    CHV*(*)
 
C----              Find the first blank
 
      JL = JLP(1)
      JR = JRP(1)
 
      JP = JR + 1
      JJ = JL
   12 IF (JJ.GE.JP)                GO TO 99
      IF (CHV(JJ:JJ).NE.' ')   THEN
          JJ = JJ + 1
          GO TO 12
        ENDIF
 
C--       is it multiple ?
 
      JJ = JJ + 1
      IF (JJ.GE.JP)                GO TO 99
      IF (CHV(JJ:JJ).NE.' ')       GO TO 12
 
      JP = JJ
      JJ = JJ + 1
   16 IF (JJ.GT.JR)                GO TO 99
      IF (CHV(JJ:JJ).EQ.' ')   THEN
          JJ = JJ + 1
          GO TO 16
        ENDIF
 
C----              Copy shifted
 
   24 CHV(JP:JP) = CHV(JJ:JJ)
      JP = JP + 1
      JJ = JJ + 1
      IF (JJ.GT.JR)                GO TO 91
      IF (CHV(JJ:JJ).NE.' ')       GO TO 24
 
      IF (JJ.EQ.JR)                GO TO 91
      IF (CHV(JJ+1:JJ+1).NE.' ')   GO TO 24
      CHV(JP:JP) = ' '
      JP = JP + 1
      JJ = JJ + 1
 
   26 IF (JJ.GT.JR)                GO TO 91
      IF (CHV(JJ:JJ).NE.' ')       GO TO 24
      JJ = JJ + 1
      GO TO 26
 
   91 CHV(JP:JR) = ' '
   99 IF (CHV(JP-1:JP-1).EQ.' ')  JP = JP - 1
      NESLAT = JP
      NDSLAT = JP - JL
      RETURN
      END
CDECK  ID>, CTRANS.
      SUBROUTINE CTRANS (CHOLD,CHNEW,CHV,JLP,JRP)
C
C CERN PROGLIB# M432    CTRANS          .VERSION KERNFOR  4.24  900424
C ORIG. 13/03/90, Jamie Shiers
C
C-    Replace all occurrences of CHOLD in CHV(JLP:JRP) by CHNEW
 
      CHARACTER*(*) CHV
      CHARACTER*1   CHOLD,CHNEW
 
      DO 24 J=JLP,JRP
   24 IF(CHV(J:J).EQ.CHOLD) CHV(J:J) = CHNEW
      END
CDECK  ID>, ICDECI.
      FUNCTION ICDECI (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICDECI          .VERSION KERNFOR  4.22  890913
C ORIG. 04/10/88, JZ
C
C-    Read decimal integer from CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*)
 
      JJ = JLP(1)
      JR = JRP(1)
 
      IVAL = 0
      NDG  = 0
      NEG  = 0
      NGSLAT = 0
 
   12 IF (JJ.GT.JR)          GO TO 99
      IF (CHV(JJ:JJ).EQ.' ')  THEN
          JJ = JJ + 1
          GO TO 12
        ELSEIF (CHV(JJ:JJ).EQ.'+')  THEN
          JJ = JJ + 1
        ELSEIF (CHV(JJ:JJ).EQ.'-')  THEN
          NEG = 7
          JJ  = JJ + 1
        ENDIF
 
   21 IF (JJ.GT.JR)          GO TO 99
      K = ICHAR (CHV(JJ:JJ))
      K = K - 48
      IF (K.LT.0)            GO TO 98
      IF (K.GE.10)           GO TO 98
      IVAL = 10*IVAL + K
      NDG  = NDG + 1
      JJ   = JJ + 1
      GO TO 21
 
   98 IF (CHV(JJ:JJ).NE.' ')  NGSLAT = JJ
   99 NDSLAT = NDG
      NESLAT = JJ
      IF (NEG.NE.0)  THEN
          IF (IVAL.NE.0)  IVAL = -IVAL
        ENDIF
      ICDECI = IVAL
      RETURN
      END
CDECK  ID>, ICFIND.
      FUNCTION ICFIND (CHI, CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICFIND          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find first occurrence of CHI(1:1) in CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*), CHI*1
 
      JJ = JLP(1)
      JR = JRP(1)
 
   11 IF (JJ.GT.JR)          GO TO 19
      IF (CHV(JJ:JJ).NE.CHI)  THEN
          JJ = JJ + 1
          GO TO 11
        ENDIF
      NGSLAT = JJ
      ICFIND = JJ
      RETURN
 
   19 NGSLAT = 0
      ICFIND = JR + 1
      RETURN
      END
CDECK  ID>, ICFMUL.
      FUNCTION ICFMUL (CHI, CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICFMUL          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find first occurrence of any of CHI(j:j) in CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*), CHI*(*)
 
      JJ = JLP(1)
      JR = JRP(1)
 
   11 IF (JJ.GT.JR)          GO TO 19
      JTH = INDEX (CHI,CHV(JJ:JJ))
      IF (JTH.EQ.0)  THEN
          JJ = JJ + 1
          GO TO 11
        ENDIF
      NDSLAT = JTH
      NGSLAT = JJ
      ICFMUL = JJ
      RETURN
 
   19 NDSLAT = 0
      NGSLAT = 0
      ICFMUL = JR+1
      RETURN
      END
CDECK  ID>, ICFILA.
      FUNCTION ICFILA (CHI, CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICFILA          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find last occurrence of CHI(1:1) in CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*), CHI*1
 
      JL = JLP(1)
      JR = JRP(1)
      JJ = JR
 
   11 IF (JJ.LT.JL)          GO TO 19
      IF (CHV(JJ:JJ).NE.CHI)  THEN
          JJ = JJ - 1
          GO TO 11
        ENDIF
      NGSLAT = JJ
      ICFILA = JJ
      RETURN
 
   19 NGSLAT = 0
      ICFILA = JR+1
      RETURN
      END
CDECK  ID>, ICFNBL.
      FUNCTION ICFNBL (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICFNBL          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find first non-blank character in CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*)
 
      JJ = JLP(1)
      JR = JRP(1)
 
   12 IF (JJ.GT.JR)          GO TO 19
      IF (CHV(JJ:JJ).EQ.' ')  THEN
          JJ = JJ + 1
          GO TO 12
        ENDIF
      NGSLAT = JJ
      ICFNBL = JJ
      RETURN
 
   19 NGSLAT = 0
      ICFNBL = JJ
      RETURN
      END
CDECK  ID>, ICHEXI.
      FUNCTION ICHEXI (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICHEXI          .VERSION KERNFOR  4.24  900424
C ORIG. 04/10/88, JZ
C
C-    Read hexadecimal integer from CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT,NFSLAT,NGSLAT, DUMMY(36)
      CHARACTER    CHV*(*)
 
      JJ = JLP(1)
      JR = JRP(1)
 
      IVAL = 0
      NDG  = 0
      NEG  = 0
      NGSLAT = 0
 
   12 IF (JJ.GT.JR)          GO TO 99
      IF (CHV(JJ:JJ).EQ.' ')  THEN
          JJ = JJ + 1
          GO TO 12
        ELSEIF (CHV(JJ:JJ).EQ.'+')  THEN
          JJ = JJ + 1
        ELSEIF (CHV(JJ:JJ).EQ.'-')  THEN
          NEG = 7
          JJ  = JJ + 1
        ENDIF
 
   21 IF (JJ.GT.JR)          GO TO 99
      K = ICHAR (CHV(JJ:JJ))
      K = K - 48
      IF (K.LT.0)            GO TO 98
      IF (K.GE.10)  THEN
          K = K - 7
          IF (K.LT.10)       GO TO 98
          IF (K.GE.16)  THEN
              K = K - 32
              IF (K.LT.10)   GO TO 98
              IF (K.GE.16)   GO TO 98
            ENDIF
        ENDIF
      IVAL = 16*IVAL + K
      NDG  = NDG + 1
      JJ   = JJ + 1
      GO TO 21
 
   98 IF (CHV(JJ:JJ).NE.' ')  NGSLAT = JJ
   99 NDSLAT = NDG
      NESLAT = JJ
      IF (NEG.NE.0)  THEN
          IF (IVAL.NE.0)  IVAL = -IVAL
        ENDIF
      ICHEXI = IVAL
      RETURN
      END
CDECK  ID>, ICLOC.
      FUNCTION ICLOC (CHI,NI,CHV,JL,JR)
C
C CERN PROGLIB# M432    ICLOC           .VERSION KERNFOR  4.21  890323
C ORIG. 09/02/89, JZ
C
C-    Locate CHI of NI characters inside CHV(JL:JR), case sensitive
 
      CHARACTER    CHI*(*), CHV*(*), CHWK1*1
 
      JVV   = JL - 1
      JVVE  = JR+1 - NI
      CHWK1 = CHI(1:1)
 
C--          Scan CHV to find the first char. of CHI
 
   12 JVV = JVV + 1
      IF (JVV.GT.JVVE)                GO TO 90
      IF (CHV(JVV:JVV).NE.CHWK1)      GO TO 12
 
C--          Match the further characters
 
      JVX = JVV
      JI  = 1
   14 JI  = JI + 1
      IF (JI.GT.NI)                   GO TO 91
      JVX = JVX + 1
      IF (CHV(JVX:JVX).EQ.CHI(JI:JI)) GO TO 14
      GO TO 12
 
   90 JVV = 0
   91 ICLOC = JVV
      RETURN
      END
CDECK  ID>, ICNEXT.
      FUNCTION ICNEXT (CHV,JLP,JRP)
C
C CERN PROGLIB# M432    ICNEXT          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find limits of next word in CHV(JL:JR)
 
      DIMENSION    JLP(9), JRP(9)
 
      COMMON /SLATE/ NDSLAT,NESLAT, DUMMY(38)
      CHARACTER    CHV*(*)
 
C--       Ignore leading blanks
 
      JJ = JLP(1)
      JR = JRP(1)
 
   12 IF (JJ.GT.JR)          GO TO 99
      IF (CHV(JJ:JJ).EQ.' ')  THEN
          JJ = JJ + 1
          GO TO 12
        ENDIF
 
C--       Find terminating blank
 
      JF = JJ
   14 JJ = JJ + 1
      IF (JJ.LE.JR)  THEN
          IF (CHV(JJ:JJ).NE.' ')  GO TO 14
      ENDIF
 
      NESLAT = JJ
      NDSLAT = JJ - JF
      ICNEXT = JF
      RETURN
 
   99 NDSLAT = 0
      NESLAT = JJ
      ICNEXT = JJ
      RETURN
      END
CDECK  ID>, ICTYPE.
      FUNCTION ICTYPE (CHV)
C
C CERN PROGLIB# M432    ICTYPE          .VERSION KERNFOR  4.23  891215
C ORIG. 14/11/89, JZ
C
C-    Return the type of character CHV*1 :
C-    Nature : 0 unseen, 1 others, 2 numeric, 3 lower, 4 upper case
 
      CHARACTER    CHV*1
 
      IVAL = ICHAR(CHV)
      JX = 0
      IF (IVAL.LT.32)        GO TO 49
      IF (IVAL.GE.127)       GO TO 49
      JX = 1
      IF (IVAL.LT.48)        GO TO 49
      IF (IVAL.GE.123)       GO TO 49
      IF (IVAL.LE.57)  THEN
          JX = 2
          GO TO 49
        ENDIF
      IF (IVAL.LT.65)        GO TO 49
      IF (IVAL.LE.90)  THEN
          JX = 4
          GO TO 49
        ENDIF
      IF (IVAL.LT.97)        GO TO 49
      JX = 3
   49 ICTYPE = JX
      RETURN
      END
CDECK  ID>, IUCOLA.
      FUNCTION IUCOLA (ITEXT,IVECT,N)
C
C CERN PROGLIB# V304    IUCOLA          .VERSION KERNFOR  4.18  880425
C ORIG. 25/04/88 JZ
C
      DIMENSION IVECT(9)
C
      IF (N.EQ.0)            GO TO 18
      DO 12   JF=N,1,-1
      IF (ITEXT.EQ.IVECT(JF))    GO TO 24
   12 CONTINUE
   18 JF = 0
C
   24 IUCOLA = JF
      RETURN
      END
CDECK  ID>, IUCOMP.
      FUNCTION IUCOMP (ITEXT,IVECT,N)
C
C CERN PROGLIB# V304    IUCOMP          .VERSION KERNFOR  1.0   710701
C ORIG. 01/01/66 JZ
C
      DIMENSION IVECT(9)
C
      IF (N.EQ.0) GO TO 18
      DO 12 J=1,N
      IF (ITEXT.EQ.IVECT(J))  GO TO 24
   12 CONTINUE
   18 J=0
C
   24 IUCOMP= J
      RETURN
      END
CDECK  ID>, IUFILA.
      FUNCTION IUFILA (IT,ICH,JL,JR)
C
C CERN PROGLIB# V304    IUFILA          .VERSION KERNFOR  4.18  880425
C ORIG. 25/04/88 JZ
C
      DIMENSION ICH(9)
C
      DO 12   JF=JR,JL,-1
      IF (ICH(JF).EQ.IT)     GO TO 24
   12 CONTINUE
      JF = JR+1
C
   24 IUFILA = JF
      RETURN
      END
CDECK  ID>, IUFIND.
      FUNCTION IUFIND (IT,ICH,JL,JR)
C
C CERN PROGLIB# V304    IUFIND          .VERSION KERNFOR  1.0   710701
C ORIG. 01/07/71
C
      DIMENSION ICH(9)
C
      DO 12 J= JL,JR
      IF (ICH(J).EQ.IT)   GO TO 24
   12 CONTINUE
      J= JR+1
C
   24 IUFIND= J
      RETURN
      END
CDECK  ID>, IUFNBL.
      FUNCTION IUFNBL (IV,JA,JE)
C
C CERN PROGLIB# M410    IUFNBL          .VERSION KERNFOR  3.06  780915
C ORIG. 15/09/78 JZ
C
      DIMENSION    IV(80)
      DATA  IBLANK /4H    /
C
C
      J  = JA
   12 IF (J.GT.JE)           GO TO 19
      IF (IV(J).NE.IBLANK)   GO TO 19
      J  = J + 1
      GO TO 12
C
   19 IUFNBL = J
      RETURN
      END
CDECK  ID>, IUFORW.
      FUNCTION IUFORW (IC,JL,JR)
C
C CERN PROGLIB# M410    IUFORW          .VERSION KERNFOR  4.23  891215
C ORIG. 27/05/67
C
      COMMON /SLATE/ ND,JEND, DUMMY(38)
      DIMENSION    IC(80)
 
      ND   = 0
      JEND = JL
      IVAL = 0
C
   12 IF (JEND.GT.JR)        GO TO 20
      K = AND (IC(JEND),255)
      IF (K.EQ.32)           GO TO 19
      IF (K.GE.58)           GO TO 20
      K = K - 48
      IF (K.LT.0)            GO TO 20
      IVAL = 10*IVAL + K
      ND   = ND + 1
   19 JEND = JEND + 1
      GO TO 12
C
   20 IUFORW = IVAL
      RETURN
      END
CDECK  ID>, IULAST.
      FUNCTION IULAST (ITEXT,IC,N)
C
C CERN PROGLIB# V305    IULAST          .VERSION KERNFOR  4.19  880728
C ORIG. 01/08/69
C
      DIMENSION IC(80)
C
      J =    N
      IF (J.EQ.0) GO TO 20
C
      DO 17  J=N,1,-1
      IF (IC(J).NE.ITEXT)  GO TO 20
   17 CONTINUE
      J = 0
C
   20 IULAST= J
      RETURN
      END
CDECK  ID>, IUNEXT.
      FUNCTION IUNEXT (IVEC,N)
C
C CERN PROGLIB# M410    IUNEXT          .VERSION KERNFOR  4.08  840613
C ORIG. 27/05/67
C
      DIMENSION IVEC(80)
      DATA  IBLANK /4H     /
C
C
      J= N
   10 IF (IVEC(J).NE.IBLANK)  GO TO 12
      J= J + 1
      GO TO 10
C
   12 IUNEXT= J
      RETURN
      END
CDECK  ID>, IUSAME.
      FUNCTION IUSAME (IA,JST,N,MIN,JSAME)
C
C CERN PROGLIB# M501    IUSAME          .VERSION KERNFOR  1.0   710701
C ORIG. 01/07/71 CL
C
      DIMENSION IA(*)
C
C
      J  = JST
   21 NSM= 0
      JSM= J
C
   24 NSM= NSM + 1
      IF (J.EQ.N)  GO TO 31
      J = J + 1
      IF (IA(J).EQ.IA(J-1))  GO TO 24
C
      IF (NSM.LT.MIN)  GO TO 21
      GO TO 32
C
   31 IF (NSM.GE.MIN)  GO TO 32
      NSM= 0
      JSM= N + 1
   32 IUSAME=NSM
      JSAME= JSM
      RETURN
      END
CDECK  ID>, JBIT.
      FUNCTION JBIT (IZW,IZP)
C
C CERN PROGLIB# M421    JBIT            .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      JBIT = AND (ISHFT (IZW,-IZP+1), 1)
      RETURN
      END
CDECK  ID>, JBYT.
      FUNCTION JBYT (IZW,IZP,NZB)
C
C CERN PROGLIB# M421    JBYT            .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
 
      JBYT = ISHFT (ISHFT (IZW,NBITPW+1-IZP-NZB),-NBITPW+NZB)
      RETURN
      END
CDECK  ID>, JBYTET.
      FUNCTION JBYTET (MZ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    JBYTET          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
 
      JBYTET = AND (MZ, ISHFT (ISHFT (IZW,NBITPW+1-IZP-NZB),
     +                          -NBITPW+NZB) )
      RETURN
      END
CDECK  ID>, JBYTOR.
      FUNCTION JBYTOR (MZ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    JBYTOR          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
 
      JBYTOR = OR (MZ, ISHFT (ISHFT (IZW,NBITPW+1-IZP-NZB),
     +                         -NBITPW+NZB) )
      RETURN
      END
CDECK  ID>, JRSBYT.
      FUNCTION JRSBYT (VAL,X,JTH,NBITS)
C
C CERN PROGLIB# M421    JRSBYT          .VERSION KERNFOR  4.07  830624
C ORIG. 03/05/72 JZ
C
      INTEGER   VAL, X
C
C
      JRSBYT= JBYT (X,JTH,NBITS)
      CALL SBYT (VAL,X,JTH,NBITS)
      RETURN
      END
CDECK  ID>, LNBLNK.
      FUNCTION LNBLNK (CHV)
C
C CERN PROGLIB# M432    LNBLNK          .VERSION KERNFOR  4.21  890323
C ORIG. 04/10/88, JZ
C
C-    Find last non-blank character in CHV
 
      CHARACTER    CHV*(*)
 
      N = LEN(CHV)
 
      DO 17  JJ= N,1,-1
      IF (CHV(JJ:JJ).NE.' ') GO TO 99
   17 CONTINUE
      JJ = 0
 
   99 LNBLNK = JJ
      RETURN
      END
CDECK  ID>, MBYTET.
      FUNCTION MBYTET (MZ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    MBYTET          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
 
      MBYTET = AND (IZW, NOT(ISHFT (ISHFT (NOT(MZ),NBITPW-NZB),
     +                                -NBITPW-1+IZP+NZB)) )
      RETURN
      END
CDECK  ID>, MBYTOR.
      FUNCTION MBYTOR (MZ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    MBYTOR          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
 
      MBYTOR = OR (IZW, ISHFT (ISHFT (MZ,NBITPW-NZB),
     +                          -NBITPW-1+IZP+NZB) )
      RETURN
      END
CDECK  ID>, MCBYT.
      FUNCTION MCBYT (MZ,IZQ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    MCBYT           .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      MCBYT = OR (
     +  AND(IZW, NOT(ISHFT (ISHFT (IALL11,-NBITPW+NZB), IZP-1)))
     +, ISHFT (ISHFT (ISHFT (MZ,-IZQ+1),NBITPW-NZB),-NBITPW-1+IZP+NZB))
      RETURN
      END
CDECK  ID>, MSBIT.
      FUNCTION MSBIT (MZ,IZW,IZP)
C
C CERN PROGLIB# M421    MSBIT           .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      MSBIT = OR (AND (IZW, NOT(ISHFT (1,IZP-1)) )
     +,            ISHFT (AND(MZ,1),IZP-1) )
      RETURN
      END
CDECK  ID>, MSBIT0.
      FUNCTION MSBIT0 (IZW,IZP)
C
C CERN PROGLIB# M421    MSBIT0          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      MSBIT0 = AND (IZW, NOT(ISHFT (1,IZP-1)))
      RETURN
      END
CDECK  ID>, MSBIT1.
      FUNCTION MSBIT1 (IZW,IZP)
C
C CERN PROGLIB# M421    MSBIT1          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      MSBIT1 = OR (IZW, ISHFT (1,IZP-1))
      RETURN
      END
CDECK  ID>, MSBYT.
      FUNCTION MSBYT (MZ,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    MSBYT           .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      MSBYT = OR (
     +     AND(IZW, NOT(ISHFT (ISHFT (IALL11,-NBITPW+NZB),IZP-1)))
     +,    ISHFT (ISHFT (MZ,NBITPW-NZB),-NBITPW-1+IZP+NZB) )
      RETURN
      END
CDECK  ID>, PKBYT.
      SUBROUTINE PKBYT (MIV,MBV,JTHP,NINTP,NBITS)
C
C CERN PROGLIB# M422    PKBYT           .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
C
      DIMENSION    MIV(99), MBV(99), JTHP(9), NINTP(9), NBITS(2)
 
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      JTH  = JTHP(1)
      NINT = NINTP(1)
      IF (NINT.LE.0)         RETURN
 
      NZB  = NBITS(1)
      IF (NZB.GT.0)          GO TO 11
      NZB  = 1
      NPWD = NBITPW
      MSKA = 1
      GO TO 12
 
   11 NPWD = NBITS(2)
      MSKA = ISHFT  (IALL11,-NBITPW+NZB)
 
   12 JBV  = 1
      JIV  = 0
      IF (JTH.LT.2)          GO TO 21
      JBV  = (JTH-1)/NPWD + 1
      JPOS = JTH - (JBV-1)*NPWD - 1
      IF (JPOS.EQ.0)         GO TO 21
      NL   = JPOS*NZB
      MSKU = ISHFT  (MSKA,NL)
      JIVE = NPWD - JPOS
      GO TO 22
 
C--                PACK EACH WORD
 
   21 NL   = 0
      MSKU = MSKA
      JIVE = JIV + NPWD
   22 JIVE = MIN (NINT,JIVE)
      IZW  = MBV(JBV)
 
   24 JIV  = JIV + 1
      IZW  = OR (AND(NOT(MSKU),IZW),
     +           AND(MSKU,ISHFT (MIV(JIV),NL)))
      IF (JIV.EQ.JIVE)       GO TO 27
      NL   = NL + NZB
      MSKU = ISHFT  (MSKU,NZB)
      GO TO 24
 
   27 MBV(JBV) = IZW
      IF (JIV.EQ.NINT)       RETURN
      JBV  = JBV + 1
      GO TO 21
      END
CDECK  ID>, PKCHAR.
      SUBROUTINE PKCHAR (IGV,ICHV,NN,IPAR)
C
C CERN PROGLIB# M427    PKCHAR          .VERSION KERNFOR  4.20  881028
C ORIG. 07/07/72 JZ
C
      COMMON /SLATE/ JCH,N,NBITS,NCHAR,NZONE,IGNOR,JIN,NBDONE,NBEND
     +,              JGO,JBT,NLEFT,NRIGH,DUMMY(27)
      DIMENSION ICHV(*),IGV(*),IPAR(9)
C                .
C
      PARAMETER   (NBITPW=32)
C
C
      N = NN
      IF (N.EQ.0)  RETURN
      NBITS = IPAR(1)
      NCHAR = IPAR(2)
      NZONE = IPAR(3)
      IGNOR = IPAR(4)
      NFILL = IPAR(5)
      JIN = 1
      JCH = 1
      ICHV(1)= NFILL
      IF (NZONE.NE.0)  GO TO 41
C
C----              ZONE = WORD
C
   21 JGO  = NBITPW+1 - IGNOR
      NBEND= NBITS + 1
      IF (NCHAR.EQ.0)  GO TO 22
      NBEND = MAX (NBEND,JGO-NBITS*(NCHAR-1))
C
   22 JBT = JGO
C
   24 JBT = JBT - NBITS
      CALL SBYT (IGV(JIN),ICHV(JCH),JBT,NBITS)
      IF (JIN.EQ.N)  RETURN
      JIN = JIN + 1
      IF (JBT.GE.NBEND)  GO TO 24
      JCH = JCH + 1
      ICHV(JCH)= NFILL
      GO TO 22
C
C----              ZONE NOT EQUALS A WORD
C
   41 IF (NZONE.EQ.NBITPW)  GO TO 21
      JBT   = NBITPW - IGNOR
      NBEND = NZONE+1 - NBITS
      IF (NCHAR.EQ.0)  GO TO 42
      NBEND = MIN (NBEND, IGNOR+NCHAR*NBITS)
C
   42 NBDONE= IGNOR
   43 IF (JBT.GE.0)  GO TO 44
      JBT= JBT + NBITPW
      JCH= JCH + 1
      ICHV(JCH)= NFILL
      GO TO 43
C
   44 JBT = JBT - NBITS
      IF (JBT.LT.0)  GO TO 51
      CALL SBYT (IGV(JIN),ICHV(JCH),JBT+1,NBITS)
      GO TO 58
C
C--                CHARACTER ACROSS WORD BOUNDARY
   51 NLEFT= NBITS + JBT
      NRIGH= -JBT
      JBT  = JBT + NBITPW
      IF (NLEFT.EQ.0)  GO TO 54
      CALL CBYT (IGV(JIN),NRIGH+1,ICHV(JCH),1,NLEFT)
   54 JCH= JCH + 1
      ICHV(JCH)= NFILL
      CALL SBYT (IGV(JIN),ICHV(JCH),JBT+1,NRIGH)
C
   58 IF (JIN.EQ.N)  RETURN
      JIN= JIN + 1
      NBDONE= NBDONE + NBITS
      IF (NBDONE.LT.NBEND)  GO TO 44
      JBT = JBT - (NZONE-NBDONE) - IGNOR
      GO TO 42
      END
CDECK  ID>, SBIT.
      SUBROUTINE SBIT (IT,IZW,IZP)
C
C CERN PROGLIB# M421    SBIT            .VERSION KERNFOR  4.23  891215
C MOD. true default 24/2/89, JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      IZW = OR ( AND (IZW, NOT(ISHFT (1,IZP-1)))
     +,           ISHFT (AND(IT,1), IZP-1) )
      RETURN
      END
CDECK  ID>, SBIT0.
      SUBROUTINE SBIT0 (IZW,IZP)
C
C CERN PROGLIB# M421    SBIT0           .VERSION KERNFOR  4.23  891215
C MOD. true default 24/2/89, JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      IZW = AND (IZW, NOT(ISHFT (1,IZP-1)) )
      RETURN
      END
CDECK  ID>, SBIT1.
      SUBROUTINE SBIT1 (IZW,IZP)
C
C CERN PROGLIB# M421    SBIT1           .VERSION KERNFOR  4.23  891215
C MOD. true default 24/2/89, JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
 
 
      IZW = OR (IZW, ISHFT (1,IZP-1))
      RETURN
      END
CDECK  ID>, SBYT.
      SUBROUTINE SBYT (IT,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    SBYT            .VERSION KERNFOR  4.23  891215
C MOD. true default 24/2/89, JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
C
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      MSK = ISHFT  (IALL11,-NBITPW+NZB)
      IZW = OR ( AND (IZW, NOT(ISHFT (MSK,IZP-1)))
     +,           ISHFT (AND(IT,MSK),IZP-1))
      RETURN
      END
CDECK  ID>, SBYTOR.
      SUBROUTINE SBYTOR (IT,IZW,IZP,NZB)
C
C CERN PROGLIB# M421    SBYTOR          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
C
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      IZW = OR (IZW,
     +      ISHFT  (AND(IT,ISHFT (IALL11,-NBITPW+NZB)), IZP-1))
      RETURN
      END
CDECK  ID>, TRACEQ.
      SUBROUTINE TRACEQ (LUNP,LEV)
C
C CERN PROGLIB# N105    TRACEQ          .VERSION KERNFOR  4.23  891215
C ORIG.  4/01/89  JZ
C
      PARAMETER    (LUNSTP=6)
 
      LUN = LUNP
      IF (LUN.EQ.0)  LUN = LUNSTP
      WRITE (LUN,9001)
      RETURN
 9001 FORMAT ('0TRACEQ.  In-line trace-back still not available.')
      END
CDECK  ID>, UBLANK.
      SUBROUTINE UBLANK (IV,JL,JR)
C
C CERN PROGLIB# V300    UBLANK          .VERSION KERNFOR  4.08  840613
C ORIG. 01/01/65 JZ
C
      DIMENSION IV(80)
      DATA IBL     /4H     /
C
C
      DO 29 J=JL,JR
   29 IV(J)= IBL
      RETURN
      END
CDECK  ID>, UCOPIV.
      SUBROUTINE UCOPIV (A,B,N)
C
C CERN PROGLIB# V301    UCOPIV          .VERSION KERNFOR  1.0   710701
C ORIG. 01/07/71
C
      DIMENSION A(*), B(*)
C
      IF (N.EQ.0) RETURN
      I = N
      DO 12 J=1,N
      B(I)= A(J)
   12 I = I - 1
      RETURN
      END
CDECK  ID>, UCOPY.
      SUBROUTINE UCOPY (A,B,N)
C
C CERN PROGLIB# V301    UCOPY           .VERSION KERNFOR  1.0   710701
C ORIG. 01/01/65 JZ
C
      DIMENSION A(*),B(*)
C
C--                NO OVERLAP  OR  BEGINNING OF A ON END OF B
      IF (N.EQ.0) RETURN
         DO 21 I=1,N
   21 B(I)=A(I)
      RETURN
      END
CDECK  ID>, UCOPY2.
      SUBROUTINE UCOPY2 (A,B,N)
C
C CERN PROGLIB# V301    UCOPY2          .VERSION KERNFOR  4.26  910313
C ORIG.  01/01/68
C MODIF. 26/02/91 JZ correct for bug in SGI
C
      DIMENSION A(*),B(*)
C
C
      IF (N.LT.2)            GO TO 41
      IA = LOCF (A)
      IB = LOCF (B)
      IF   (IA-IB)           20,99,10
C
C--                End of B may overlap beginning of A
   10 DO 15 I=1,N
   15 B(I) = A(I)
      RETURN
C
C--                End of A may overlap with beginning of B
   20 DO 25 I=N,1,-1
   25 B(I) = A(I)
      RETURN
 
C--                Case N=1, gives trouble on SGI
 
   41 IF (N.LE.0)            RETURN
      B(1) = A(1)
   99 RETURN
      END
CDECK  ID>, UCTOH1.
      SUBROUTINE UCTOH1 (MS,MT,NCH)
C
C CERN PROGLIB# M409    UCTOH1          .VERSION KERNFOR  4.21  890323
C ORIG. 10/02/89  JZ
C
      CHARACTER    MS*99
      DIMENSION    MT(99)
 
      PARAMETER   (NCHAPW=4)
      CHARACTER    CHWORD*(NCHAPW)
      CHARACTER    BLANK *(NCHAPW)
      PARAMETER   (BLANK = ' ')
      INTEGER      IWORD
      EQUIVALENCE (IWORD,CHWORD)
 
 
      IF   (NCH)             91, 29, 11
 
   11 CHWORD = BLANK
 
      DO 24 JS=1,NCH
      CHWORD(1:1) = MS(JS:JS)
      MT(JS)      = IWORD
   24 CONTINUE
   29 RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, UCTOH.
      SUBROUTINE UCTOH (MS,MT,NPW,NCH)
C
C CERN PROGLIB# M409    UCTOH           .VERSION KERNFOR  4.21  890323
C ORIG. 10/02/89  JZ
C
      CHARACTER    MS*99
      DIMENSION    MT(99)
 
      PARAMETER   (NCHAPW=4)
      CHARACTER    CHWORD*(NCHAPW)
      CHARACTER    BLANK *(NCHAPW)
      PARAMETER   (BLANK = ' ')
      INTEGER      IWORD
      EQUIVALENCE (IWORD,CHWORD)
 
 
      IF   (NCH)             91, 29, 11
   11 IF (NPW.LE.0)          GO TO 91
      IF (NPW.EQ.1)          GO TO 21
      IF (NPW.LT.NCHAPW)     GO TO 31
 
C--------          NPW = maximum
 
      JS     = 0
      NWT    = NCH / NCHAPW
      NTRAIL = NCH - NWT*NCHAPW
 
      DO 14  JT=1,NWT
      CHWORD = MS(JS+1:JS+NCHAPW)
      MT(JT) = IWORD
   14 JS     = JS + NCHAPW
 
      IF (NTRAIL.EQ.0)       RETURN
 
      CHWORD    = MS(JS+1:JS+NTRAIL)
      MT(NWT+1) = IWORD
      RETURN
 
C--------          NPW = 1
C--                equivalent to 'CALL UCTOH1(MS,MT,NCH)'
 
   21 CHWORD = BLANK
 
      DO 24 JS=1,NCH
      CHWORD(1:1) = MS(JS:JS)
      MT(JS)      = IWORD
   24 CONTINUE
   29 RETURN
 
C--------          NPW = 2 ...
 
   31 CHWORD = BLANK
 
      JS     = 0
      NWT    = NCH / NPW
      NTRAIL = NCH - NWT*NPW
 
      DO 34  JT=1,NWT
      CHWORD(1:NPW) = MS(JS+1:JS+NPW)
      MT(JT) = IWORD
   34 JS     = JS + NPW
 
      IF (NTRAIL.EQ.0)       RETURN
 
      CHWORD    = MS(JS+1:JS+NTRAIL)
      MT(NWT+1) = IWORD
      RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, UH1TOC.
      SUBROUTINE UH1TOC (MS,MT,NCH)
C
C CERN PROGLIB# M409    UH1TOC          .VERSION KERNFOR  4.21  890323
C ORIG. 10/02/89  JZ
C
      DIMENSION    MS(99)
      CHARACTER    MT*99
 
      PARAMETER   (NCHAPW=4)
      CHARACTER    CHWORD*(NCHAPW)
      INTEGER      IWORD
      EQUIVALENCE (IWORD,CHWORD)
 
 
      IF   (NCH)             91, 29, 11
 
   11 DO 24  JS=1,NCH
      IWORD  = MS(JS)
      MT(JS:JS) = CHWORD(1:1)
   24 CONTINUE
   29 RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, UHTOC.
      SUBROUTINE UHTOC (MS,NPW,MT,NCH)
C
C CERN PROGLIB# M409    UHTOC           .VERSION KERNFOR  4.21  890323
C ORIG. 10/02/89  JZ
C
      DIMENSION    MS(99)
      CHARACTER    MT*99
 
      PARAMETER   (NCHAPW=4)
      CHARACTER    CHWORD*(NCHAPW)
      INTEGER      IWORD
      EQUIVALENCE (IWORD,CHWORD)
 
 
      IF   (NCH)             91, 29, 11
   11 IF (NPW.LE.0)          GO TO 91
      IF (NPW.EQ.1)          GO TO 21
      IF (NPW.LT.NCHAPW)     GO TO 31
 
C--------          NPW = maximum
 
      JT     = 0
      NWS    = NCH / NCHAPW
      NTRAIL = NCH - NWS*NCHAPW
 
      DO 14  JS=1,NWS
      IWORD  = MS(JS)
      MT(JT+1:JT+NCHAPW) = CHWORD
   14 JT  = JT + NCHAPW
 
      IF (NTRAIL.EQ.0)       RETURN
 
      IWORD = MS(NWS+1)
      MT(JT+1:JT+NTRAIL) = CHWORD(1:NTRAIL)
      RETURN
 
C--------          NPW = 1
C--                equivalent to 'CALL UH1TOC(MS,MT,NCH)'
 
   21 DO 24  JS=1,NCH
      IWORD  = MS(JS)
      MT(JS:JS) = CHWORD(1:1)
   24 CONTINUE
   29 RETURN
 
C--------          NPW = 2 ...
 
   31 JT     = 0
      NWS    = NCH / NPW
      NTRAIL = NCH - NWS*NPW
 
      DO 34  JS=1,NWS
      IWORD  = MS(JS)
      MT(JT+1:JT+NPW) = CHWORD(1:NPW)
   34 JT  = JT + NPW
 
      IF (NTRAIL.EQ.0)       RETURN
 
      IWORD = MS(NWS+1)
      MT(JT+1:JT+NTRAIL) = CHWORD(1:NTRAIL)
      RETURN
 
   91 CALL ABEND
      END
CDECK  ID>, ULEFT.
      SUBROUTINE ULEFT (IC,JL,JR)
C
C CERN PROGLIB# M410    ULEFT           .VERSION KERNFOR  4.08  840613
C ORIG. 27/05/67
C
      COMMON /SLATE/NC,JP, DUMMY(38)
      DIMENSION IC(80)
      DATA  IBLANK / 4H     /
C
      JP= JL
      JT= JL
      NC= 0
C
   12 IF (JT.GT.JR)  RETURN
      IF (IC(JT).EQ.IBLANK)  GO TO 19
      IF (JP.EQ.JT)  GO TO 17
      IC (JP)= IC(JT)
      IC (JT)= IBLANK
   17 NC= NC+1
      JP= JP+1
   19 JT= JT+1
      GO TO 12
      END
CDECK  ID>, UOPT.
      SUBROUTINE UOPT (DATA,POSS,IOPT,NP)
C
C CERN PROGLIB# M502    UOPT            .VERSION KERNFOR  4.18  880425
C ORIG. 01/08/71
C
      COMMON /SLATE/IP(30),ID(10)
      DIMENSION DATA(9), POSS(9), IOPT(9)
      PARAMETER   (NCHAPW=4)
C
C
      CALL UBLOW (POSS,IP,NP)
      CALL VZERO (IOPT,NP)
      L   = 1
C
   21 CALL UBLOW (DATA(L),ID,NCHAPW)
C
      DO 24 I=1,NCHAPW
      J = IUCOMP (ID(I),IP,NP)
      IF (J.EQ.0)  RETURN
   24 IOPT(J)= 1
      L = L + 1
      GO TO 21
      END
CDECK  ID>, UPKBYT.
      SUBROUTINE UPKBYT (MBV,JTHP,MIV,NINTP,NBITS)
C
C CERN PROGLIB# M422    UPKBYT          .VERSION KERNFOR  4.23  891215
C ORIG. 13/03/89  JZ
C
C     This non-ANSI code is a default which may be slow, if so
C     it should be replaced by a machine-specific fast routine
C
      DIMENSION    MIV(99), MBV(99), JTHP(9), NINTP(9), NBITS(2)
 
      PARAMETER   (NBITPW=32)
      PARAMETER   (IALL11 = -1)
 
      JTH  = JTHP(1)
      NINT = NINTP(1)
      IF (NINT.LE.0)         RETURN
 
      NZB  = NBITS(1)
      IF (NZB.GT.0)          GO TO 11
      NZB  = 1
      NPWD = NBITPW
      MSKA = 1
      GO TO 12
 
   11 NPWD = NBITS(2)
      MSKA = ISHFT  (IALL11,-NBITPW+NZB)
 
   12 JBV  = 1
      JIV  = 0
      IF (JTH.LT.2)          GO TO 21
      JBV  = (JTH-1)/NPWD + 1
      JPOS = JTH - (JBV-1)*NPWD - 1
      IF (JPOS.EQ.0)         GO TO 21
      NR   = JPOS*NZB
      JIVE = NPWD - JPOS
      IZW  = ISHFT  (MBV(JBV),-NR)
      GO TO 22
 
C--                UNPACK EACH WORD
 
   21 JIVE = JIV + NPWD
      IZW  = MBV(JBV)
   22 JIVE = MIN (NINT,JIVE)
 
   24 JIV  = JIV + 1
      MIV(JIV) = AND (MSKA,IZW)
      IF (JIV.EQ.JIVE)       GO TO 27
      IZW  = ISHFT  (IZW,-NZB)
      GO TO 24
 
   27 IF (JIV.EQ.NINT)       RETURN
      JBV  = JBV + 1
      GO TO 21
      END
CDECK  ID>, UPKCH.
      SUBROUTINE UPKCH (ICHV,IGV,NN,IPAR)
C
C CERN PROGLIB# M427    UPKCH           .VERSION KERNFOR  4.20  881028
C ORIG. 07/07/72 JZ
C
      COMMON /SLATE/ JCH,N,NBITS,NCHAR,NZONE,IGNOR,JIN,NBDONE,NBEND
     +,              JGO,JBT,NLEFT,NRIGH,DUMMY(27)
      DIMENSION ICHV(*),IGV(*),IPAR(9)
C                  .
C
      PARAMETER   (NBITPW=32)
C
C
C
      N = NN
      IF (N.EQ.0)  RETURN
      NBITS = IPAR(1)
      NCHAR = IPAR(2)
      NZONE = IPAR(3)
      IGNOR = IPAR(4)
      JIN = 1
      JCH = 1
      IF (NZONE.NE.0)  GO TO 41
C
C----              ZONE = WORD
C
   21 JGO  = NBITPW+1 - IGNOR
      NBEND= NBITS + 1
      IF (NCHAR.EQ.0)  GO TO 22
      NBEND= MAX (NBEND, JGO-NBITS*(NCHAR-1))
C
   22 JBT = JGO
C
   24 JBT = JBT - NBITS
      IGV(JIN)= JBYT (ICHV(JCH),JBT,NBITS)
      IF (JIN.EQ.N)  RETURN
      JIN = JIN + 1
      IF (JBT.GE.NBEND)  GO TO 24
      JCH = JCH + 1
      GO TO 22
C
C----              ZONE NOT EQUALS A WORD
C
   41 IF (NZONE.EQ.NBITPW)  GO TO 21
      JBT   = NBITPW - IGNOR
      NBEND = NZONE+1 - NBITS
      IF (NCHAR.EQ.0)  GO TO 42
      NBEND = MIN (NBEND, IGNOR+NCHAR*NBITS)
C
   42 NBDONE= IGNOR
   43 IF (JBT.GE.0)  GO TO 44
      JBT= JBT + NBITPW
      JCH= JCH + 1
      GO TO 43
C
   44 JBT = JBT - NBITS
      IF (JBT.LT.0)  GO TO 51
      IGV(JIN)= JBYT (ICHV(JCH),JBT+1,NBITS)
      GO TO 58
C
C--                CHARACTER ACROSS WORD BOUNDARY
   51 NLEFT= NBITS + JBT
      NRIGH= -JBT
      JBT  = JBT + NBITPW
      IGV(JIN)= JBYT (ICHV(JCH+1),JBT+1,NRIGH)
      IF (NLEFT.EQ.0)  GO TO 54
      CALL CBYT (ICHV(JCH),1,IGV(JIN),NRIGH+1,NLEFT)
   54 JCH= JCH + 1
C
   58 IF (JIN.EQ.N)  RETURN
      JIN= JIN + 1
      NBDONE= NBDONE + NBITS
      IF (NBDONE.LT.NBEND)  GO TO 44
      JBT = JBT - (NZONE-NBDONE) - IGNOR
      GO TO 42
      END
CDECK  ID>, USET.
      SUBROUTINE USET (INT,IC,JL,JR)
C
C CERN PROGLIB# M410    USET            .VERSION KERNFOR  4.08  840613
C ORIG. 15/03/68
C
      COMMON/SLATE/ND,JEND,DUMMY(38)
      DIMENSION IC(80),NUM(11)
      DATA  NUM   /4H    ,4H0   ,4H1   ,4H2   ,4H3   ,4H4   ,4H5   ,
     +                           4H6   ,4H7   ,4H8   ,4H9    /
C
      ND=0
      JEND=JR
      IVAL=INT
C
   12 IF (JEND.LT.JL) RETURN
      K=MOD (IVAL,10)
      IC(JEND)=NUM(K+2)
      ND=ND+1
      JEND=JEND-1
      IVAL=IVAL/10
      IF (IVAL.GE.1) GO TO 12
      RETURN
      END
CDECK  ID>, UTRANS.
      SUBROUTINE UTRANS (AI,AJ,NCH,IP,JP)
C
C CERN PROGLIB# M409    UTRANS          .VERSION KERNFOR  4.18  880425
C ORIG. 15/09/78 JZ
C
      COMMON /SLATE/ NI, NJ, MM(38)
C
      DIMENSION    AI(9), AJ(9), NCH(9), IP(9), JP(9)
C
      PARAMETER   (NCHAPW=4)
C
      NI   = 0
      NJ   = 0
      NCHL = NCH(1)
      IF (NCHL.LE.0)         RETURN
      NCHI = MIN (IP(1), NCHAPW)
      NCHJ = MIN (JP(1), NCHAPW)
      IF (NCHI-NCHJ)         31,41,21
C
C----              DISPERSION TO A1
C
   21 IF (NCHJ.NE.1)         GO TO 41
C
   24 N  = MIN (NCHL, NCHI)
      NI = NI + 1
      CALL UBLOW (AI(NI),AJ(NJ+1),N)
      NJ   = NJ   + N
      NCHL = NCHL - N
      IF (NCHL.NE.0)         GO TO 24
      RETURN
C
C----              CONCENTRATION FROM A1
C
   31 IF (NCHI.NE.1)         GO TO 41
C
   34 N  = MIN (NCHL, NCHJ)
      NJ = NJ + 1
      CALL UBUNCH (AI(NI+1),AJ(NJ),N)
      NI   = NI   + N
      NCHL = NCHL - N
      IF (NCHL.NE.0)         GO TO 34
      RETURN
C
C----              TRANSFORMATION AI TO AJ
C
   41 JA = 0
      JE = 0
   42 N  = MIN (NCHL, NCHJ)
      IF (JA+N.LE.JE)        GO TO 47
      IF (JA.NE.JE)          GO TO 43
      JA = 1
      JE = 1
      GO TO 44
C
   43 IF (JE+NCHI.LT.40)     GO TO 44
      NT = JE - JA
      CALL UCOPY (MM(JA),MM(1),NT)
      JA = 1
      JE = NT + 1
C
   44 NI = NI + 1
      CALL UBLOW (AI(NI),MM(JE),NCHI)
      JE = JE + NCHI
      IF (JA+N.GT.JE)        GO TO 43
C
   47 NJ = NJ + 1
      CALL UBUNCH (MM(JA),AJ(NJ),N)
      JA   = JA   + N
      NCHL = NCHL - N
      IF (NCHL.NE.0)         GO TO 42
      RETURN
      END
CDECK  ID>, VBLANK.
      SUBROUTINE VBLANK (A,N)
C
C CERN PROGLIB# F121    VBLANK          .VERSION KERNFOR  4.08  840613
C ORIG. 01/07/71
C
      INTEGER      A(*), BLANK
      DATA  BLANK  / 4H     /
C
      IF (N.LE.0)  RETURN
      DO 9 I= 1,N
    9 A(I)= BLANK
      RETURN
      END
CDECK  ID>, VFILL.
      SUBROUTINE VFILL (A,N,STUFF)
C
C CERN PROGLIB# F121    VFILL           .VERSION KERNFOR  1.0   710701
C ORIG. 01/07/71
C
      DIMENSION A(*)
C
      IF (N.LE.0)  RETURN
      DO 9 I= 1,N
    9 A(I)= STUFF
C
      RETURN
      END
CDECK  ID>, VZERO.
      SUBROUTINE VZERO (IA,N)
C
C CERN PROGLIB# F121    VZERO           .VERSION KERNFOR  4.16  870601
C ORIG. 01/07/71, modif. 24/05/87 to set integer zero
C
      DIMENSION IA(*)
C
      IF (N.LE.0)  RETURN
      DO 9 I= 1,N
    9 IA(I)= 0
C
      RETURN
      END
CDECK  ID>, VIZPRI.
      SUBROUTINE VIZPRI (LUNP,TEXT)
C
C CERN PROGLIB# J200    VIZPRI          .VERSION KERNFOR  4.22  890913
C ORIG. 20/07/89, JZ
C
C-    Visual printing of TEXT
 
      PARAMETER   (MXTEXT=9)
      PARAMETER   (MXCHAR=14*MXTEXT)
      CHARACTER    TEXT*(*)
      CHARACTER    LINE*(MXCHAR)
      CHARACTER    CHLINE(MXCHAR)*1
      EQUIVALENCE (CHLINE(1),LINE(1:1))
 
      DIMENSION    MTRAN(MXTEXT), MBITS(12)
      CHARACTER    CHT*1
 
      PARAMETER    (LUNSTP=6)
      INTEGER      MPAT(12,93)
      DATA (MPAT(J, 1),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J, 2),J=1,12) /  96,  96,  96,  96,  96,  96,
     +                            96,  96,   0,   0,  96,  96 /
      DATA (MPAT(J, 3),J=1,12) / 408, 408, 408,   0,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J, 4),J=1,12) / 408, 408, 408,4095,4095, 408,
     +                           408,4095,4095, 408, 408, 408 /
      DATA (MPAT(J, 5),J=1,12) /  96,2046,3687,  99, 103,1022,
     +                          2044,3680,3168,3687,2046,  96 /
      DATA (MPAT(J, 6),J=1,12) /   0,1564, 788, 412, 192,  96,
     +                            48,  24, 460, 326, 451,   0 /
      DATA (MPAT(J, 7),J=1,12) / 120, 252, 204, 204, 252, 120,
     +                          3324,3526,1923,1795,4095,3326 /
      DATA (MPAT(J, 8),J=1,12) /  96,  96,  96,   0,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J, 9),J=1,12) / 448,  96,  48,  48,  24,  24,
     +                            24,  24,  48,  48,  96, 448 /
      DATA (MPAT(J,10),J=1,12) /  56,  96, 192, 192, 384, 384,
     +                           384, 384, 192, 192,  96,  56 /
      DATA (MPAT(J,11),J=1,12) /  96,1638,1902,1020, 504,4095,
     +                          4095, 504,1020,1902,1638,  96 /
      DATA (MPAT(J,12),J=1,12) /   0,  96,  96,  96,  96,2046,
     +                          2046,  96,  96,  96,  96,   0 /
      DATA (MPAT(J,13),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,   0,   0,   0,  96,  48 /
      DATA (MPAT(J,14),J=1,12) /   0,   0,   0,   0,   0,2046,
     +                          2046,   0,   0,   0,   0,   0 /
      DATA (MPAT(J,15),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,   0,   0,   0,  96,  96 /
      DATA (MPAT(J,16),J=1,12) /   0,1536, 768, 384, 192,  96,
     +                            48,  24,  12,   6,   3,   0 /
      DATA (MPAT(J,17),J=1,12) /1020,2046,3075,3075,3075,3075,
     +                          3075,3075,3075,3075,2046,1020 /
      DATA (MPAT(J,18),J=1,12) /  96, 112, 120,  96,  96,  96,
     +                            96,  96,  96,  96,2046,2046 /
      DATA (MPAT(J,19),J=1,12) /2046,4095,3075,3072,3072,1536,
     +                           384,  96,  24,   6,4095,4095 /
      DATA (MPAT(J,20),J=1,12) /2046,4095,3075,3072,3072,1920,
     +                          1920,3072,3072,3075,4095,2046 /
      DATA (MPAT(J,21),J=1,12) / 448, 480, 432, 408, 396,4094,
     +                          4095, 384, 384, 384, 384, 384 /
      DATA (MPAT(J,22),J=1,12) /4095,4095,   3,   3,   3, 511,
     +                          1023,1536,3072,3072,4095,2047 /
      DATA (MPAT(J,23),J=1,12) /2046,4095,3075,   3,   3,2047,
     +                          4095,3075,3075,3075,4095,2046 /
      DATA (MPAT(J,24),J=1,12) /4095,2047, 771, 384, 192,  96,
     +                            96,  96,  96,  96,  96,  96 /
      DATA (MPAT(J,25),J=1,12) /2046,4095,3075,3075,1542,1020,
     +                          1020,1542,3075,3075,4095,2046 /
      DATA (MPAT(J,26),J=1,12) /2046,4095,3075,3075,3075,4095,
     +                          4095,3072,3072,3075,4095,2046 /
      DATA (MPAT(J,27),J=1,12) /   0,   0,   0,  96,  96,   0,
     +                             0,  96,  96,   0,   0,   0 /
      DATA (MPAT(J,28),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,  96,   0,  96,  96,  48 /
      DATA (MPAT(J,29),J=1,12) / 384, 192,  96,  48,  24,  12,
     +                            12,  24,  48,  96, 192, 384 /
      DATA (MPAT(J,30),J=1,12) /   0,   0,   0,2046,2046,   0,
     +                             0,2046,2046,   0,   0,   0 /
      DATA (MPAT(J,31),J=1,12) /  24,  48,  96, 192, 384, 768,
     +                           768, 384, 192,  96,  48,  24 /
      DATA (MPAT(J,32),J=1,12) /2046,4095,3075,3072,3584,2016,
     +                           992,  96,  96,   0,  96,  96 /
      DATA (MPAT(J,33),J=1,12) /2046,4095,3075,3315,3579,3483,
     +                          3483,3571,4083,1795,  63,  62 /
      DATA (MPAT(J,34),J=1,12) /2046,4095,3075,3075,3075,4095,
     +                          4095,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,35),J=1,12) /2047,4095,3075,3075,1539,1023,
     +                          1023,1539,3075,3075,4095,2047 /
      DATA (MPAT(J,36),J=1,12) /2046,4095,3075,   3,   3,   3,
     +                             3,   3,   3,3075,4095,2046 /
      DATA (MPAT(J,37),J=1,12) / 511,1023,1539,3075,3075,3075,
     +                          3075,3075,3075,1539,1023, 511 /
      DATA (MPAT(J,38),J=1,12) /4095,4095,   3,   3,   3, 255,
     +                           255,   3,   3,   3,4095,4095 /
      DATA (MPAT(J,39),J=1,12) /4095,4095,   3,   3,   3, 255,
     +                           255,   3,   3,   3,   3,   3 /
      DATA (MPAT(J,40),J=1,12) /2046,4095,3075,   3,   3,   3,
     +                          3971,3971,3075,3075,4095,2046 /
      DATA (MPAT(J,41),J=1,12) /3075,3075,3075,3075,3075,4095,
     +                          4095,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,42),J=1,12) /2046,2046,  96,  96,  96,  96,
     +                            96,  96,  96,  96,2046,2046 /
      DATA (MPAT(J,43),J=1,12) /4092,4092, 192, 192, 192, 192,
     +                           192, 192, 195, 195, 255, 126 /
      DATA (MPAT(J,44),J=1,12) /3075,1539, 771, 387, 195, 127,
     +                           127, 195, 387, 771,1539,3075 /
      DATA (MPAT(J,45),J=1,12) /   3,   3,   3,   3,   3,   3,
     +                             3,   3,   3,   3,4095,4095 /
      DATA (MPAT(J,46),J=1,12) /3075,3591,3855,3483,3315,3171,
     +                          3075,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,47),J=1,12) /3075,3079,3087,3099,3123,3171,
     +                          3267,3459,3843,3587,3075,2051 /
      DATA (MPAT(J,48),J=1,12) /4095,4095,3075,3075,3075,3075,
     +                          3075,3075,3075,3075,4095,4095 /
      DATA (MPAT(J,49),J=1,12) /2047,4095,3075,3075,3075,4095,
     +                          2047,   3,   3,   3,   3,   3 /
      DATA (MPAT(J,50),J=1,12) /2046,4095,3075,3075,3075,3075,
     +                          3075,3267,3459,3843,2047,3582 /
      DATA (MPAT(J,51),J=1,12) /2047,4095,3075,3075,3075,4095,
     +                          2047, 195, 387, 771,1539,3075 /
      DATA (MPAT(J,52),J=1,12) /2046,4095,3075,   3,   7,1022,
     +                          2044,3584,3072,3075,4095,2046 /
      DATA (MPAT(J,53),J=1,12) /4095,4095,  96,  96,  96,  96,
     +                            96,  96,  96,  96,  96,  96 /
      DATA (MPAT(J,54),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3075,3075,3075,3075,4095,2046 /
      DATA (MPAT(J,55),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3075,1542, 780, 408, 240,  96 /
      DATA (MPAT(J,56),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3171,3315,3483,3855,3591,3075 /
      DATA (MPAT(J,57),J=1,12) /3075,3075,1542, 780, 408, 240,
     +                           240, 408, 780,1542,3075,3075 /
      DATA (MPAT(J,58),J=1,12) /3075,3075,1542, 780, 408, 240,
     +                            96,  96,  96,  96,  96,  96 /
      DATA (MPAT(J,59),J=1,12) /4095,4095,1536, 768, 384, 192,
     +                            96,  48,  24,  12,4094,4095 /
      DATA (MPAT(J,60),J=1,12) /1020,  12,  12,  12,  12,  12,
     +                            12,  12,  12,  12,  12,1020 /
      DATA (MPAT(J,61),J=1,12) /   0,   6,  12,  24,  48,  96,
     +                           192, 384, 768,1536,3072,   0 /
      DATA (MPAT(J,62),J=1,12) /1020, 768, 768, 768, 768, 768,
     +                           768, 768, 768, 768, 768,1020 /
      DATA (MPAT(J,63),J=1,12) /  96, 240, 408, 780,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J,64),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,   0,   0,   0,4095,4095 /
      DATA (MPAT(J,65),J=1,12) /  48,  96, 192,   0,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J,66),J=1,12) /2046,4095,3075,3075,3075,4095,
     +                          4095,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,67),J=1,12) /2047,4095,3075,3075,1539,1023,
     +                          1023,1539,3075,3075,4095,2047 /
      DATA (MPAT(J,68),J=1,12) /2046,4095,3075,   3,   3,   3,
     +                             3,   3,   3,3075,4095,2046 /
      DATA (MPAT(J,69),J=1,12) / 511,1023,1539,3075,3075,3075,
     +                          3075,3075,3075,1539,1023, 511 /
      DATA (MPAT(J,70),J=1,12) /4095,4095,   3,   3,   3, 255,
     +                           255,   3,   3,   3,4095,4095 /
      DATA (MPAT(J,71),J=1,12) /4095,4095,   3,   3,   3, 255,
     +                           255,   3,   3,   3,   3,   3 /
      DATA (MPAT(J,72),J=1,12) /2046,4095,3075,   3,   3,   3,
     +                          3971,3971,3075,3075,4095,2046 /
      DATA (MPAT(J,73),J=1,12) /3075,3075,3075,3075,3075,4095,
     +                          4095,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,74),J=1,12) /2046,2046,  96,  96,  96,  96,
     +                            96,  96,  96,  96,2046,2046 /
      DATA (MPAT(J,75),J=1,12) /4092,4092, 192, 192, 192, 192,
     +                           192, 192, 195, 195, 255, 126 /
      DATA (MPAT(J,76),J=1,12) /3075,1539, 771, 387, 195, 127,
     +                           127, 195, 387, 771,1539,3075 /
      DATA (MPAT(J,77),J=1,12) /   3,   3,   3,   3,   3,   3,
     +                             3,   3,   3,   3,4095,4095 /
      DATA (MPAT(J,78),J=1,12) /3075,3591,3855,3483,3315,3171,
     +                          3075,3075,3075,3075,3075,3075 /
      DATA (MPAT(J,79),J=1,12) /3075,3079,3087,3099,3123,3171,
     +                          3267,3459,3843,3587,3075,2051 /
      DATA (MPAT(J,80),J=1,12) /4095,4095,3075,3075,3075,3075,
     +                          3075,3075,3075,3075,4095,4095 /
      DATA (MPAT(J,81),J=1,12) /2047,4095,3075,3075,3075,4095,
     +                          2047,   3,   3,   3,   3,   3 /
      DATA (MPAT(J,82),J=1,12) /2046,4095,3075,3075,3075,3075,
     +                          3075,3267,3459,3843,2047,3582 /
      DATA (MPAT(J,83),J=1,12) /2047,4095,3075,3075,3075,4095,
     +                          2047, 195, 387, 771,1539,3075 /
      DATA (MPAT(J,84),J=1,12) /2046,4095,3075,   3,   7,1022,
     +                          2044,3584,3072,3075,4095,2046 /
      DATA (MPAT(J,85),J=1,12) /4095,4095,  96,  96,  96,  96,
     +                            96,  96,  96,  96,  96,  96 /
      DATA (MPAT(J,86),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3075,3075,3075,3075,4095,2046 /
      DATA (MPAT(J,87),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3075,1542, 780, 408, 240,  96 /
      DATA (MPAT(J,88),J=1,12) /3075,3075,3075,3075,3075,3075,
     +                          3171,3315,3483,3855,3591,3075 /
      DATA (MPAT(J,89),J=1,12) /3075,3075,1542, 780, 408, 240,
     +                           240, 408, 780,1542,3075,3075 /
      DATA (MPAT(J,90),J=1,12) /3075,3075,1542, 780, 408, 240,
     +                            96,  96,  96,  96,  96,  96 /
      DATA (MPAT(J,91),J=1,12) /4095,4095,1536, 768, 384, 192,
     +                            96,  48,  24,  12,4094,4095 /
      DATA (MPAT(J,92),J=1,12) /   0,   0,   0,   0,   0,   0,
     +                             0,   0,   0,   0,   0,   0 /
      DATA (MPAT(J,93),J=1,12) /  96,  96,  96,  96,  96,  96,
     +                            96,  96,  96,  96,  96,  96 /
 
 
      LUN = LUNP
      IF (LUN.EQ.0)  LUN = LUNSTP
 
      NTXL = MIN (MXTEXT, LEN(TEXT))
      IF (NTXL.LE.0)               GO TO 41
 
C----              Translate TEXT to table pointers
 
      DO 24  J=1,NTXL
      JV = ICHAR(TEXT(J:J))
      JV = MAX (JV-31, 1)
      IF (JV.GE.94)  JV = 1
   24 MTRAN(J) = JV
 
   26 IF (MTRAN(NTXL).EQ.1)  THEN
          IF (NTXL.EQ.1)           GO TO 41
          NTXL = NTXL - 1
          GO TO 26
        ENDIF
      NCHL = NTXL * 14
 
C-----             Print the 1+12+1 lines representing TEXT
 
      WRITE (LUN,9001)
 9001 FORMAT (1X)
 
      DO 39  JLN=1,12
      LINE(1:NCHL) = ' '
      JCH = 1
 
      DO 37  JTX=1,NTXL
      CHT = TEXT(JTX:JTX)
      JTB = MTRAN(JTX)
      CALL UPKBYT (MPAT(JLN,JTB),1,MBITS,12,0)
 
      JCH = JCH + 1
      DO 35  J=1,12
      IF (MBITS(J).NE.0)  CHLINE(JCH) = CHT
   35 JCH = JCH + 1
   37 JCH = JCH + 1
 
      N = LNBLNK (LINE(1:NCHL))
      WRITE (LUN,9037) LINE(1:N)
 9037 FORMAT (A)
 
   39 CONTINUE
      WRITE (LUN,9001)
      RETURN
 
C----              TEXT is empty
 
   41 DO 44 J=1,14
      WRITE (LUN,9001)
   44 CONTINUE
      RETURN
      END
/*DECK ID>, ISHFT. */
unsigned int ishft_(arg,len)
unsigned int *arg;
int *len;
{
/*
  Profides the value of the argument ARG with the bits shifted.
  Bits shifted out to the left or right are lost, and zeros are shifted
  in from the opposite end.      CNL 210
*/
     return((*len > 0)? *arg << *len: *arg >> (-*len));
}
