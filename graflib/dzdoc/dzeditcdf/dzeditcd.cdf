*
* $Id$
*
* $Log$
* Revision 1.1  1996/03/04 16:13:24  mclareni
* Initial revision
*
*
* This directory was created from dzdoc.car patch dzedef
/*
 * This file has been generated by the KUIP compiler.  Do NOT change it!
 *
 * KUIP version: 921023      Generation date: Wed Mar  2 15:23:03 1994
 
 *
 * Input file: DZEDITCD.CDF
 */
 
#if (!defined(F77_LCASE)) && (!defined(F77_UCASE)) && (!defined(F77_USCORE))
#  if defined(CRAY) || defined(IBM370) || defined(vms)
#    define F77_UCASE
#  else
#    if ( defined(apollo) || defined(__apollo) ) && defined(APOFTN)
#      define F77_LCASE
#    else
#      define F77_USCORE
#    endif
#  endif
#endif
 
typedef int     IntFunc();
typedef char** pCharFunc();
typedef void    SUBROUTINE();
#ifdef IBM370
#  pragma linkage(SUBROUTINE,FORTRAN)
#endif
 
typedef unsigned long KmPixmap; /* Pixmap from <X11/X.h>                   */
 typedef void *KmWidget;         /* Widget from <X11/Intrinsic.h>           */
 typedef void *KmCalldata;       /* XmAnyCallbackStruct from <Motif/Xm.h>   */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BRACT_OPEN = 0,               /*                                         */
   BRACT_ROOT = 1,               /*                                         */
   BRACT_CONT = 2,               /*                                         */
   BRACT_GRAF = 3                /*                                         */
 } BrActTag;                     /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BrActUpdate    = 0x01,        /* browser window has to be updated ('!')  */
   BrActSeparator = 0x02,        /* put separator in menu ('/')             */
   BrActToggle    = 0x04,        /* register as toggle button               */
   BrActToggleOn  = 0x08,        /* toggle state is on                      */
   BrActSensitive = 0x10         /* button is sensitive                     */
 } BrActFlag;                    /*                                         */
                                 /*                                         */
 typedef struct _BrAction {      /*                                         */
   struct _BrAction *next;       /* link to next action binding             */
   BrActFlag   flags;            /*                                         */
   char       *text;             /* text line in menu                       */
   char       *user_text;        /* user text overriding CDF text (malloced)*/
   char       *accel;            /* accelerator                             */
   char       *exec;             /* action commands                         */
   SUBROUTINE *call_F;           /* action routine                          */
   IntFunc    *call_C;           /* action function                         */
   BrActTag    tag;              /* for which window the action is defined  */
   struct _BrClass *class;       /* pointer to BrClass in case of open menu */
 } BrAction;                     /*                                         */
                                 /*                                         */
 typedef struct _BrClass {       /*                                         */
   struct _BrClass *next;        /* link to next browsable class            */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   SUBROUTINE *scan_km_F;        /* user function scanning the directory    */
   pCharFunc  *scan_km_C;        /* user function scanning the directory    */
   SUBROUTINE *scan_br_F;        /* user function scanning for browsables   */
   pCharFunc  *scan_br_C;        /* user function scanning for browsables   */
   BrAction   *root;             /* list of actions in root window          */
   BrAction   *open;             /* list of actions in open menu            */
 } BrClass;                      /*                                         */
                                 /*                                         */
 
typedef struct _KmIcon {        /*                                         */
  struct _KmIcon *next;         /* link to next icon                       */
  char       *name;             /* unique identifier name                  */
  int         width;            /* width of the pixmap                     */
  int         height;           /* height of the pixmap                    */
  char       *bitmap;           /* bitmap data                             */
  KmPixmap    pix;              /* filled in Motif part                    */
  KmPixmap    hi_pix;           /* high lighted pixmap                     */
 } KmIcon;                       /*                                         */
                                 /*                                         */
 typedef struct _KmClass {       /*                                         */
   struct _KmClass *next;        /* link to next object class               */
   int         is_dir;           /* flag if class has is a directory        */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   char       *big_icon;         /* name of the big icon                    */
   KmIcon     *bicon;            /* pointer to the big icon structure       */
   char       *sm_icon;          /* name of the small icon                  */
   KmIcon     *sicon;            /* pointer to the small icon structure     */
   SUBROUTINE *user_icon_F;      /* user function to return icon bitmap     */
   IntFunc    *user_icon_C;      /* user function to return icon bitmap     */
   BrAction   *cont;             /* list of actions in content window       */
   BrAction   *graf;             /* list of actions in graphics window      */
   int         obj_count;        /* number of objects in content window     */
 } KmClass;                      /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   KmButtSensitive       = 0x00, /* sensitive button                        */
   KmButtNonSensitive    = 0x01, /* non-sensitive button ('NS')             */
   KmButtToggleSensitive = 0x02, /* toggle-sensitive button ('TS')          */
   KmButtSensitivityMask = 0x03, /* mask for sensitivity type               */
   KmButtSeparator       = 0x04  /* put separator in menu ('/')             */
 } KmButtFlag;                   /*                                         */
                                 /*                                         */
 typedef struct _KmButton {      /*                                         */
   struct _KmButton *next;       /* button label or menu item               */
   char       *label;            /* button label or menu item               */
   char       *menu;             /* menu name or NULL for buttons           */
   KmButtFlag  flags;            /* sensitivity type etc.                   */
   SUBROUTINE *action_F;         /* Fortran routine called with (LABEL,MENU)*/
   IntFunc    *action_C;         /* C function called with (label,menu)     */
   KmWidget    widget;           /* Motif widget ID                         */
 } KmButton;                     /*                                         */
 
extern struct {                        /*
    */   /* indirect calls to avoid linking HIGZ
    */   IntFunc    *graf_info_C;      /* pass display, open and close
 (ixmotif)  */   SUBROUTINE *graf_size_F;      /* resize window (IGRSIZ)
            */   SUBROUTINE *graf_pick_F;      /* identifying graphics objects
 (IGOBJ)    */   SUBROUTINE *graf_attr_F;      /* set attributes (IGSET)
            */   SUBROUTINE *graf_close_F;     /* close workstation (ICLWK)
            */   /* optional routines for Motif customization
            */   pCharFunc  *user_FallBk_C;    /* get application fallbacks
            */   IntFunc    *user_TopWid_C;    /* pass toplevel widget
 identifiers        */ } klnkaddr;                     /*
                    */
 
typedef enum {                  /*                                         */
  KmFLAG_FORGET = 0x01,         /* last value is not kept for Motif panels */
  KmFLAG_MINUS  = 0x02,         /* -VALUE is not an abbrev for CHOPT=VALUE */
  KmFLAG_QUOTE  = 0x04,         /* do not remove quotes                    */
  KmFLAG_VARARG = 0x08          /* append additional args to this param.   */
 } KmParFlag;                    /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   KmTYPE_CHAR   = 'C',          /* character string                        */
   KmTYPE_FILE   = 'F',          /* file name                               */
   KmTYPE_INT    = 'I',          /* integer                                 */
   KmTYPE_OPTION = 'O',          /* option                                  */
   KmTYPE_REAL   = 'R'           /* real                                    */
 } KmParType;                    /*                                         */
                                 /*                                         */
 typedef struct {                /* file name                               */
   char         *filter_default; /* filter wildcard                         */
   char         *filter_current; /* current filter                          */
 } KmParFile;                    /*                                         */
                                 /*                                         */
 typedef struct {                /*                                         */
   char         *range_lower;    /* lower value of range                    */
   char         *range_upper;    /* upper value of range                    */
   char         *slider_lower;   /* lower limit for slider                  */
   char         *slider_upper;   /* upper limit for slider                  */
   int           decimals;       /* number of decimals used for slider      */
 } KmParInt;                     /*                                         */
                                 /*                                         */
 typedef struct {                /* option                                  */
   char        **text;           /* explanations (parallel to range_value)  */
   int          *mutex;          /* mutex group to which text belongs       */
   int          *radio;          /* radio group to which text belongs       */
 } KmParOption;                  /*                                         */
                                 /*                                         */
 typedef KmParInt KmParReal;     /* real and int have the same fields       */
                                 /*                                         */
 typedef struct {                /*                                         */
   char         *name;           /* parameter name                          */
   int           abbrev;         /* minimum length that name is recognized  */
   char         *prompt;         /* prompt string                           */
   char         *dfault;         /* default value                           */
   char         *last;           /* last value for Motif panel (malloced)   */
   int           width;          /* width of input field                    */
   int           range_count;    /* number of items in range_value          */
   char        **range_value;    /* list of allowed values                  */
   int           select_count;   /* number of items in select_count         */
   char        **select_value;   /* list of values for selection box        */
   KmParFlag     flags;          /* special flags                           */
   KmParType     type;           /* parameter type                          */
   void        *ptype;           /* structure pointer selected by type      */
 } KmParameter;                  /*                                         */
 
typedef struct _KmCommand {     /*                                         */
  struct _KmCommand *next;      /* link to next command                    */
  char         *path;           /* command path                            */
  char         *name;           /* command name                            */
  int           hidden;         /* flag if command is invisible            */
  int           level;          /* depth of submenus                       */
  int           total;          /* total number of parameters              */
  int           mandatory;      /* number of mandatory parameters          */
  KmParameter **par;            /* list of total parameter descriptions    */
  int           list_par;       /* index+1 of parameter taking a list      */
  int           xcount;         /* count number of action calls            */
  SUBROUTINE   *action_F;       /* action routine                          */
  IntFunc      *action_C;       /* action routine                          */
  SUBROUTINE   *user_help_F;    /* user help routine                       */
  IntFunc      *user_help_C;    /* user help routine                       */
  int          nguidance;       /* number of lines in guidance text        */
  char        **guidance;       /* help text                               */
  int           argc;           /* number of arguments entered             */
  char        **argv;           /* argc argument values                    */
  char         *argline;        /* argument line as entered                */
  int          *argoffs;        /* argc offsets into argline for KUGETE    */
 } KmCommand;                    /*                                         */
                                 /*                                         */
 typedef struct _KmMenu {        /*                                         */
   struct _KmMenu *next;         /* link to next menu                       */
   struct _KmMenu *down;         /* link to submenu                         */
   char         *path;           /* path of parent menu                     */
   char         *name;           /* menu name                               */
   int           level;          /* depth of submenus                       */
   KmCommand    *cmds;           /* link to first command                   */
   int          nguidance;       /* number of lines in guidance text        */
   char        **guidance;       /* help text                               */
 } KmMenu;                       /*                                         */
 
#ifdef F77_LCASE
#  define dzedef_ dzedef
#  define dzebkk_ dzebkk
#  define dzelas_ dzelas
#  define dzelof_ dzelof
#  define dzedof_ dzedof
#  define dzeqit_ dzeqit
#  define dzedsp_ dzedsp
#  define dzedra_ dzedra
#  define dzedrw_ dzedrw
#  define dzelal_ dzelal
#  define dzelsg_ dzelsg
#  define dzedrz_ dzedrz
#  define dzedel_ dzedel
#  define dzepur_ dzepur
#  define dzdcld_ dzdcld
#  define dzeopl_ dzeopl
#  define dzeurz_ dzeurz
#  define dzemrz_ dzemrz
#endif
 
#ifdef F77_UCASE
#  define dzedef_ DZEDEF
#  define dzebkk_ DZEBKK
#  define dzelas_ DZELAS
#  define dzelof_ DZELOF
#  define dzedof_ DZEDOF
#  define dzeqit_ DZEQIT
#  define dzedsp_ DZEDSP
#  define dzedra_ DZEDRA
#  define dzedrw_ DZEDRW
#  define dzelal_ DZELAL
#  define dzelsg_ DZELSG
#  define dzedrz_ DZEDRZ
#  define dzedel_ DZEDEL
#  define dzepur_ DZEPUR
#  define dzdcld_ DZDCLD
#  define dzeopl_ DZEOPL
#  define dzeurz_ DZEURZ
#  define dzemrz_ DZEMRZ
#endif
 
#ifdef IBM370
#  pragma linkage(DZEDEF,FORTRAN)
#  pragma linkage(DZEBKK,FORTRAN)
#  pragma linkage(DZELAS,FORTRAN)
#  pragma linkage(DZELOF,FORTRAN)
#  pragma linkage(DZEDOF,FORTRAN)
#  pragma linkage(DZEQIT,FORTRAN)
#  pragma linkage(DZEDSP,FORTRAN)
#  pragma linkage(DZEDRA,FORTRAN)
#  pragma linkage(DZEDRW,FORTRAN)
#  pragma linkage(DZELAL,FORTRAN)
#  pragma linkage(DZELSG,FORTRAN)
#  pragma linkage(DZEDRZ,FORTRAN)
#  pragma linkage(DZEDEL,FORTRAN)
#  pragma linkage(DZEPUR,FORTRAN)
#  pragma linkage(DZDCLD,FORTRAN)
#  pragma linkage(DZEOPL,FORTRAN)
#  pragma linkage(DZEURZ,FORTRAN)
#  pragma linkage(DZEMRZ,FORTRAN)
#endif
 
extern void dzedef_();
extern void dzebkk_();
extern void dzelas_();
extern void dzelof_();
extern void dzedof_();
extern void dzeqit_();
extern void dzedsp_();
extern void dzedra_();
extern void dzedrw_();
extern void dzelal_();
extern void dzelsg_();
extern void dzedrz_();
extern void dzedel_();
extern void dzepur_();
extern void dzdcld_();
extern void dzeopl_();
extern void dzeurz_();
extern void dzemrz_();
 
void dzedef_()
{
 
static KmParameter _DZEDIT_MAKECODE_LIFT_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LIFT_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LIFT_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_MAKECODE_LIFT_CHOPTB_type = { (char**)0, (int*)0,
 (int*)0 };
static KmParameter _DZEDIT_MAKECODE_LIFT_CHOPTB = { "CHOPTB", 6,
 "Option, S single bank", "TL", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_MAKECODE_LIFT_CHOPTB_type };
static KmParameter *_DZEDIT_MAKECODE_LIFT_parameters[] = {
 &_DZEDIT_MAKECODE_LIFT_CHBSBK, &_DZEDIT_MAKECODE_LIFT_CHBSUP,
 &_DZEDIT_MAKECODE_LIFT_CHLIST, &_DZEDIT_MAKECODE_LIFT_CHOPTB };
static char *_DZEDIT_MAKECODE_LIFT_guidance[] = {
 "Generate code to lift a bank  (Option 'S') or bank tree (Option 'T').",
 "With option 'L' (default) calls to MZLIFT are generated, with 'B'",
 "calls to MZBOOK. See also GUIDANCE for BOOK." };
static KmCommand _DZEDIT_MAKECODE_LIFT = {  (KmCommand*)0,
 "/DZEDIT/MAKECODE/LIFT", "LIFT", 0, 2, 4, 2,
 _DZEDIT_MAKECODE_LIFT_parameters, 0, 0, dzebkk_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 3, _DZEDIT_MAKECODE_LIFT_guidance, 0, (char**)0, (char*)0,
 (int*)0 };
 
static KmParameter _DZEDIT_MAKECODE_BOOK_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_BOOK_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_BOOK_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_MAKECODE_BOOK_CHOPTB_type = { (char**)0, (int*)0,
 (int*)0 };
static KmParameter _DZEDIT_MAKECODE_BOOK_CHOPTB = { "CHOPTB", 6,
 "Option, S single bank", "TB", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_MAKECODE_BOOK_CHOPTB_type };
static KmParameter *_DZEDIT_MAKECODE_BOOK_parameters[] = {
 &_DZEDIT_MAKECODE_BOOK_CHBSBK, &_DZEDIT_MAKECODE_BOOK_CHBSUP,
 &_DZEDIT_MAKECODE_BOOK_CHLIST, &_DZEDIT_MAKECODE_BOOK_CHOPTB };
static char *_DZEDIT_MAKECODE_BOOK_guidance[] = {
 "Generate code to book a bank  (Option 'S') or bank tree (Option 'T').",
 "With option 'B' (default) calls to MZBOOK are generated, with 'L'",
 "calls to MZLIFT. For MZLIFT the bank parameters are put into arrays",
 "MMIDBK which go into an own KEEP sequence.",
 "The link to the bank 'BANK' is named LBANK, the uplink is assumed LUPBK,",
 "if the up-bank is called UPBK.",
 "For LBANK the declaration \"INTEGER LBANK\" is generated, for LUPBK it",
 "is assumed to be done already. A call to MZFORM is generated if not",
 "all data words are of the same type.",
 "The link offset (JBIAS) is taken from the card *B.UP UPBK -JBIAS, if",
 "JBIAS is given. If it is not given it is searched for in the",
 "documentation of the Up-bank. If UPBK is \"NONE\" it is set to +1.",
 "The following defaults are taken if the corresponding parameter is",
 "not explicitly documented:", "  IXDIV:  0 (i.e. div 2 in store 0)",
 "  JBIAS:  no default", "  NL:     0", "  NS:     0", "  ND:     0",
 "  IOChar: no default, except if ND=0", "  NZERO:  0" };
static KmCommand _DZEDIT_MAKECODE_BOOK = { &_DZEDIT_MAKECODE_LIFT,
 "/DZEDIT/MAKECODE/BOOK", "BOOK", 0, 2, 4, 2,
 _DZEDIT_MAKECODE_BOOK_parameters, 0, 0, dzebkk_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 21, _DZEDIT_MAKECODE_BOOK_guidance, 0, (char**)0, (char*)0,
 (int*)0 };
 
static KmParameter _DZEDIT_MAKECODE_LINKASSIGNMENT_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKASSIGNMENT_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKASSIGNMENT_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKASSIGNMENT_CHPFIX = { "CHPFIX", 6,
 "Prefix to BankId", "LO", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_MAKECODE_LINKASSIGNMENT_CHOPTL_type = { (char**)0,
 (int*)0, (int*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKASSIGNMENT_CHOPTL = { "CHOPTL", 6,
 "Option, S single bank", "T", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHOPTL_type };
static KmParameter *_DZEDIT_MAKECODE_LINKASSIGNMENT_parameters[] = {
 &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHBSBK,
 &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHBSUP,
 &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHLIST,
 &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHPFIX,
 &_DZEDIT_MAKECODE_LINKASSIGNMENT_CHOPTL };
static char *_DZEDIT_MAKECODE_LINKASSIGNMENT_guidance[] = {
 "Generate sequences of link assignment statements for selected",
 "bank (Option 'S') or tree (option 'T').",
 "Exactly two times 4 characters are needed to define bank and up-bank.",
 "The assumed linkoffset is named CHPFIX concatenated with the", "bank Id.",
 "Example: if a link to bank IDBK with Up-bank IDUP is described like:",
 "         *B.UP IDUP", "         *B.LINK", "         ...",
 "         *B.7  IDBK  Bank containing anything", "         would produce:",
 "         INTEGER LOIDBK", "         LOIDBK=LQ(LOIDUP-7)" };
static KmCommand _DZEDIT_MAKECODE_LINKASSIGNMENT = { &_DZEDIT_MAKECODE_BOOK,
 "/DZEDIT/MAKECODE/LINKASSIGNMENT", "LINKASSIGNMENT", 0, 2, 5, 2,
 _DZEDIT_MAKECODE_LINKASSIGNMENT_parameters, 0, 0, dzelas_, (IntFunc*)0,
 (SUBROUTINE*)0, (IntFunc*)0, 13, _DZEDIT_MAKECODE_LINKASSIGNMENT_guidance, 0,
 (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_MAKECODE_LINKOFFSETS_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKOFFSETS_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKOFFSETS_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKOFFSETS_CHPFIX = { "CHPFIX", 6,
 "Prefix to BankId", "LO", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_MAKECODE_LINKOFFSETS_CHOPTL_type = { (char**)0,
 (int*)0, (int*)0 };
static KmParameter _DZEDIT_MAKECODE_LINKOFFSETS_CHOPTL = { "CHOPTL", 6,
 "Option, S single bank", "T", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_MAKECODE_LINKOFFSETS_CHOPTL_type };
static KmParameter *_DZEDIT_MAKECODE_LINKOFFSETS_parameters[] = {
 &_DZEDIT_MAKECODE_LINKOFFSETS_CHBSBK, &_DZEDIT_MAKECODE_LINKOFFSETS_CHBSUP,
 &_DZEDIT_MAKECODE_LINKOFFSETS_CHLIST, &_DZEDIT_MAKECODE_LINKOFFSETS_CHPFIX,
 &_DZEDIT_MAKECODE_LINKOFFSETS_CHOPTL };
static char *_DZEDIT_MAKECODE_LINKOFFSETS_guidance[] = {
 "Generate sequences of link offsets for a selected bank (Option 'S')",
 "or tree (Option 'T').",
 "Exactly two times 4 characters are needed to define bank and up-bank.",
 "The variable generated is named CHPFIX concatenated with the", "bank Id.",
 "Example: if a link to bank IDBK is described like this:",
 "         *B.LINK", "         ...",
 "         *B.7 IDBK  Bank containing anything", "         would produce:",
 "         INTEGER LOIDBK", "         PARAMETER (LOIDBK=7)" };
static KmCommand _DZEDIT_MAKECODE_LINKOFFSETS = {
 &_DZEDIT_MAKECODE_LINKASSIGNMENT, "/DZEDIT/MAKECODE/LINKOFFSETS",
 "LINKOFFSETS", 0, 2, 5, 2, _DZEDIT_MAKECODE_LINKOFFSETS_parameters, 0, 0,
 dzelof_, (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 12,
 _DZEDIT_MAKECODE_LINKOFFSETS_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_CHPFIX = { "CHPFIX", 6,
 "Prefix for data offset", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_MAKECODE_DATAOFFSETS_CHOPTD_type = { (char**)0,
 (int*)0, (int*)0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_CHOPTD = { "CHOPTD", 6,
 "Option, S single bank", "T", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_MAKECODE_DATAOFFSETS_CHOPTD_type };
static KmParInt    _DZEDIT_MAKECODE_DATAOFFSETS_IFW_type = { (char*)0,
 (char*)0, (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_IFW = { "IFW", 3,
 "First word", "1", (char*)0, 8, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_INT, &_DZEDIT_MAKECODE_DATAOFFSETS_IFW_type };
static KmParInt    _DZEDIT_MAKECODE_DATAOFFSETS_ILW_type = { (char*)0,
 (char*)0, (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_MAKECODE_DATAOFFSETS_ILW = { "ILW", 3, "Last word",
 "1000", (char*)0, 8, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_INT,
 &_DZEDIT_MAKECODE_DATAOFFSETS_ILW_type };
static KmParameter *_DZEDIT_MAKECODE_DATAOFFSETS_parameters[] = {
 &_DZEDIT_MAKECODE_DATAOFFSETS_CHBSBK, &_DZEDIT_MAKECODE_DATAOFFSETS_CHBSUP,
 &_DZEDIT_MAKECODE_DATAOFFSETS_CHLIST, &_DZEDIT_MAKECODE_DATAOFFSETS_CHPFIX,
 &_DZEDIT_MAKECODE_DATAOFFSETS_CHOPTD, &_DZEDIT_MAKECODE_DATAOFFSETS_IFW,
 &_DZEDIT_MAKECODE_DATAOFFSETS_ILW };
static char *_DZEDIT_MAKECODE_DATAOFFSETS_guidance[] = {
 "Generate sequences of data word offsets for a selected bank (Option 'S')",
 "or bank tree (Option 'T'). The names may optionally concatenated with",
 "a max 8 character mnemonic like 'DO_'",
 "With option 'Z' CHPFIX is appended, prefixed otherwise.",
 "Option 'N' suppresses PARAMETER statements.",
 "'2' allows to skip the first 2 char in data word name. (Allowed 1-9)",
 "Option '='  (with '1')produces: IDATA4(I)=IQ(NOFF+4),",
 "the sequence: '(I)=IQ(NOFF+' may be replaced by CHPFIX",
 "Example: a data word documented like this:",
 "         *B.4 IDATA4     This is the 4th data word",
 "         would produce (when putting CHPFIX to 'DO_':",
 "         INTEGER DO_IDATA4", "         PARAMETER (DO_IDATA4=4)" };
static KmCommand _DZEDIT_MAKECODE_DATAOFFSETS = {
 &_DZEDIT_MAKECODE_LINKOFFSETS, "/DZEDIT/MAKECODE/DATAOFFSETS", "DATAOFFSETS",
 0, 2, 7, 2, _DZEDIT_MAKECODE_DATAOFFSETS_parameters, 0, 0, dzedof_,
 (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 13,
 _DZEDIT_MAKECODE_DATAOFFSETS_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static char *_DZEDIT_MAKECODE_guidance[] = {
 "Generate PATCHY KEEP sequences containing FORTRAN code. With option",
 "'S' only the selected bank is treated, with option 'T' all banks",
 "in the selected tree are treated. The KEEP sequences are named",
 "with the hollerith Ids of the bank(trees) prefixed by mnemonics",
 "like BOOK, LKOFF, DAOFF etc." };
static KmMenu _DZEDIT_MAKECODE = {  (KmMenu*)0,  (KmMenu*)0,
 "/DZEDIT/MAKECODE", "MAKECODE", 2, &_DZEDIT_MAKECODE_DATAOFFSETS, 5,
 _DZEDIT_MAKECODE_guidance };
static char *_DZEDIT_DZEQUIT_guidance[] = {
 "Set flag to quit when returning from exec dzedit.kumac" };
static KmCommand _DZEDIT_DZEQUIT = {  (KmCommand*)0, "/DZEDIT/DZEQUIT",
 "DZEQUIT", 0, 1, 0, 0, (KmParameter**)0, 0, 0, dzeqit_, (IntFunc*)0,
 (SUBROUTINE*)0, (IntFunc*)0, 1, _DZEDIT_DZEQUIT_guidance, 0, (char**)0,
 (char*)0, (int*)0 };
 
static KmParOption _DZEDIT_DZDIRZ_CHOPT_type = { (char**)0, (int*)0, (int*)0 };
static KmParameter _DZEDIT_DZDIRZ_CHOPT = { "CHOPT", 5,
 "Options: C = use Color", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_DZDIRZ_CHOPT_type };
static KmParameter *_DZEDIT_DZDIRZ_parameters[] = { &_DZEDIT_DZDIRZ_CHOPT };
static char *_DZEDIT_DZDIRZ_guidance[] = {
 "Call DZDIRZ, display RZ-directory tree" };
static KmCommand _DZEDIT_DZDIRZ = { &_DZEDIT_DZEQUIT, "/DZEDIT/DZDIRZ",
 "DZDIRZ", 0, 1, 1, 0, _DZEDIT_DZDIRZ_parameters, 0, 0, dzedsp_, (IntFunc*)0,
 (SUBROUTINE*)0, (IntFunc*)0, 1, _DZEDIT_DZDIRZ_guidance, 0, (char**)0,
 (char*)0, (int*)0 };
 
static KmParOption _DZEDIT_DZDDIV_CHOPT_type = { (char**)0, (int*)0, (int*)0 };
static KmParameter _DZEDIT_DZDDIV_CHOPT = { "CHOPT", 5,
 "Options: C = use Color", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_DZDDIV_CHOPT_type };
static KmParameter *_DZEDIT_DZDDIV_parameters[] = { &_DZEDIT_DZDDIV_CHOPT };
static char *_DZEDIT_DZDDIV_guidance[] = { "Call DZDDIV" };
static KmCommand _DZEDIT_DZDDIV = { &_DZEDIT_DZDIRZ, "/DZEDIT/DZDDIV",
 "DZDDIV", 0, 1, 1, 0, _DZEDIT_DZDDIV_parameters, 0, 0, dzedsp_, (IntFunc*)0,
 (SUBROUTINE*)0, (IntFunc*)0, 1, _DZEDIT_DZDDIV_guidance, 0, (char**)0,
 (char*)0, (int*)0 };
 
static KmParOption _DZEDIT_DZDISP_CHOPT_type = { (char**)0, (int*)0, (int*)0 };
static KmParameter _DZEDIT_DZDISP_CHOPT = { "CHOPT", 5,
 "Options: C = use Color", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_DZDISP_CHOPT_type };
static KmParameter *_DZEDIT_DZDISP_parameters[] = { &_DZEDIT_DZDISP_CHOPT };
static char *_DZEDIT_DZDISP_guidance[] = {
 "Display the last generated tree if graphics is available. Note",
 "that the number of data words is three for each bank. Their",
 "contents indicates the documented number of data words and links.",
 "Use option C to get colored display." };
static KmCommand _DZEDIT_DZDISP = { &_DZEDIT_DZDDIV, "/DZEDIT/DZDISP",
 "DZDISP", 0, 1, 1, 0, _DZEDIT_DZDISP_parameters, 0, 0, dzedsp_, (IntFunc*)0,
 (SUBROUTINE*)0, (IntFunc*)0, 4, _DZEDIT_DZDISP_guidance, 0, (char**)0,
 (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_DRAWALL_CHMETA = { "CHMETA", 6,
 "Name of temp plot file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWALL_CHSGML = { "CHSGML", 6,
 "Name of temp text-file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWALL_CHPOST = { "CHPOST", 6,
 "Name of PostScript file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_DRAWALL_CHOPT_type = { (char**)0, (int*)0, (int*)0
 };
static KmParameter _DZEDIT_DRAWALL_CHOPT = { "CHOPT", 5,
 "Output:P=PostScript, L=Latex, N nocheck) ", " ", (char*)0, 20, 0, (char**)0,
 0, (char**)0, (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_DRAWALL_CHOPT_type };
static KmParameter _DZEDIT_DRAWALL_CTITLE = { "CTITLE", 6, "Global title",
 "ZEBRA-Datastructures", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_DRAWALL_parameters[] = { &_DZEDIT_DRAWALL_CHMETA,
 &_DZEDIT_DRAWALL_CHSGML, &_DZEDIT_DRAWALL_CHPOST, &_DZEDIT_DRAWALL_CHOPT,
 &_DZEDIT_DRAWALL_CTITLE };
static char *_DZEDIT_DRAWALL_guidance[] = {
 "Draw tree below all top banks (i.e. banks having 'NONE' as",
 "Up-bank. This also checks the consistency and completeness",
 "of the documentation if option 'N' is not given.", "Output option:",
 "               'P' or ' ' PostScript file",
 "               'L'        Latex file",
 "               'Q'        no output (check only)",
 "               'S'        suppress confirmation",
 "               'M' Put as many down banks as posibble on one picture",
 "                   (Per default 2nd level are only drawn if all fit)" };
static KmCommand _DZEDIT_DRAWALL = { &_DZEDIT_DZDISP, "/DZEDIT/DRAWALL",
 "DRAWALL", 0, 1, 5, 0, _DZEDIT_DRAWALL_parameters, 0, 0, dzedra_,
 (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 10, _DZEDIT_DRAWALL_guidance, 0,
 (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_DRAWONETREE_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWONETREE_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWONETREE_CHMETA = { "CHMETA", 6,
 "Name of temp plot file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWONETREE_CHSGML = { "CHSGML", 6,
 "Name of temp text-file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DRAWONETREE_CHPOST = { "CHPOST", 6,
 "Name of PostScript file", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParOption _DZEDIT_DRAWONETREE_CHOPT_type = { (char**)0, (int*)0,
 (int*)0 };
static KmParameter _DZEDIT_DRAWONETREE_CHOPT = { "CHOPT", 5,
 "Option (P=PostScript L=Latex) ", " ", (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_OPTION, &_DZEDIT_DRAWONETREE_CHOPT_type };
static KmParameter _DZEDIT_DRAWONETREE_CTITLE = { "CTITLE", 6, "Global title",
 "ZEBRA-Datastructures", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_DRAWONETREE_parameters[] = {
 &_DZEDIT_DRAWONETREE_CHBSBK, &_DZEDIT_DRAWONETREE_CHBSUP,
 &_DZEDIT_DRAWONETREE_CHMETA, &_DZEDIT_DRAWONETREE_CHSGML,
 &_DZEDIT_DRAWONETREE_CHPOST, &_DZEDIT_DRAWONETREE_CHOPT,
 &_DZEDIT_DRAWONETREE_CTITLE };
static char *_DZEDIT_DRAWONETREE_guidance[] = {
 "Draw tree below a selected bank. All banks belonging to the",
 "tree will be actually lifted in memory each with three data",
 "words. Word 1, 2, 3 are the number of data words, links and",
 "structural links as described in the documentation, a -1 indicates",
 "a variable number. A global title may be given which appears",
 "on the front page of the document.", "Output option:",
 "               'P' PostScript file (default)",
 "               'L' Latex file",
 "               'Q' quiet i.e. generate no output files",
 "               'C' check consistency",
 "               'M' Put as many down banks as posibble on one picture",
 "                   (Per default 2nd level are only drawn if all fit)" };
static KmCommand _DZEDIT_DRAWONETREE = { &_DZEDIT_DRAWALL,
 "/DZEDIT/DRAWONETREE", "DRAWONETREE", 0, 1, 7, 2,
 _DZEDIT_DRAWONETREE_parameters, 0, 0, dzedrw_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 13, _DZEDIT_DRAWONETREE_guidance, 0, (char**)0, (char*)0,
 (int*)0 };
 
static KmParameter _DZEDIT_LISTALL_CHLIST = { "CHLIST", 6, "File for listing",
 " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,
 (void*)0 };
static KmParameter _DZEDIT_LISTALL_CHLOPT = { "CHLOPT", 6,
 "List option: P=PostScript, I=Input", " ", (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static char *_DZEDIT_LISTALL_CHOYNO_range[] = { "NO", "YES" };
static KmParameter _DZEDIT_LISTALL_CHOYNO = { "CHOYNO", 6,
 "List all cycles    ", "NO", (char*)0, 8, 2, _DZEDIT_LISTALL_CHOYNO_range, 2,
 _DZEDIT_LISTALL_CHOYNO_range, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _DZEDIT_LISTALL_IDATCH_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_LISTALL_IDATCH = { "IDATCH", 6,
 "List only after date", "0", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_DZEDIT_LISTALL_IDATCH_type };
static KmParameter *_DZEDIT_LISTALL_parameters[] = { &_DZEDIT_LISTALL_CHLIST,
 &_DZEDIT_LISTALL_CHLOPT, &_DZEDIT_LISTALL_CHOYNO, &_DZEDIT_LISTALL_IDATCH };
static char *_DZEDIT_LISTALL_guidance[] = {
 "List documentation for all banks", "List option:",
 "          'P' PostScript file (default: simple text file)",
 "          'I' use format of the bank descriptor cards",
 "              (i.e. Input to CREATEDOC)" };
static KmCommand _DZEDIT_LISTALL = { &_DZEDIT_DRAWONETREE, "/DZEDIT/LISTALL",
 "LISTALL", 0, 1, 4, 0, _DZEDIT_LISTALL_parameters, 0, 0, dzelal_,
 (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 5, _DZEDIT_LISTALL_guidance, 0,
 (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_LISTONEBANK_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_LISTONEBANK_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_LISTONEBANK_CHLIST = { "CHLIST", 6,
 "File for listing", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_LISTONEBANK_CHLOPT = { "CHLOPT", 6,
 "List option: P=PostScript, I=Input", " ", (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static char *_DZEDIT_LISTONEBANK_CHOYNO_range[] = { "NO", "YES" };
static KmParameter _DZEDIT_LISTONEBANK_CHOYNO = { "CHOYNO", 6,
 "List all cycles    ", "NO", (char*)0, 8, 2,
 _DZEDIT_LISTONEBANK_CHOYNO_range, 2, _DZEDIT_LISTONEBANK_CHOYNO_range,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _DZEDIT_LISTONEBANK_IDATCH_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_LISTONEBANK_IDATCH = { "IDATCH", 6,
 "List only after date", "0", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_DZEDIT_LISTONEBANK_IDATCH_type };
static KmParameter *_DZEDIT_LISTONEBANK_parameters[] = {
 &_DZEDIT_LISTONEBANK_CHBSBK, &_DZEDIT_LISTONEBANK_CHBSUP,
 &_DZEDIT_LISTONEBANK_CHLIST, &_DZEDIT_LISTONEBANK_CHLOPT,
 &_DZEDIT_LISTONEBANK_CHOYNO, &_DZEDIT_LISTONEBANK_IDATCH };
static char *_DZEDIT_LISTONEBANK_guidance[] = {
 "List documentation for a selected bank or a group of banks.",
 "An '*' (asterix) may be used as wild card character.",
 "Exactly two times 4 characters are needed to define bank and up-bank.",
 "only the last cycle of one entry is listed regardless of its date.",
 "List of all cycles or selection by date of entering the RZ-file may",
 "also be choosen. The date is an integer of the form YYMMDD.",
 "List option:", "          'P' PostScript file (default: simple text file)",
 "          'I' use format of the bank descriptor cards",
 "              (i.e. Input to CREATEDOC)" };
static KmCommand _DZEDIT_LISTONEBANK = { &_DZEDIT_LISTALL,
 "/DZEDIT/LISTONEBANK", "LISTONEBANK", 0, 1, 6, 2,
 _DZEDIT_LISTONEBANK_parameters, 0, 0, dzelsg_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 10, _DZEDIT_LISTONEBANK_guidance, 0, (char**)0, (char*)0,
 (int*)0 };
 
static KmParameter _DZEDIT_LISTDIRECTORY_CHRZF = { "CHRZF", 5,
 "Input RZ-file", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_LISTDIRECTORY_parameters[] = {
 &_DZEDIT_LISTDIRECTORY_CHRZF };
static char *_DZEDIT_LISTDIRECTORY_guidance[] = {
 "List directory of an existing RZ-file" };
static KmCommand _DZEDIT_LISTDIRECTORY = { &_DZEDIT_LISTONEBANK,
 "/DZEDIT/LISTDIRECTORY", "LISTDIRECTORY", 0, 1, 1, 1,
 _DZEDIT_LISTDIRECTORY_parameters, 0, 0, dzedrz_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 1, _DZEDIT_LISTDIRECTORY_guidance, 0, (char**)0, (char*)0,
 (int*)0 };
 
static KmParameter _DZEDIT_DELETEKEY_CHBSBK = { "CHBSBK", 6,
 "Hollerith Id of selected bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_DELETEKEY_CHBSUP = { "CHBSUP", 6,
 "Hollerith Id of its up-bank", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _DZEDIT_DELETEKEY_ICYCLE_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_DELETEKEY_ICYCLE = { "ICYCLE", 6, "Cycle number",
 "0", (char*)0, 8, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_INT,
 &_DZEDIT_DELETEKEY_ICYCLE_type };
static KmParameter _DZEDIT_DELETEKEY_CHDOPT = { "CHDOPT", 6, "Delete option",
 "C", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,
 (void*)0 };
static KmParameter *_DZEDIT_DELETEKEY_parameters[] = {
 &_DZEDIT_DELETEKEY_CHBSBK, &_DZEDIT_DELETEKEY_CHBSUP,
 &_DZEDIT_DELETEKEY_ICYCLE, &_DZEDIT_DELETEKEY_CHDOPT };
static char *_DZEDIT_DELETEKEY_guidance[] = {
 "Delete a key specifying BankId and UpBankId and cycle number.",
 "  ICYCLE >= highest: delete highest cycle,",
 "          = 0:       delete lowest cycle,",
 "          = -1, -2 : delete highest-1, -2..", "Options:",
 "          'C': delete all cycles", "          'K': delete all keys,",
 "          'S': delete all cycles smaller ICYCLE.",
 "               (See also ZEBRA users guide: RZDELK)" };
static KmCommand _DZEDIT_DELETEKEY = { &_DZEDIT_LISTDIRECTORY,
 "/DZEDIT/DELETEKEY", "DELETEKEY", 0, 1, 4, 2, _DZEDIT_DELETEKEY_parameters,
 0, 0, dzedel_, (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 9,
 _DZEDIT_DELETEKEY_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static KmParInt    _DZEDIT_PURGEKEY_NKEEP_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _DZEDIT_PURGEKEY_NKEEP = { "NKEEP", 5,
 "Number of cycles to be kept", "-1", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_DZEDIT_PURGEKEY_NKEEP_type };
static KmParameter *_DZEDIT_PURGEKEY_parameters[] = { &_DZEDIT_PURGEKEY_NKEEP
 };
static char *_DZEDIT_PURGEKEY_guidance[] = {
 "Purge cycles of all keys keeping the last NKEEP.",
 "If NKEEP < 0 keep just the highest cycle." };
static KmCommand _DZEDIT_PURGEKEY = { &_DZEDIT_DELETEKEY, "/DZEDIT/PURGEKEY",
 "PURGEKEY", 0, 1, 1, 0, _DZEDIT_PURGEKEY_parameters, 0, 0, dzepur_,
 (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 2, _DZEDIT_PURGEKEY_guidance, 0,
 (char**)0, (char*)0, (int*)0 };
 
static char *_DZEDIT_CLOSERZFILE_guidance[] = { "Close  an open RZ-file." };
static KmCommand _DZEDIT_CLOSERZFILE = { &_DZEDIT_PURGEKEY,
 "/DZEDIT/CLOSERZFILE", "CLOSERZFILE", 0, 1, 0, 0, (KmParameter**)0, 0, 0,
 dzdcld_, (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 1,
 _DZEDIT_CLOSERZFILE_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_OPENRZFILE_CHRZF = { "CHRZF", 5, "Input RZ-file",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_OPENRZFILE_CHOOPT = { "CHOOPT", 6,
 "Option for RZFILE (U=Update)", "X", (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_OPENRZFILE_parameters[] = {
 &_DZEDIT_OPENRZFILE_CHRZF, &_DZEDIT_OPENRZFILE_CHOOPT };
static char *_DZEDIT_OPENRZFILE_guidance[] = {
 "Open an existing RZ-file for later use with list/draw/export commands",
 "(the file will be READONLY unless the 'U'=update option is given)" };
static KmCommand _DZEDIT_OPENRZFILE = { &_DZEDIT_CLOSERZFILE,
 "/DZEDIT/OPENRZFILE", "OPENRZFILE", 0, 1, 2, 1,
 _DZEDIT_OPENRZFILE_parameters, 0, 0, dzeopl_, (IntFunc*)0, (SUBROUTINE*)0,
 (IntFunc*)0, 2, _DZEDIT_OPENRZFILE_guidance, 0, (char**)0, (char*)0, (int*)0
 };
 
static KmParameter _DZEDIT_UPDATEDOC_CHCARD = { "CHCARD", 6,
 "Input card image file", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_UPDATEDOC_CHRZF = { "CHRZF", 5, "Output RZ-file",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_UPDATEDOC_CHSUBD = { "CHSUBD", 6,
 "Subdirectory name (blank=topdir)", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_UPDATEDOC_parameters[] = {
 &_DZEDIT_UPDATEDOC_CHCARD, &_DZEDIT_UPDATEDOC_CHRZF,
 &_DZEDIT_UPDATEDOC_CHSUBD };
static char *_DZEDIT_UPDATEDOC_guidance[] = {
 "Update an existing RZ-file with new documentation, this command",
 "can also be used to put the documentation into any subdirectory",
 "of an existing RZ-file." };
static KmCommand _DZEDIT_UPDATEDOC = { &_DZEDIT_OPENRZFILE,
 "/DZEDIT/UPDATEDOC", "UPDATEDOC", 0, 1, 3, 2, _DZEDIT_UPDATEDOC_parameters,
 0, 0, dzeurz_, (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 3,
 _DZEDIT_UPDATEDOC_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static KmParameter _DZEDIT_CREATEDOC_CHCARD = { "CHCARD", 6,
 "Input card image file", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _DZEDIT_CREATEDOC_CHRZF = { "CHRZF", 5, "Output RZ-file",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_DZEDIT_CREATEDOC_parameters[] = {
 &_DZEDIT_CREATEDOC_CHCARD, &_DZEDIT_CREATEDOC_CHRZF };
static char *_DZEDIT_CREATEDOC_guidance[] = {
 "Create a new RZ-file from documentation card image file" };
static KmCommand _DZEDIT_CREATEDOC = { &_DZEDIT_UPDATEDOC,
 "/DZEDIT/CREATEDOC", "CREATEDOC", 0, 1, 2, 2, _DZEDIT_CREATEDOC_parameters,
 0, 0, dzemrz_, (IntFunc*)0, (SUBROUTINE*)0, (IntFunc*)0, 1,
 _DZEDIT_CREATEDOC_guidance, 0, (char**)0, (char*)0, (int*)0 };
 
static char *_DZEDIT_guidance[] = { "Maintain the DZDOC data base" };
static KmMenu _DZEDIT = {  (KmMenu*)0, &_DZEDIT_MAKECODE, "/DZEDIT", "DZEDIT",
 1, &_DZEDIT_CREATEDOC, 1, _DZEDIT_guidance };
  klnkmenu( &_DZEDIT, 921023 );
}
 
 
